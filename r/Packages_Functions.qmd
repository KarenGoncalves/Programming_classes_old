---
title: "R class - packages and functions"
fontsize: 1.25em
linkcolor: grey
callout-appearance: simple
format: 
  revealjs:
    transition: none
    theme: dark
    scrollable: true
author: "Karen Cristine Goncalves, Ph.D."
date: "September 2023"
incremental: false
echo: true
message: false
warning: false
slide-number: true
---

```{r, include=F}
options(repos="https://cran.rstudio.com/")
library(tidyverse)
```


## Be lazy!

The most certain way to make mistakes when programming is typing everything.

Think of when you are writing a text, how many typos do you make? This will happen when you are coding!

Realizing there are typos or bigger mistakes in your code is more difficult than in a text to a friend. 

So, be lazy and copy/paste codes when possible. 

. . .

Also, don't try to re-invent the wheel. Check on [stack-overflow](https://stackoverflow.com/questions/tagged/r), [bioconductor](https://support.bioconductor.org/) or [github](github.com) to see if other people already tried what you are doing and the solutions they came up with. You can always edit their code!

## Packages 

These are simply folders containing files with many functions.

They may contain data so you can test the functions.


### How to use packages

:::{.panel-tabset}

# Install

If you never used the package, it probably is not installed in your computer, so you need to use the function "install.packages"

```{.r}
install.packages("vegan") # a package with functions for multivariate stats functions

# You can install many packages at once
install.packages(c("venn", "tidyverse"))
```


# Load

`install.packages` just installs the package, but it does not load it (open in R). To load, use the function library

```{.r}
library(cluster)
library("tidyverse") # you do not need the quotes with the function library
```

:::{.callout-caution}
You cannot put multiple package names in the library function
You need to load them one by one
:::

# Advanced install and load

Come back to this part once you are more comfortable with programming.

You cannot put a vector (ie. `c("a", "b", "c")`) inside `library()`, but you can write a code that loads the packages one by one without you writing that manually.

```{.r}
# start by creating a vector with all the packages you need
pkgs = c("rmarkdown", "tidyverse", "venn")

# We check which packages are NOT (!) installed
pkgs.To.Install = ! pkgs %in% installed.packages()

# any() checks if there is at least one TRUE in the vector
if (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])

for (curPkg in pkgs) library(curPkg, character.only = T) 
# curPkg is a variable that takes the value of each element in pkgs
# Every time the function library() is run, curPkg changes value
```


:::

## for loop

`for` is a function that will repeat what you ask for everything in the group you give it. <br>Eg: every PhD candidate has to defend their theses: 

```{.r}
candidates = c("Serge", "Fadoua", "Arghavan", "Snehi", "Basanta", "Sajjad", "Mahsa", "Archana")

for (phd in candidates) { thesisDefense(phd) }
```
	
## Tidyverse - many packages that make your life easier 

When you load the package "tidyverse", it tells you that it loaded many others (packages from the uni*verse* **tidy**)

1. Tables and data.frames
	- dplyr: many functions to work with tables
	- tibble: construct data frames (tables)
	- tidyr: tools to better organize data (make it `tidy`ier)
	- readr: fast and friendly functions to read table data
2. Text-like data
	- forcats: (anagram of `factors`) tools to work with factors ([tutorial](https://cran.r-project.org/web/packages/forcats/vignettes/forcats.html))
	- stringr: work with text (character variables)
	- lubridate: work with dates

3. Plots
	- ggplot2: create better plots
4. Programming
	- purrr: functional programming in R ([cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf))

## Pipe (`|>` or `%>%`)

Think of the pipe as a tube connecting two functions. When the first function is done, instead of presenting its output, you use it to start a new function.

- Eg. To start a postdoc, I had to finish my Ph.D:  `phd("Karen") %>% postdoc`

:::{.callout-note}
If you use `|>`, you need to put the parenthesis in the function in front of it. Meaning:

- `phd("Karen") %>% postdoc` works same as `phd("Karen") %>% postdoc()` and `phd("Karen") |> postdoc()`
- `phd("Karen") |> postdoc` does not work
:::

Let's say you just want to check if R will read your file right or if you need to add more things to it before really working on the file.

:::{.panel-tabset}

# Exercise

Run the function `str` on your input file or on the <a style="color: red" href="exampleData/Class1_exampleData.txt">example from Class 0</a>


:::{.callout-tip}
You can load files from the internet without needing to download them to your computer!
:::

# Solution 1

```{.r}
# You could first put the path to the file in a variable, it would make things easier
myFile = "https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt"

str(read.delim(myFile))

```

```{r, echo = F}
myFile = "exampleData/Class1_exampleData.txt"

str(read.delim(myFile))

```

# Solution 2

Using pipe, you can see the progression of the pipeline, eg.: <br>`bachelor("Karen") %>% phd() %>% postdoc` <br>instead of <br>`postdoc(phd(bachelor("Karen")))`

Basically, the first function written is the first one used, not the last.

```{.r}
# You can also use a pipe ( %>% )
myFile = "https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt"

read.delim(myFile) %>% str
```
```{r, echo = F}
myFile = "exampleData/Class1_exampleData.txt"

read.delim(myFile) %>% str

```

:::


## `readxl` package - open excel files

Part of the `tidyverse` package

Allows you to:

- Check the names of the sheets of an excel file: `excel_sheets(MY_EXCEL_FILE)`
- Read sheets of an excel file as tibbles (a type of data.frame): 
	- `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)`
	- You can specify what defines NA: `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = ".")`
	- Instead of `header = T`, you use `col_names = T`
	- You can specify the number of rows to skip in the beginning with `skip = N`
	- You can specify the number of rows to read with `n_max = N`
	- You can specify which cols and rows to read with `range = "H40:T80"`
		- If `range` is specified, `skip` and `n_max` are ignored
		- You can include the name of the sheet: `range = "MY_SHEET!H40:T80"`
			- <span style="color: red">SHEET</span><span style="color: blue"> EXCLAMATION_POINT </span><span style="color: cyan">CELL_RANGE
			
## ggplot2


:::{.panel-tabset}

# Exercise

Create a colored boxplot with the dataset iris, with nice axes titles

# Solution 1

Code from the previous class
```{r first graph - colored-formatted boxplot}
colors = c("red", "green", "blue")
boxplot(Sepal.Length ~ Species, 
	data = iris, col = colors, 
	ylab = "Sepal length (mm)", xlab = "Species epithet")
```

# Solution 2

Use ggplot. The syntax may take a while to get used to, but it is easier to read.

```{r}
# aes is short for aesthetics, basically what columns hold the values you want to plot
# fill is the color that will be inside the box, color is just for the border
ggplot(data = iris,
       aes(x = Species,
           y = Sepal.Length,
           fill = Species)) +
	geom_boxplot() + # the type of plot you want
	ylab("Sepal length (mm)") +
	xlab("Species epithet")
```

# Solution 3

Improve ggplot by setting a better theme [(check here see the options)](https://ggplot2.tidyverse.org/reference/ggtheme.html)

```{r}
# Set a theme for all future plots in this session
theme_set(theme_bw()) 

# Use different colors to fill and remove the legend
colors = c("red", "green", "blue")

ggplot(data = iris,
       aes(x = Species,
           y = Sepal.Length,
           fill = Species)) +
	geom_boxplot(show.legend = F) + # the type of plot you want
	ylab("Sepal length (mm)") +
	xlab("Species epithet") +
	scale_fill_manual(values = colors)
```

:::

## ggplot - part 2

Graphics are layers of data and images put on top of each other. That is why the pieces of the ggplot function are connected by a **`+`**.

The codes below construct the plot from the previous slide piece by piece.

:::{.panel-tabset}

# Basic plot

```{r}
# Set a theme for all future plots in this session
theme_set(theme_bw()) 

# Use different colors to fill and remove the legend
(plot1 = ggplot(data = iris,
       aes(x = Species,
           y = Sepal.Length,
           fill = Species)))
```


```{r}
(plot2 = plot1 +
	geom_boxplot(show.legend = F)) # the type of plot you want
```

# Decorations

`labs` adds labels:

- `x` and `y` -  will add the labels to the axes (you can use the functions `xlab` or `ylab` instead)
- `title` - Normally at the top of the figure (you can use the function `ggtitle` instead)
- `subtitle` - Goes under the title and is a bit smaller
- `caption` - Normally goes at the bottom of the figure and is a small text
- `tag` - the letter that goes at the top-left corner of a plot that is one part of several in a figure

```{r}
(plot3 = plot2 +
	labs(y = "Sepal length (mm)", x = "Species epithet"))

plot3
```

```{r}
colors = c("red", "green", "blue")

plot3 + scale_fill_manual(values = colors)
```

:::

## dplyr: prepare your data for ggplot

In the example dataset, the names of the groups are in the middle not specified, they are inside the replicate name. We need one column with the values and one with the names of the treatments.

:::{.panel-tabset}

# Input data
```{.r}
myFile = "https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt"
```
```{r, echo = F}
myFile = "exampleData/Class1_exampleData.txt"
```


```{r}
rawData = read.delim(myFile)
names(rawData)

# Let's change x to "Measured"
names(rawData)[1] = "Measured"
```

# Pivot-longer

The table now is in the format "wide", the one we want is called "long"

```{r}

longData = pivot_longer(
	data = rawData,
	cols = !Measured, # gets all the columns of the table, except for the one in front of !
	names_to = "Replicates", # name of the column that will contain column names from rawData
	values_to = "Measurements"
	)

str(longData)
```

# New column

Let's split the values from "Replicates" using str_split from stringr

`mutate` will return the input table with the new column we create

```{r}
# pattern is what separates (_)
# i is the part that we want to see: Control_1 has 2 pieces, i=1 returns "Control"

longDataTreatments = longData %>%
	mutate(Treatment = str_split_i(Replicates, pattern = "_", i = 1))

str(longDataTreatments)
```

# Plot

```{r}
longDataTreatments %>%
	ggplot(aes(x = Treatment, y = Measurements, fill = Measured)) +
	geom_boxplot()

longDataTreatments %>%
	ggplot(aes(x = Measured, y = Measurements, fill = Treatment)) +
	geom_boxplot()
```

:::

## Types of plots - sample distribution

1. Boxplot - [check this slide](#ggplot2)
	- ```geom_boxplot```
	- Allows the visual comparison of groups, like a bar chart, as well as the distribution of the replicates 
		- You can see the minimum, maximum and the median of the sample, as well as the outliers
1. Violin plot 
	- ```geom_violin```
	- Same as boxplot, but without the quantiles drawn
	
:::{.callout-tip}
You can put different types of plot and multiple data in the same graphic.

Over the violin or boxplot layer, you can add the points representing the value measured for each replicate, the mean, etc.
:::

:::{.callout-tip}
If you have few replicates (< 5), use a barplot with the standard deviation (make sure the color of the bar allows the visualization of the error bar)

If many replicates per group, use a boxplot or violin plot. 
:::

## Example violin plot {.incremental}

The code to get a violin plot is the same as the one for a boxplot, the only difference is the *geom_violin*.

```{r}
# Set a theme for all future plots in this session
theme_set(theme_bw()) 

# Use different colors to fill and remove the legend
colors = c("red", "green", "blue")

ggplot(data = iris,
       aes(x = Species,
           y = Sepal.Length,
           fill = Species)) +
	geom_violin(show.legend = F) + # violin instead of boxplot
	ylab("Sepal length (mm)") +
	xlab("Species epithet") +
	scale_fill_manual(values = colors)
```

## Types of plots - Bar chart

:::{.panel-tabset}

# What and how

- Uses
	- Visually compare means when the number of replicates is low
	- Visually compare counts (number of occurences) - number of students per lab
- How
	- Use either `geom_col` or `geom_bar(stat = "identity")`
	- Add standard deviation bar with *geom_errorbar*
		-  ```geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2)```
	

# `geom_col`


```{r}
df <- data.frame(
  group = c("Male", "Female", "Child"),
  value = c(25, 25, 50)
  )

# Barplot like geom_col
ggplot(df, aes(x = group, y = value, fill = group)) +
	geom_col(width = 1)
```

# `geom_bar(stat = "identity")`

- **identity** means that the size of the bar will be the value you put instead of calculating something

```{r}
df <- data.frame(
  group = c("Male", "Female", "Child"),
  value = c(25, 25, 50)
  )

# Barplot like geom_col
ggplot(df, aes(x = group, y = value, fill = group)) +
	geom_bar(width = 1,  stat = "identity")
```

# Pie chart

- Using either geom_bar or geom_col, you can make a pie chart with `+ coord_polar("y")`

```{r}
df <- data.frame(
  group = c("Male", "Female", "Child"),
  value = c(25, 25, 50)
  )

# Barplot like geom_col
ggplot(df, aes(x = "", y = value, fill = group)) +
	# x has to be "" - check how it looks if you put x = group
	geom_bar(width = 1,  stat = "identity") +
	coord_polar("y", start = 1) +
	theme_void() # clean up grids, borders, and labels
```

:::

## Types of plot - proportions


You can use `geom_bar(stat = "count")` if you do not have the number of occurrences of each category computed. This way, ggplot counts it and plots.
	- Eg. A table with metabolites detected separated by category: how many metabolites of each category were detected?

If you want proportions in %, use `stat = "density"` instead of `stat = "count"`


:::{.panel-tabset}

# `geom_bar - count`

- With *geom_bar*, you can have the same plot as with *geom_col* if you use `stat = "identity"`	
- **identity** means that the size of the bar will be the value you put instead of calculating something

```{r}
# Datasets about US states
US_statesInfo = data.frame(Name = state.name,
			   Region = state.region,
			   Division = state.division)
x = "Number of states"
# Plot the number of states in each division
ggplot(US_statesInfo, aes(y = Division)) +
	geom_bar(stat = "count") +
	xlab(x)

# Plot the number of states in each region
ggplot(US_statesInfo, aes(y = Region)) +
	geom_bar() +
	xlab(x)

# Plot the number of states in each division, and color by the region
ggplot(US_statesInfo, aes(y = Division, fill = Region)) +
	geom_bar(stat = "count") +
	xlab(x)

```

:::

## Types of plots - part 3


Line graph - ```geom_line```

- Visualize data **across time** - points are connected because they are the same sample at different times. 

:::{.panel-tabset}

# Simple

Let's say we want to see how the labs of 2 PIs have grown across the years and compare the two.

```{r}
# Let's create a time series to plot

LabSize = data.frame(Isabel = c(0, 3, 5, 10, 30),
		     Hugo = c(2, 2, 6, 9, 9),
		     Year = seq(2014, 2022, 2))
LabSize.Long = pivot_longer(LabSize,
			    cols = !Year, # all columns from LabSize, except "Year"
			    names_to = "PI", 
			    values_to = "LabMembers")

ggplot(LabSize.Long, 
       aes(x = Year, y = LabMembers, color = PI)) +
	geom_line()
```

# Advanced


:::{.panel-tabset}

# Input

We will use the [time series data](exampleData/TimeSeries_example.csv)

```{.r code-line-numbers="|1-3|4-5"}
# Load the data
timeSeries = read.csv("karengoncalves.github.io/ProgrammingClasses/r/exampleData/TimeSeries_example.csv", row.names = 1)
```
```{r, echo = F}
timeSeries = read.csv("exampleData/TimeSeries_example.csv", row.names = 1)
```


```{r}
str(timeSeries)
# Let's add a column indicating the time points
timeSeries$TimePoint = paste0("T", 1:nrow(timeSeries))
```

# Prepare the data

Let's transform the data to format long and add a column with the name of the treatment group

```{r}

timeSeriesLong = pivot_longer(
	timeSeries,
	cols = !TimePoint,
	names_to = "Replicates",
	values_to = "Growth_measure"
) %>% mutate(Treatment = str_split_i(Replicates, pattern = "_", i = 1))

head(timeSeriesLong)	

# We need to specify the order of the time points!
timeSeriesLong$TimePoint = factor(timeSeriesLong$TimePoint,
				  levels = timeSeries$TimePoint)
```

# Calculate stats

Now let's create another table with the mean, standard deviation and coefficient of variation of each treatment per time point

```{r}

GrowthMeasureStats = timeSeriesLong %>%
	group_by(Treatment, TimePoint) %>%
	summarise(
		Mean = mean(Growth_measure),
		StdEnv = sd(Growth_measure),
		CoefVar = sd(Growth_measure) / 
			mean(Growth_measure)
	)
```

# Line chart

```{r}
ggplot(GrowthMeasureStats) +
	geom_line(aes(x = TimePoint, y = Mean, 
		      group = Treatment, # this is important, repeat this code without this line to see why
		      color = Treatment))
```
# Line chart with error bars

For the error bars, we cannot simply say "here, this is the standard deviation".

We need to tell it "use this value as maximum and this as minimum"

See that we set "ymin" and "ymax". If you have standard deviation for the x-axis, you can add it with "xmin" and "xmax".
```{r}
# We put inside ggplot() what is common to all layers
ggplot(GrowthMeasureStats, aes(
	x = TimePoint, 
	group = Treatment, # this is important, repeat this code without this line to see why
	color = Treatment)) +
	geom_line(aes(y = Mean)) +
	geom_errorbar(aes(ymin = Mean - StdEnv,
			  ymax = Mean + StdEnv),
			  width = 0.2)
```
:::
:::

## References

- [All tidyverse packages](https://tidyverse.tidyverse.org/index.html)
- Tutorials on all types of plots with ggplot2
	- [r-statistics](http://r-statistics.co/ggplot2-Tutorial-With-R.html)
	- [Cedric Scherer - advanced](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)
- Tutorials on data manipulation with dplyr
	- [Tidyverse](https://dplyr.tidyverse.org/)
	- [R official](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)
	- [Genomics class](https://genomicsclass.github.io/book/pages/dplyr_tutorial.html)

## Code from class - tuesday's group

1. [Copy the code from this link](./exampleData/script_class2t.R)

OR

2. Run the code below

```{.r}
source("https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class2t.R")
```