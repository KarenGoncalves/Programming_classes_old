---
title: "Useful R commands"
author: "Karen Goncalves"
callout-appearance: simple
format: 
  html:
    toc: true
    toc-depth: 3
    toc-location: left
    code-copy: true
    code-line-numbers: true
---


# Commands

## Get help

You can get help about a package or function with the function `help()`. Just put the quoted name of the package/function inside the parenthesis. 

You can also just use a question mark in front of the package/function name (no quote needed in this case)

```{.r}
help("grep")
?grepl

help("stats")
?base
```

## Sequences and repetitions

:::{.panel-tabset}

# `seq`

Use the command `seq` to get a sequence of numbers. You can specify the interval between every number shown. The function is writen as:
`seq(FROM, TO, INTERVAL)`

```{r}
seq(1, 2, 0.1)

```

If you want to see every integer between two numbers you can use `:` or you can omit the interval in the `seq` command.

```{r}
# Get very integer between 0 and 10
seq(0, 10)
0:10

# Get every integer between 0 and 10 in decreasing order
seq(10, 0)
10:0
```

# `rep`

Syntax: `rep(X, TIMES, EACH)`

- X - what you want to repeat: vector of characters, numbers or logical (T/F)
- TIMES: repeat how many times
- EACH: if there is more than one element in WHAT, you repeat the first, then the second...

```{r}
# repeat X (1 in this case) 4 times
rep(1, 4)

# repeat X (vector c(1, 2)) 4 times
rep(c(1, 2), 4)

# repeat the elements of the input 4 times each
rep(c(1, 2), each = 4)
```

:::

## Overview data

:::{.panel-tabset}

# `str`

See data structure. Shows number of rows and columns in a data frame, classes of the columns, first few elements of each column.

```{r}
str(iris)
```

:::{.callout-note} 
You can add the option "max.level = X" if you know the object is nested (list inside of list inside of list) so that you don't print too many nested levels.
:::

# `head` or `tail`

Shows the beginning or the end of an object (you can specify the number of lines printed with `n = X`)

```{r}
head(iris, n = 7)
tail(iris, n = 3)
```

# `summary`

Print column-wise info about data frames, shows relevant data from tests, such as `aov` or t.test.

```{r}
summary(iris)
```

# Dimensions

- `dim(x)` 
	- Dimensions of a dataset: For a data frame it is c(1, 2), for a vector it is c(1).
-`length(x)` 
	- number of elements in a vector, or columns in a data frame or elements in a list
- `ncol` or `nrow` 
	- number of columns/rows in a data frame
- `names` 
	- Names of columns of a data frame
	- Names of objects in a named list or named vector

```{r}
dim(iris)
length(iris)
length(iris[,1])

ncol(iris)
nrow(iris)

names(iris)

my_numbers = 1:3; names(my_numbers) = c("A", "B", "C")
names(my_numbers)
```

:::

## `read.XXX`

```{r, echo=F, message=F, results='asis'}
library(tidyverse, quietly = T)

cheat_sheet = data.frame(
	Function = c('Function', 'read.csv', 'read.csv2', 'read.delim', 'read.delim2'),
	Column_separation = c('Column separation', '","', '";"', '"\\t" (tab)', '"\\t" (tab)'),
	Decimal_separation = c('Decimal separation', '"."', '","', '"."', '","')
)
caption = "Function names and their assumptions in base r (loaded without the need of any package)."
colNames = cheat_sheet[1, ]

cheat_sheet$Column_separation[2:nrow(cheat_sheet)] = 
	paste0("sep = ", cheat_sheet$Column_separation[2:nrow(cheat_sheet)])
cheat_sheet$Decimal_separation[2:nrow(cheat_sheet)] = 
	paste0("dec = ", cheat_sheet$Decimal_separation[2:nrow(cheat_sheet)])

cheat_sheet[-1,] %>%
	kableExtra::kable(
		format = "html", 
		col.names = colNames, row.names = F) %>% 
	kableExtra::kable_material_dark(lightable_options = "hover", html_font = "arial-narrow")

```

## Numeric data summary

:::{.panel-tabset}

# Sum, mean and median

You can obtain the sum, mean and median by calling the functions `sum()`, `mean()`, `median()`, respectively. You need to include `na.rm=T` to obtain the estimate when you have missing values in the data.

```{r}
numeric_vector = c(iris$Sepal.Length, NA, NA)
sum(numeric_vector)
sum(numeric_vector, na.rm = T)
median(numeric_vector)
median(numeric_vector, na.rm = T)
mean(numeric_vector)
mean(numeric_vector, na.rm = T)
```

# Standard deviation, variance and interquantile range

For the data dispersion, you can use the functions `sd()` (standard deviation), `var()` (variance) and `IQR()` (interquantile range). Remember to use `na.rm=T`.

:::{.callout-note}
# Variance calculation

Variance = $\sum$ $( x - mean )^2$  / _N_

Where 

- _x_ is each and every value of the input vector
- _mean_ is the mean of the input vector
- _N_ is the length of the input vector 
:::

:::{.callout-note}
# Standard deviation calculation

Std.Dev = $\sqrt{Variance}$
:::

:::{.callout-note}
# Interquantile range calculation
`IQR(x) = quantile(x, 3/4) - quantile(x, 1/4)`

:::

```{r}
numeric_vector = c(iris$Sepal.Length, NA, NA)
sd(numeric_vector)
sd(numeric_vector, na.rm = T)
var(numeric_vector)
var(numeric_vector, na.rm = T)
#IQR(numeric_vector) Not accepted when there are NA values
IQR(numeric_vector, na.rm = T)
```
:::

### Column-wise and row-wise summaries

You can calculate the sum and mean for each row/column of a numeric data frame with the functions:

- Sum: `colSums` and `rowSums`/`rowsum`
- Mean: `colMeans` and `rowMeans`

## Objects in R environment

```{r}
# Check what you have in the environment
ls()

# remove an object from the environment
rm("cheat_sheet"); ls()
```

## Install and load packages

```{.r}
# Names of packages installed:
rownames(installed.packages())
# Install a package
install.packages("tidyverse")

# Load a package into the R session
library(tidyverse)
# OR
myPackage = "tidyverse"
library(myPackage, character.only = T)
```


## Working with text

### Regular expressions (Regex)

These are ways to search text without writing the explicitly what you are searching. 

This allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly

- Patterns (what to search)
	- any digit: `"\\d"` 
	- any word character (letters, _, digits): `"\\w"` 
	- any character (including special symbols and space): `"."`
	- If you want to create your set of characters allowed in the pattern, just use `[]`
		- I want to search only uppercase letters: `"[A-Z]"`
		- Special symbols: `"[\\.\\*\\-]"` (put two backslashes `\\` before the symbol)

- Quantifiers (how many times the pattern occurs)
	- Specific number of times: `A{X}`, where X is the number of times A appears
	- Between X and Y times: `e{X,Y}`, e appears at least X times, at most Y times (_in tandem_)
	- At least X times, but can be more: `T{X,}` (nothing after the "," means INFINITY)
	- At least once, but can be more: `N+`
	- May not appear, may appear multiple times: `C*`

- Anchors
	- Text MUST start with the pattern "ATG": `"^ATG"` (start pattern with `^`)
	- Transcript must end with stop codon: `"T[GA][GA]$"` (end pattern with `$`)

### Split strings (text)

Use symbol or letter to split a text into a vector (similar to excel's "text to columns" command)

Example: arabidopsis genes are named as "AT" chromosome number "G" gene number. So we can separate the gene number from the chromosome number using "G" as the pattern/split.

:::{.panel-tabset}
# Basic r: `strsplit(x, split)`

- `x` is a character vector
- `split` is the symbol/letter that will be used to separate the text
- The result is a list. If `x` has 10 elements, the resulting list will have also 10 elements, each one a character vector.

```{r}
Arabidopsis_Genes = c("AT1G01020", "AT1G01030","AT1G01040")

# With strsplit and str_split, in each list, the chromosome number is the first element, the gene number is the second
strsplit(x = Arabidopsis_Genes, split = 'G')
```

# `stringr` package: 

- `str_split` - same as basic r command `strsplit`, `x` is called `string` and `split` is called `pattern`

```{r}
Arabidopsis_Genes = c("AT1G01020", "AT1G01030","AT1G01040")
library(stringr)
str_split(string = Arabidopsis_Genes, pattern = "G")
```

- `str_split_1` - string has to be a character vector of size 1

```{r}
Arabidopsis_Genes = c("AT1G01020", "AT1G01030","AT1G01040")

# str_split_1 accepts only one element at a time
# The result is the same as str_split(string = Arabidopsis_Genes, pattern = "G")[[1]]
str_split_1(string = Arabidopsis_Genes[1], pattern = "G")
```


- `str_split_fixed(string, pattern, n)` - similar to `str_split`, but the result is a matrix (vector with columns and rows). You need to specify `n`, the max number of pieces to return for each string from the input

```{r}
Arabidopsis_Genes = c("AT1G01020", "AT1G01030","AT1G01040")
# str_split_fixed returns a matrix with nrow == length(string) and ncol == n
str_split_fixed(string = Arabidopsis_Genes, pattern = "G", n = 2)
```


- `str_split_i(string, pattern, i)` - similar to `str_split_fixed`, but `i` is used to specify which column we want to keep from the matrix.
```{r}
Arabidopsis_Genes = c("AT1G01020", "AT1G01030","AT1G01040")
# With str_split_i, you specify which part of the string you want to keep after the split
# If we want to keep just the gene number in this case, we select the second part, the one that comes after "G"
str_split_i(string = Arabidopsis_Genes, pattern = "G", i = 2)
```

:::

### Search for word or pattern: grep and grepl

Both are similar to "CTRL+F", but have some extra capabilities.

:::{.panel-tabset}
# Basic command

`grep(pattern, x, fixed = F)` where

- `pattern` is the word of Regex to search
- `x` is the character vector or even data.frame in which you are searching
- If `fixed` is omitted or F, search will allow regex, else it will take patterns as literal words (meaning \\w will match only \\w, not "any letter, number or _") 

# Specifics

`grep` result is either a vector with the index of the match:

```{r}
names_students = c("Fadoua", "Arghavan", "Serge", "Snehi", "Valeria")
grep("a", names_students)
# The result is c(1, 2, 5), because the names containing the letter "a" are the 1st, 2nd and 5th elements of the input 
```

You can ask `grep` to return the matches instead of their indices by adding `value = T`

```{r}
names_students = c("Fadoua", "Arghavan", "Serge", "Snehi", "Valeria")
grep("a", names_students, value = T)
```

`grepl` returns a vector of the same size as the input with only TRUE or FALSE
```{r}
names_students = c("Fadoua", "Arghavan", "Serge", "Snehi", "Valeria")
grepl("a", names_students)
# Because the question asked is "is the letter "a" in element1, element2... you cannot use the argument `value = T`
```

:::

## Read excel spreadsheets

`readxl` package - Part of the `tidyverse` package

Allows you to:

- Check the names of the sheets of an excel file: `excel_sheets(MY_EXCEL_FILE)`
- Read sheets of an excel file as tibbles (a type of data.frame): 
	- `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)`
	- You can specify what defines NA: `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = ".")`
	- Instead of `header = T`, you use `col_names = T`
	- You can specify the number of rows to skip in the beginning with `skip = N`
	- You can specify the number of rows to read with `n_max = N`
	- You can specify which cols and rows to read with `range = "H40:T80"`
		- If `range` is specified, `skip` and `n_max` are ignored
		- You can include the name of the sheet: `range = "MY_SHEET!H40:T80"`
			- <span style="color: red">SHEET</span><span style="color: cyan"> EXCLAMATION_POINT </span><span style="color: yellow">CELL_RANGE

# Resources

- [Base R cheatsheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf)
- [Datacamp R cheatsheet](https://images.datacamp.com/image/upload/v1654763044/Marketing/Blog/R_Cheat_Sheet.pdf)
- [apply functions](https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf)
- [Colors](https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf)
- Basic plots
	- [HBC training](https://hbctraining.github.io/Intro-to-R/lessons/basic_plots_in_r.html)
	- [R Base Graphics: An Idiot's Guide](https://rstudio-pubs-static.s3.amazonaws.com/7953_4e3efd5b9415444ca065b1167862c349.html)
	- [Statistical tools for high-throughput data analysis](http://www.sthda.com/english/wiki/r-base-graphs)
	- [TC Technology Knowledge Base](https://teacherscollege.screenstepslive.com/a/1130011-plot-data-in-r-studio)	
- Package specific
	- [All tidyverse packages](https://tidyverse.tidyverse.org/index.html)
	- [stringr cheatsheet](https://rstudio.github.io/cheatsheets/html/strings.html)
	- Tutorials on all types of plots with ggplot2
		- [ggplot2 cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html)
		- [r-statistics](http://r-statistics.co/ggplot2-Tutorial-With-R.html)
		- [Cedric Scherer - advanced](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)
	- Tutorials on data manipulation with dplyr
		- [dplyr cheatsheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html)
		- [Tidyverse](https://dplyr.tidyverse.org/)
		- [R official](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)
		- [Genomics class](https://genomicsclass.github.io/book/pages/dplyr_tutorial.html)

