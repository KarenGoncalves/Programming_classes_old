[
  {
    "objectID": "useful_unix.html",
    "href": "useful_unix.html",
    "title": "Useful commands in unix",
    "section": "",
    "text": "Absolute path: includes the root (starts with a “/”)\nRelative path: is dependent on your location in the computer. For example, if the file or folder to which you refer is present in the your current folder, you need simply write its name.\nPath here will be used to refer to both absolute and relative paths, unless specified\nSession: each time you open a command line window or connect to the server\nScript: a list of commands to be executed by the computer\nWhen you start a new line, you start a new command. There are exceptions:\n\n\\: escape character. If you add a new line (press enter or return) right after a \\, it will be read as the same line\nSome commands use quotes (either ' or \"), and normally if you start a new line without closing the quote, it will be considered part of the same command\n; has the same effect as a new line. So you can write multiple commands in the same line by separating them with a ;"
  },
  {
    "objectID": "useful_unix.html#saving-result-to-a-file",
    "href": "useful_unix.html#saving-result-to-a-file",
    "title": "Useful commands in unix",
    "section": "Saving result to a file",
    "text": "Saving result to a file\n&gt; will take what would be printed to the screen and put in a file. What comes before &gt; is a command, what comes after it is a file name. If a file of the same name already exists, it will be replaced.\n&gt;&gt; is similar to &gt; but if a file of the same name as we the one we gave already exists, it will simply add what would be printed to the screen to the end of the file instead of replacing it."
  },
  {
    "objectID": "useful_unix.html#where-am-i",
    "href": "useful_unix.html#where-am-i",
    "title": "Useful commands in unix",
    "section": "Where am I?",
    "text": "Where am I?\nCommands are normally are acronyms\nDirectory is the same as Folder. Working directory means the folder in which you currently are.\npwd: print working directory: prints the absolute path of your current location in the computer.\ncd: change directory: use cd followed by the path to a folder to change your location in the computer."
  },
  {
    "objectID": "useful_unix.html#list-files-ls",
    "href": "useful_unix.html#list-files-ls",
    "title": "Useful commands in unix",
    "section": "List files : ls",
    "text": "List files : ls\nUsed alone, it will print the contents of the current directory. If it is followed by a path to a directory, will print its contents. Options (letters or words preceded by “-” or “–”, respectively) will change how and what is printed.\n\nls -a or ls --all\n\nWill print all contents of the working directory, including hidden files (which start with a dot, eg. .ssh).\n\nls -alhs Desktop or ls --all -l --sort --human Desktop\n\nWill print all the contents (-a or --all including hidden files) in the form of a list (-l) that includes the permissions of each file, their owners, the date of the last modification and their size in human format (-h or --human; 4Kb instead of 4000b) and sort them alphabetically (-s or --sort; other options can be used to change how to sort the files)."
  },
  {
    "objectID": "useful_unix.html#open-and-read-files-less-or-more",
    "href": "useful_unix.html#open-and-read-files-less-or-more",
    "title": "Useful commands in unix",
    "section": "Open and read files : less or more",
    "text": "Open and read files : less or more\nSoftwares to open text files as read-only.\n\nUse less --help or man less to see a manual on how to use less and more --help or man more to see how to use more\nless file1\n\nWill open file1 to read. If you want to look for a word, type / then type the word.\n\nless file1 file2 file3\n\nWill open the three files to read. You can move between the files by typing : followed by p to look at the previous file or n to look at the next one."
  },
  {
    "objectID": "useful_unix.html#print-text-to-the-screen-cat",
    "href": "useful_unix.html#print-text-to-the-screen-cat",
    "title": "Useful commands in unix",
    "section": "Print text to the screen : cat",
    "text": "Print text to the screen : cat\nPrints file to the screen\n\ncat file1: will print the content of file1 to the screen. If the file is a binary file (.bam), or if it is compressed (.zip, .tar, .gz), the printed text will be all gibberish\ncat file1 file2: will print the content of file1 followed by the content of file 2\ncat file1 &gt; file2; cat file3 &gt;&gt; file2: is the same as cat file1 file3 &gt; file2."
  },
  {
    "objectID": "useful_unix.html#view-beginning-or-end-of-a-file-head-and-tail",
    "href": "useful_unix.html#view-beginning-or-end-of-a-file-head-and-tail",
    "title": "Useful commands in unix",
    "section": "View beginning or end of a file : head and tail",
    "text": "View beginning or end of a file : head and tail\nPrints the first (head) or last (tail) 10 lines of a file to the screen. If you have a big file and you just want to see if it looks fine or what it contains, use this\n\nhead file1: will print the first 10 lines of file1\nhead -n 20 file1: the option -n allows you to specify the number of lines you want to be printed"
  },
  {
    "objectID": "useful_unix.html#edit-text-file-nano",
    "href": "useful_unix.html#edit-text-file-nano",
    "title": "Useful commands in unix",
    "section": "Edit text file : nano",
    "text": "Edit text file : nano\nSoftware to edit text in the server. Used alone will open an empty file. When you try to close the file (Ctrl + x) will ask if you want to save it and ask for a name for the path where to save it.\n\nnano file1\n\nWill open file1 for edition. If file1 does not exist, will create it.\n\nnano *\n\nWill open all text files in the working directory for edition in alphabetic order. Once you close one, the next one is opened."
  },
  {
    "objectID": "useful_unix.html#search-for-word-in-text-file-grep",
    "href": "useful_unix.html#search-for-word-in-text-file-grep",
    "title": "Useful commands in unix",
    "section": "Search for word in text file : grep",
    "text": "Search for word in text file : grep\nSearches a text in a file\n\ngrep \"word\" file1: will print to the screen every line of file 1 that contains “word” in it."
  },
  {
    "objectID": "useful_unix.html#clean-the-screen-clear",
    "href": "useful_unix.html#clean-the-screen-clear",
    "title": "Useful commands in unix",
    "section": "Clean the screen : clear",
    "text": "Clean the screen : clear\nWill clear you screen, so you will not be able to see the previous commands by looking up or scrolling. You can still use the up and down arrows to look at the commands you have used in the session."
  },
  {
    "objectID": "useful_unix.html#see-commands-used-previously-history",
    "href": "useful_unix.html#see-commands-used-previously-history",
    "title": "Useful commands in unix",
    "section": "See commands used previously : history",
    "text": "See commands used previously : history\nShows the list of commands you have used in the computer with the date and time of use. Does not contain ALL the commands you have ever used, since old lines are deleted. So if you think you may need to see the command again, copy it to a file."
  },
  {
    "objectID": "useful_unix.html#copy-files-or-folders-cp",
    "href": "useful_unix.html#copy-files-or-folders-cp",
    "title": "Useful commands in unix",
    "section": "Copy files or folders : cp",
    "text": "Copy files or folders : cp\nCopy: use cp followed by the path of the file you want to copy and the path to where you want to put the copy.\n\ncp file1 file2\n\nCreates a copy of file1 and names it file2.\n\ncp -r folder1 folder2\n\nIf you want to copy a folder, you need to add the option -r (recursive, which means it will copy everything inside the folder).\n\ncp file1 folder1\n\nWill create a copy of file1 in the folder1 (the copy will be named file1).\n\ncp -v -r folder1 folder2\n\nCreates a copy of folder1 and names it folder2. The option -v (verbose) will make the computer print to the screen what it is doing (copied folder1/file1 to folder2/file; copied folder1/file2 to folder2/file2; etc)."
  },
  {
    "objectID": "useful_unix.html#remove-files-or-folders-rm",
    "href": "useful_unix.html#remove-files-or-folders-rm",
    "title": "Useful commands in unix",
    "section": "Remove files or folders : rm",
    "text": "Remove files or folders : rm\nRemove: use rm followed by the path to a file or folder you wish to delete. It will delete FOREVER, there is no trashbin when you use rm, so use with care\n\nrm file1 file2 file3\n\nDelete all files listed after the command\n\nrm -r folder1\n\nDelete all files in the folder1 and the folder itself (will only work if you use -r)\n\nrm *\n\nDeletes EVERYTHING (*) in the current folder, except folders (since -r was not included)\n\nrm -v *\n\nDeletes everything in the current folder, except folders, and prints to the screen the files it deleted while doing it."
  },
  {
    "objectID": "useful_unix.html#create-foldersdirectories-mkdir",
    "href": "useful_unix.html#create-foldersdirectories-mkdir",
    "title": "Useful commands in unix",
    "section": "Create folders/directories: mkdir",
    "text": "Create folders/directories: mkdir\nmake directory: use mkdir followed by the name you want to give to the new folder. You can create multiple folders at once by simply separating the names with a space\n\nrmdir: remove directory: use with the path to a folder to delete it FOREVER (same as rm). Only works if the folder is empty."
  },
  {
    "objectID": "useful_unix.html#syncronize-files-between-your-computer-and-a-server-rsync-or-scp",
    "href": "useful_unix.html#syncronize-files-between-your-computer-and-a-server-rsync-or-scp",
    "title": "Useful commands in unix",
    "section": "Syncronize files between your computer and a server : rsync or scp",
    "text": "Syncronize files between your computer and a server : rsync or scp\nWill copy files and folders from one location to another. Use it with the path of the files and folders you wish to copy and the path to where you want the copy to be placed. You will be required to put your password with this command.\nIn the commands below, you can replace rsync by scp. The second is more secure.\n\nrsync file1 file2 file3 user@server.ca:/home/user/folder1\n\nWill copy the files (file1, file2 and file3) which are in the local computer (eg. the user’s laptop) to the directory /home/user/folder1 which is the remote computer accessed as server.ca. The : separates the remote computer name from the path to the folder of interest. Here, the path to the folder in the remote computer MUST be the absolute path.\nIf the option -v is used, the computer will print what is happening (if the connection to the server was successfull, if it found the folder indicated in the command, what it is copying and if it was successfull)\nYou can use up to 3 v’s to get more information on what is happening: -v, -vv and -vvv are all accepted options and sometimes may help you figure out why something is not working.\n\nrsync -r folder1 user@server.ca:/home/user/folder1\n\nJust as with cp and rm, you need to use -r to copy a folder with all its contents. This command will result in /home/user/folder1/folder1, because we are copying the whole folder\n\nrsync -r folder1/ user@server.ca:/home/user/folder1\n\nThis command will copy only the contents of folder1 to the server.\n\nrsync -r user@server.ca:/home/user/folder1/ folder1\n\nThis command will copy the contents of /home/user/folder1/ from the server.ca to our local computer in folder1"
  },
  {
    "objectID": "useful_unix.html#connect-to-server-ssh",
    "href": "useful_unix.html#connect-to-server-ssh",
    "title": "Useful commands in unix",
    "section": "Connect to server : ssh",
    "text": "Connect to server : ssh\nSecure shell protocol: will allow you to connect to a server and write commands into it.\n\nssh user@server.ca\n\nAfter asking for the password, will log user to server.ca.\n\nssh -i myKey.ppk user@server.ca\n\nThe option -i means “identity file”, ssh will use this file as the password (you need to have it in your local computer and copy it to the server.\nTo create an identity file (also known as ssh-key) follow the instructions here"
  },
  {
    "objectID": "useful_unix.html#softwares",
    "href": "useful_unix.html#softwares",
    "title": "Useful commands in unix",
    "section": "Softwares",
    "text": "Softwares\nIn the server, you do not need to install most softwares, as they are already installed and are called modules. These modules are what you need to load to your session to be able to use the software.\n\nAvailable softwares\n\nmodule avail\n\nShows the softwares that are installed (available) in the server.\n\nmodule spider\n\nmodule spider softw shows at all the modules that are installed which contain the words ‘softw’. Will show a list of all the versions of those softwares.\nmodule spider software1/1.0 will show a description for software1/1.0, if it is installed, and how to load it to your session in the server.\n\nmodule keyword softw\n\nSimilar to module spider, it will search for the word softw among the installed modules, but the search extends to the description of the software. This is useful when you are searching for a software that does something specific but you don’t need one specific.\n\nmodule load software1\n\nIf software1 is installed in the server AND you have loaded all the softwares you need for software1 to work, will load the default version of software1 to your session.\nIf you want an specific version of a software, you need to put it in the command (eg. module load software1/1.0)\nIf you have a version of a software loaded and you try to load another, the previous one will be unloaded, meaning you cannot load two versions of a software at the same time.\n\nmodule save my_collection and module restore my_collection\n\nIf you use many softwares frequently, you can create collections that will allow you to load them all together. For example, the code below creates a collection with the modules you need to run blast, then saves it to the collection named “blast”:\n\nmodule load StdEnv/2020  gcc/9.3.0  blast+/2.12.0\nmodule save blast\n\nNow, every time you want to run blast, you just need to run the code below and then add your script for blast!\n\nmodule restore blast"
  },
  {
    "objectID": "useful_unix.html#sbatch",
    "href": "useful_unix.html#sbatch",
    "title": "Useful commands in unix",
    "section": "sbatch",
    "text": "sbatch\nThis command will add your script to a queue in the server to run when the required resourcers (time, memory, number of central processing units – CPUs) are available. You cannot be in your ${HOME} directory to run it or in folders inside it. You need to move to ${SCRATCH} or ${PROJECT} to be able to run.\n\nsbatch myScript.sh\n\nWill add myScript.sh to the queue\nThe script must start with the following lines:\n\n#!/bin/bash\n\nSpecifies the software (bash) that will be able to read this script (we give it’s absolute path, if you type ls /bin in the server, you will find the file ‘bash’)\n\n#SBATCH --time=00-00:00:00\n\nNormally anything that comes after # is not read by the computer, but since it is followed by ‘SBATCH’, the software sbatch will read it and interpret that you are asking for this amount of time in the queue.\n\n\nIf nothing else is given, the software sbatch will allocated the minimum amount of memory and CPUs and will find the sponsor of your account to create the bill the use of the server in the name of the sponsor\n\nIf you have more than one sponsor (eg. laboidp and desgagne) there will be an error, because the server will not know who they should bill.\nYou can specify the sponsor in two ways:\n\nAdd the following to a new line in the beginning of your script: #SBATCH --acount=def-sponsor (replace “sponsor” by the sponsor of your account)\nAdd the name of the account to the sbatch command: sbatch --acount=def-sponsor myScript.sh"
  },
  {
    "objectID": "useful_unix.html#srun",
    "href": "useful_unix.html#srun",
    "title": "Useful commands in unix",
    "section": "srun",
    "text": "srun\nWill add your script to the queue, it is as if you were running the script in the session, so until it has finished running you won’t be able to do anything else.\n\nsrun --account=def-sponsor --mem-per-cpu=16G --time=01:00:00 myScript.sh\n\nWill run myScript.sh, billing the account def-sponsor, using a maximum of 16Gb of memory and for maximum 1h.\n\nsrun --account=def-sponsor --mem-per-cpu=16G --time=01:00:00 -i\n\nSame as above, however there is no script to run because we want to use the resources interactively (-i). This is useful if you want to test a script that you know may use a lot of memory. When you are finished, if the time has not run out, you can use Ctrl + D or exit to go back to your session."
  },
  {
    "objectID": "useful_unix.html#salloc",
    "href": "useful_unix.html#salloc",
    "title": "Useful commands in unix",
    "section": "salloc",
    "text": "salloc\nSimilar to using srun -i, will allow the interactive use of the resources allocated. When you are finished, if the time has not run out, you can use Ctrl + D or exit to go back to your session."
  },
  {
    "objectID": "useful_unix.html#squeue",
    "href": "useful_unix.html#squeue",
    "title": "Useful commands in unix",
    "section": "squeue",
    "text": "squeue\nWill show the queue of jobs waiting to run in the server.\n\nsqueue\n\nWill print ALL the jobs in the queue, submitted by every user of the server, which are running or waiting to run.\n\nsqueue -u user or sq\n\nIf your username is user, the two commands are the same. Will print all your jobs that are running or waiting to run\nBelow is an example of what the result of squeue -u smithj would look like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJOBID\nUSER\nACCOUNT\nNAME\nST\nTIME_LEFT\nNODES\nCPUS\nGRES\nMIN_MEM\nNODELIST (REASON)\n\n\n\n\n123456\nsmithj\ndef-smithj\nsimple_j\nR\n0:03\n1\n1\n(null)\n4G\ncdr234 (None)\n\n\n123457\nsmithj\ndef-smithj\nbigger_j\nPD\n2-00:00:00\n1\n16\n(null)\n16G\n(Priority)\n\n\n\n\nJOBID: each time you using sbatch, srun or salloc, you create a job and it is assigned an ID, you can use this ID to get information about the job.\nName: Unless you specify a different name (by using --jobname=someName or -j someName) it will be the name of the script submitted\nST: status of the job.\n\nR = running\nPD = pending, meaning the resources needed are not available so you need to wait\nCG = completing\nCA = cancelled\nSee other status codes here\n\nNodes: basically a groupping of CPUs\nMIN_MEM: memory requested to run the job\nNodelist (reason): When your job is running, you will get a list of the nodes it is using. If it is pending, you will get a reason as to why; if it is already running, the reason will be “none”"
  },
  {
    "objectID": "useful_unix.html#scancel",
    "href": "useful_unix.html#scancel",
    "title": "Useful commands in unix",
    "section": "scancel",
    "text": "scancel\nCancel jobs that are pending or running. Use it with the id of one or more jobs. You are not allowed to cancel a job submitted by someone else."
  },
  {
    "objectID": "useful_unix.html#diskusage_report",
    "href": "useful_unix.html#diskusage_report",
    "title": "Useful commands in unix",
    "section": "diskusage_report",
    "text": "diskusage_report\nPrints a report of the use of the server by you in your home and scratch directories, as well as your directories in the project folders (each sponsor has a different one, so you may have files in different project folders). The report includes the space used and the number of files in each directory, as well as the limits of these directories."
  },
  {
    "objectID": "unix/Class6_SED.html#sed",
    "href": "unix/Class6_SED.html#sed",
    "title": "Class 6 - sed command",
    "section": "SED",
    "text": "SED\n\nAlways start with sed\nPut commands inside single quotes ''\n\nIf you want to use a variable, use \"\""
  },
  {
    "objectID": "unix/Class6_SED.html#sed---delete-specific-lines",
    "href": "unix/Class6_SED.html#sed---delete-specific-lines",
    "title": "Class 6 - sed command",
    "section": "SED - delete specific lines",
    "text": "SED - delete specific lines\nIf you do not have it, download the file prots.fasta and put it in the folder with the previous classes files.\n# delete lines 1 to 10 in ~/blastClass/prots.fasta\nwc -l ~/blastClass/prots.fasta\nsed '1,10d' ~/blastClass/prots.fasta | wc -l\n\n\n# delete all lines appearing after the line containing Lychi\nsed '/Lychi/q' ~/blastClass/prots.fasta | less\n\n# delete lines containing the word \"partial\"\nsed '/partial/d' ~/blastClass/prots.fasta | less\nIn the second case, if the word is not found in the file, the whole file will be printed."
  },
  {
    "objectID": "unix/Class6_SED.html#sed---replace-words",
    "href": "unix/Class6_SED.html#sed---replace-words",
    "title": "Class 6 - sed command",
    "section": "SED - replace words",
    "text": "SED - replace words\n# In each line of the ~/blastClass/prots.fasta file, replace the first \"_\" (separates then species from the protein ID)\nsed 's/_/ protein /' ~/blastClass/prots.fasta | less\n\n# In the ~/blastClass/prots.fasta file, replace all \"_\" (separates then species from the protein ID)\nsed 's/_/-/g' ~/blastClass/prots.fasta | less\n\nsed 's/WORD_SEARCHED/REPLACEMENT/g' input_file\n\ns - substitute\ng - global (everywhere)"
  },
  {
    "objectID": "unix/Class6_SED.html#sed---replace-words-in-specific-lines",
    "href": "unix/Class6_SED.html#sed---replace-words-in-specific-lines",
    "title": "Class 6 - sed command",
    "section": "SED - replace words in specific lines",
    "text": "SED - replace words in specific lines\nTry the command with and without the number 1\n# In line 1 of the ~/blastClass/prots.fasta file, replace the first \"Agapanthus\" in the line\nsed '1 s/Agapanthus/Ag_/' ~/blastClass/prots.fasta | less\n\n# In line 1 of the ~/blastClass/prots.fasta file, replace all \"Agapanthus_africanus\" \nsed '1 s/Agapanthus/Ag_/g' ~/blastClass/prots.fasta | less\nsed 'LINE_NUMBER s/WORD_SEARCHED/REPLACEMENT/g' input_file\n\nLINE_NUMBER - a digit indicating the number of the line where you want the replacement to occur\ns - substitute\ng - global (everywhere)"
  },
  {
    "objectID": "unix/Class6_SED.html#sed---print-only-lines-replaced",
    "href": "unix/Class6_SED.html#sed---print-only-lines-replaced",
    "title": "Class 6 - sed command",
    "section": "SED - print only lines replaced",
    "text": "SED - print only lines replaced\n# Replace PF0 with PFAMID PF0, and see which proteins have a match in PFAM\nsed -n 's/PF0/PFAMID PF0/p'  ~/blastClass/prots.fasta | less\n\n-n - do not print lines\n/p - print lines where replacement occurred\n\nWithout -n, every line would be printing, with lines replaced being printed twice (once automatically, then because you asked to see the replacement)"
  },
  {
    "objectID": "unix/Class6_SED.html#sed---write-the-result-to-a-file",
    "href": "unix/Class6_SED.html#sed---write-the-result-to-a-file",
    "title": "Class 6 - sed command",
    "section": "SED - write the result to a file",
    "text": "SED - write the result to a file\nUse w filename\n# Replace the \"&gt;\" in the ~/blastClass/prots.fasta file and save result to ~/blastClass/protsSED.fasta\nsed \"s/&gt;/Fasta entry /w $HOME/blastClass/protsSED.fasta\" ~/blastClass/prots.fasta\n\nw - write to file $HOME/blastClass/protsSED.fasta"
  },
  {
    "objectID": "unix/Class6_SED.html#sed---work-with-text-with-regular-expressions-regex",
    "href": "unix/Class6_SED.html#sed---work-with-text-with-regular-expressions-regex",
    "title": "Class 6 - sed command",
    "section": "SED - work with text with REGular EXpressions (REGEX)",
    "text": "SED - work with text with REGular EXpressions (REGEX)\nUse the option -E: sed -E ''\n$ - line end; ^ Line begins\n[] - when any character in a list is accepted in the search, put the list inside the []\n\nEx. sed -En '/&gt;[ABC]/p' ~/blastClass/prots.fasta will print lines for proteins of species that start with A, B or C\n[A-Z] - any upper case letter of the alphabet\n[a-z] - any lower case letter of the alphabet\n[0-9] - any number (in grep, same as \\d)\n[A-Za-z0-9] - any letter or number\n. - any character. Ex.: sed -En '/&gt;A.a/p' ~/blastClass/prots.fasta\n* - find anything 0 or more times. Ex.: remove anything after the space - sed -En 's/ .+$//g' ~/blastClass/prots.fasta | less\n+ - find the previous character or [] one or more times.\n{Ns,NE} - find the previous character at least Ns times and maximum NE times"
  },
  {
    "objectID": "unix/Class6_SED.html#resources",
    "href": "unix/Class6_SED.html#resources",
    "title": "Class 6 - sed command",
    "section": "Resources",
    "text": "Resources\n\nSED utilities\nSED command examples\nMore SED examples\nEven more SED examples"
  },
  {
    "objectID": "unix/Class4_blast.html#slide1",
    "href": "unix/Class4_blast.html#slide1",
    "title": "Class 4 - Running blast on the server",
    "section": "Logging in",
    "text": "Logging in\n\n\n\n\nClick on Session -&gt; SSH\n\nAdd the Remote Host : cedar.computecanada.ca\nClick on Specify username then add yours, you can save your user name and password in the\nClick OK: will ask your password (when you type, nothing will appear, but it is writing)\n\nssh YOUR_USERNAME@cedar.computecanada.ca\n\nReplace YOUR_USERNAME with your username, in my case: karencgs"
  },
  {
    "objectID": "unix/Class4_blast.html#running-commands-in-the-server",
    "href": "unix/Class4_blast.html#running-commands-in-the-server",
    "title": "Class 4 - Running blast on the server",
    "section": "Running commands in the server",
    "text": "Running commands in the server\nWhen you log in, you are one of hundreds or thousands of people that are sharing the computer in the server, so you should simply run commands that you know or think that could take too much time.\nPlace files you want to use and you scripts in your Home folder\n\nTo move them, use : mv myFile ~\n\nTo run a command, you need to ask for resources, like time and memory, and wait for them to be available.\n\nYou need to be in $SCRATCH or in ~/projects/username to be able to submit a job"
  },
  {
    "objectID": "unix/Class4_blast.html#running-commands-in-the-server---part-2",
    "href": "unix/Class4_blast.html#running-commands-in-the-server---part-2",
    "title": "Class 4 - Running blast on the server",
    "section": "Running commands in the server - part 2",
    "text": "Running commands in the server - part 2\nGo to $SCRATCH and write a simple script in nano:\n\ncd $SCRATCH; nano $HOME/myTry.sh\n\n#!/bin/sh\n\necho \"&gt;seq1\nATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGC\n&gt;seq2\nGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCAT\" &gt; $HOME/myFasta.fa\n\ngrep \"&gt;\" $HOME/myFasta.fa"
  },
  {
    "objectID": "unix/Class4_blast.html#running-commands-in-the-server---part-3",
    "href": "unix/Class4_blast.html#running-commands-in-the-server---part-3",
    "title": "Class 4 - Running blast on the server",
    "section": "Running commands in the server - part 3",
    "text": "Running commands in the server - part 3\nGive the script the right permissions and submit your script to the queue of jobs\nchmod u=rwx $HOME/myTry.sh\nsrun --time=00:01:00 sh $HOME/myTry.sh\n\nsrun is one of the commands to submit a script\n--time is the option to tell how much time you need to execute the commands in the script\n\nTime format: D-HH:MM:SS (D=day, H=hour, M=minute, S=second)\n\nOther options:\n\n--account=def-projectName - if you are associated with different accounts (def-desgagne, def-laboidp, def-germain1), you need to specify the one that will be billed for the current job. Replace def-projectName with the correct account\n--mem=XXG or --mem-per-cpu=XXG - specify how much memory the script needs. For a small blast (less than 100 query sequences), 2G is enough\n--cpus-per-task=XX - how many processors you need (big blast jobs run faster if using many cpus)"
  },
  {
    "objectID": "unix/Class4_blast.html#running-blast---part-1",
    "href": "unix/Class4_blast.html#running-blast---part-1",
    "title": "Class 4 - Running blast on the server",
    "section": "Running blast - part 1",
    "text": "Running blast - part 1\n\nFirst, you need to load the software (modules) needed into your session (every time you log in, or in your script)\n\nmodule load StdEnv/2020 gcc/9.3.0 blast+\n\nPay attention to the upper and lower cases!!\n\n\nWrite the blast script\n\n#!/bin/sh\nblastp -query $HOME/myProtein.fa -db $HOME/database -outfmt 7 -out $HOME/myBlastpResult.txt\n\n-query - use this option to specify the file which you want to blast (here, I want to blast myProtein.fa)\n-db - use this option to specify the database you want to search (need to be the full path, but omit the extension)\n\nIf I create a protein database in $HOME called “proteins”, several files will be created, I just put $HOME/proteins in the script\nGo to the github.com/KarenGoncalves/Amaryllidaceae_database/wiki/Search-by-sequence-using-blast-in-the-command-line to get the path to the databases\n\n-outfmt 7 - specifies the type of output, here I want a table, if you don’t specify, you get something similar to the webpage result\n-out - use this option to specify where to save the output (similar to &gt; myBlastpResult)"
  },
  {
    "objectID": "unix/Class4_blast.html#running-blast---part-2",
    "href": "unix/Class4_blast.html#running-blast---part-2",
    "title": "Class 4 - Running blast on the server",
    "section": "Running blast - part 2",
    "text": "Running blast - part 2\nA more general script could take arguments from the command line every time\nThis is called $HOME/myGeneralBlast.sh\n#!/bin/sh\nblastp -query $1 -db $2 -outfmt 7 -out $3\nTo run it, we need to do:\nchmod u=rwx $HOME/myGeneralBlast.sh\nsh $HOME/myGeneralBlast.sh $HOME/myProtein.fa $HOME/database $HOME/myBlastpResult.txt"
  },
  {
    "objectID": "unix/Class4_blast.html#running-blast---part-3",
    "href": "unix/Class4_blast.html#running-blast---part-3",
    "title": "Class 4 - Running blast on the server",
    "section": "Running blast - part 3",
    "text": "Running blast - part 3\nYou can (MUST) write a script to run blast by submitting a job. Ex. $HOME/srun_blast.sh:\n#!/bin/sh\n\nmodule load StdEnv/2020 gcc/9.3.0 blast+\n\nblastp -query $1 -db $2 -outfmt 7 -out $3\nAgain, give the permissions and submit the job:\nchmod u=rwx $HOME/srun_blast.sh\ncd $SCRATCH\nsrun --time=00:10:00 --mem=2G\\\n sh $HOME/srun_blast.sh $HOME/myProtein.fa $HOME/database $HOME/myBlastpResult.txt\n\nNote that with srun you cannot close your session until the job is finished, so if your script takes too long to run or stays too long in the queue, you must either wait for it to finish or cancel it and submit another time"
  },
  {
    "objectID": "unix/Class4_blast.html#running-blast-with-sbatch---part-1",
    "href": "unix/Class4_blast.html#running-blast-with-sbatch---part-1",
    "title": "Class 4 - Running blast on the server",
    "section": "Running blast with sbatch - part 1",
    "text": "Running blast with sbatch - part 1\nWith sbatch, once your job is in the queue, you can close your session or continue doing other things in it.\nYou can use the same script you used for srun:\n$HOME/srun_blast.sh:\n#!/bin/sh\n\nmodule load StdEnv/2020 gcc/9.3.0 blast+\n\nblastp -query $1 -db $2 -outfmt 7 -out $3\nAgain, give the permissions and submit the job:\nchmod u=rwx $HOME/srun_blast.sh\ncd $SCRATCH\nsbatch --time=00:10:00 --mem=2G\\\n sh $HOME/srun_blast.sh $HOME/myProtein.fa $HOME/database $HOME/myBlastpResult.txt"
  },
  {
    "objectID": "unix/Class4_blast.html#running-blast-with-sbatch---part-2",
    "href": "unix/Class4_blast.html#running-blast-with-sbatch---part-2",
    "title": "Class 4 - Running blast on the server",
    "section": "Running blast with sbatch - part 2",
    "text": "Running blast with sbatch - part 2\nAnother option is to write the resources request in the script itself.\n$HOME/sbatch_blast.sh:\n#!/bin/sh\n#SBATCH --time=00:10:00\n#SBATCH --mem=2G\n\nmodule load StdEnv/2020 gcc/9.3.0 blast+\n\nblastp -query $HOME/myProtein.fa\\\n -db $HOME/database -outfmt 7\\\n -out $HOME/myBlastResult.txt\n\nThe lines that start with “#SBATCH” are the instructions to the queue. Other possible instructions:\n\n#SBATCH --account=def-project - same as the account information for srun\n\nUnlike srun, with sbatch you need to either give the full path to each file in their names OR you need to add the line cd myFolder (where myFolder is the full path to folder where have your files)\n\nThis is because, with sbatch, it is like you are logging in again"
  },
  {
    "objectID": "unix/Class4_blast.html#creating-a-master-blast-script---part-1",
    "href": "unix/Class4_blast.html#creating-a-master-blast-script---part-1",
    "title": "Class 4 - Running blast on the server",
    "section": "Creating a master blast script - part 1",
    "text": "Creating a master blast script - part 1\nYou can use echo to write a script that takes the values from the command line and outputs a blast script ready to submit with sbatch.\nEx. $HOME/create_master_blast.sh\n#!/bin/sh\n\n### Variables ###\nmyQuery=$1\ndatabase=$2\noutput=$3\nscriptName=$4\n\n## Create script ##\necho '#!/bin/sh\n#SBATCH --time=00:10:00\n#SBATCH --mem=2G\n\nmodule load StdEnv/2020 gcc/9.3.0 blast+\n\nblastp -query' $myQuery '\\\n -db' $database '-outfmt 7\\\n -out' $output &gt; $scriptName\n \n## Give permissions ##\nchmod u=rwx $scriptName"
  },
  {
    "objectID": "unix/Class4_blast.html#creating-a-master-blast-script---part-2",
    "href": "unix/Class4_blast.html#creating-a-master-blast-script---part-2",
    "title": "Class 4 - Running blast on the server",
    "section": "Creating a master blast script - part 2",
    "text": "Creating a master blast script - part 2\nThe script has 3 blocks:\n\nVariables - we save the values from the command line into variables that echo will use. We need to give 4 values: the input sequence path, the path to the database, the path to where we want the output and the name we want to give to the script.\nThe body of the script, in which we use echo to put write the file\nThe permissions - we give the right permissions to the new script directly inside the one that created it.\n\nNow, all we need to do is:\nsh $HOME/create_master_blast.sh\\\n $HOME/myProtein.fa\\\n $HOME/database\\\n $HOME/myBlastResult.txt\\\n $HOME/master_blast.sh\n \nsbatch $HOME/master_blast.sh # srun sh $HOME/master_blast.sh also works"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide1",
    "href": "unix/Class2_Connection_FileTransfer.html#slide1",
    "title": "Connecting to the server and tranfering files",
    "section": "Logging in",
    "text": "Logging in\n\n\n\n\nClick on Session -&gt; SSH\nAdd the Remote Host : cedar.computecanada.ca\nClick on Specify username then add yours\nClick OK: will ask your password (when you type, nothing will appear, but it is writing)"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide2",
    "href": "unix/Class2_Connection_FileTransfer.html#slide2",
    "title": "Connecting to the server and tranfering files",
    "section": "Logging in",
    "text": "Logging in\n\n\n\n\nssh cedar.computecanada.ca\n\nWill ask your user name then your password (what you type won’t appear on the screen)\n\nssh YOUR_USERNAME@cedar.computecanada.ca\n\nReplace YOUR_USERNAME with your username, in my case: karencgs\nWill ask your password"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide3",
    "href": "unix/Class2_Connection_FileTransfer.html#slide3",
    "title": "Connecting to the server and tranfering files",
    "section": "Server organization",
    "text": "Server organization\n\nIn the server, type (do not consider what comes after #):\n\n\n\npwd # after you log in, should be /home/username/\nwhoami # username\necho \"$SCRATCH\"\necho \"$HOME\"\nls $HOME/projects/\n\n\n\n$HOME : Store scripts, software files, things you use frequently without necessarily modifying them\n$SCRATCH : Use to run scripts, submit jobs (scripts that take too long or use a lot of resources)\n/projects/ : Use as medium to long term storage (raw data, final results of analyses), share files with people of the same project\n\nCheck file authorizations so that other can use what you share"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide4",
    "href": "unix/Class2_Connection_FileTransfer.html#slide4",
    "title": "Connecting to the server and tranfering files",
    "section": "Transfer files to server",
    "text": "Transfer files to server\n\n\n\n\nIn MobaxTerm, log in to the server, click on the left panel on the world button (SFTP)\nLeft panel: buttons for upload, download, etc.\nUnder the buttons is a bar to put the path to the desired folder\nOnce you are in the folder you want, click on a file and click the button for download to select where you want to save it"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide5",
    "href": "unix/Class2_Connection_FileTransfer.html#slide5",
    "title": "Connecting to the server and tranfering files",
    "section": "Transfer files to server",
    "text": "Transfer files to server\n\n\n\n\nIn MobaxTerm, create a SFTP session (like an SSH session)"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide6",
    "href": "unix/Class2_Connection_FileTransfer.html#slide6",
    "title": "Connecting to the server and tranfering files",
    "section": "Transfer files to server",
    "text": "Transfer files to server\n\n\n\n\nFolders in your computer\nContent of folder selected in panel 1\nFolders in the server\nStatus of the connection and of transfers"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide7",
    "href": "unix/Class2_Connection_FileTransfer.html#slide7",
    "title": "Connecting to the server and tranfering files",
    "section": "Transfer files to server",
    "text": "Transfer files to server\n\nrsync : FROM YOUR COMPUTER TO THE SERVER!!!! - Never from the server to your computer (for security)\n\nTo enter path to server, you need to add the log in info\nPath to file(s) to transfer\nPath to destination\n\n\n# Type the following in your computer's terminal (not in the server!!!)\nrsync file_in_computer username@cedar.computecanada.ca:/home/username/\n# Will ask for password to server\n# copies file_in_computer to the server in the folder /home/username\n\nrsync username@cedar.computecanada.ca:/home/username/file_in_server ./\n# Will ask for password to server\n# copies /home/username/file_in_server from the server my computer"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#slide8",
    "href": "unix/Class2_Connection_FileTransfer.html#slide8",
    "title": "Connecting to the server and tranfering files",
    "section": "Exercise - transfer fasta file",
    "text": "Exercise - transfer fasta file\n\nDownload this fasta file to a folder of your choice in your computer\nUse rsync to transfer it to the server in a folder called unix_class in $HOME\nEdit the file with nano and remove two sequences, save to another file.\nTransfer new file to your computer using rsync"
  },
  {
    "objectID": "unix/Class2_Connection_FileTransfer.html#resources",
    "href": "unix/Class2_Connection_FileTransfer.html#resources",
    "title": "Connecting to the server and tranfering files",
    "section": "Resources",
    "text": "Resources\n\nHow to connect to the server\nList of webinars (5-10min) on how to use the server\nTypes of folders in the server\nHow to transfer data"
  },
  {
    "objectID": "r/basics.html#variables",
    "href": "r/basics.html#variables",
    "title": "R class - basics",
    "section": "Variables",
    "text": "Variables\nTo work with your files, create new data and work with it, etc., you will want to save your things into R’s memory.\nThese things are variables.\n\nEvery person you know is stored in your brain as a variable (their names)\nEvery contact in your cellphone is a variable that stores their names, phone number, email, etc."
  },
  {
    "objectID": "r/basics.html#variables---save-your-things-in-r",
    "href": "r/basics.html#variables---save-your-things-in-r",
    "title": "R class - basics",
    "section": "Variables - save your things in R",
    "text": "Variables - save your things in R\nHow to create a variable in R:\n\nStart with the name you want\nUse = or &lt;- to separate the name from the value you want it to store"
  },
  {
    "objectID": "r/basics.html#variable-names",
    "href": "r/basics.html#variable-names",
    "title": "R class - basics",
    "section": "Variable names",
    "text": "Variable names\n\n\nGive meaningful names to your variables, or else you may not remember what they are when you read the script later\n\n\nBad names\nWhy?\nGood names\n\n\n\n\nx, y, z, counts\nx, y, z don't tell us what the data there has, so you will not know later what you used\nrawCountsRNAseq, fluorescenceTableDay1\n\n\nbacteriacountsforday5\nCould be a good name, but is difficult to read, use upper and lower case or _ to improve readability\nbacteriaCountsForDay5\n\n\nmicroplate\nDoes not tell what kind of data is stored\nmicroplateFluorescence, microplateConcentration, microplateOD\n\n\n\n\n\n\n\n\nCannot start with numbers\nCannot have symbols, eg. *(),\\/\"';:&lt;&gt;{}[]~!@#$%^+=\nCannot have space"
  },
  {
    "objectID": "r/basics.html#functions---work-with-your-data",
    "href": "r/basics.html#functions---work-with-your-data",
    "title": "R class - basics",
    "section": "Functions - work with your data",
    "text": "Functions - work with your data\nYou use R to do something with your data:\n\nCalculate stats, eg. mean, standard deviation\nKnow if two or more groups are different with T-test or ANOVA.\nYou do these things using functions.\n\n\nThey are simply a bunch of code stored in a variable with an specific name. You use them by typing the name followed by ().  Most of the time, you need to put something inside the (), eg. a table, a column in a table, several numbers, etc.\n\nIf you do not know how to use a function, ask for help (which is also a function!):\n\n\n\n\n\n\n\nhelp(\"mean\") or ?mean will open a page in your browser (if you are using R) or the tab “Help” (if you are using RStudio) with an explanation of what the function does and how to use it"
  },
  {
    "objectID": "r/basics.html#functions---examples",
    "href": "r/basics.html#functions---examples",
    "title": "R class - basics",
    "section": "Functions - examples",
    "text": "Functions - examples\nYou load files into R using functions: read.delim(), read.csv(), read_csv() (this is different to the previous one)\n\nEg. myFile.txt is in the “Input” folder of my project, it is a table with column names (headers) and row names, the columns are separated by tabs (\"\\t\")myFile &lt;- read.delim(file = \"Input/myFile.txt\", header = T, row.names = 1)\n\n\"Input/myFile.txt\" = where the file is stored, has to be inside single or double quotes\nheader = T or header = TRUE are the same thing, but all CAPS always\nrow.names = 1 tells R which column has the information that identifies each row as a different thing, you can use any column here, or you can omit this\n\n\nEach of the three things above (arguments) are separated from each other inside the function by , (try writing a function without commas and see what happens)\n\n\n\n\n\n\n\n\n\nColumn separation\n\n\nread.delim() was made to read tables with columns separated by tabs\n\nIf the columns were separated by something else, like ;, you would write: myFile &lt;- read.delim(file = \"Input/myFile.txt\", header = T, row.names = 1, sep = \";\")"
  },
  {
    "objectID": "r/basics.html#exercise---load-table-into-r",
    "href": "r/basics.html#exercise---load-table-into-r",
    "title": "R class - basics",
    "section": "Exercise - load table into R",
    "text": "Exercise - load table into R\nLoad your dataset (from the preparatory slides  To do before the first class) and save it to the variable \"myFirstInput\"\n\nComma-separated values:  myFirstInput = read.csv(\"Input/myData.csv\", header = T)\nComma-separated values:  myFirstInput = read.delim(\"Input/myData.csv\", header = T, sep = \",\")"
  },
  {
    "objectID": "r/basics.html#functions-to-check-your-table",
    "href": "r/basics.html#functions-to-check-your-table",
    "title": "R class - basics",
    "section": "Functions to check your table",
    "text": "Functions to check your table\nIf you want to see that the file is okay, you can check if the beginning and end of the table looks right:\n\nhead(myFirstInput) - will print the first 6 rows of a table.\ntail(myFirstInput) - will print the last 6 rows of a table.\n\nFor both, you can change the number of lines printed by adding n=x, where x is the number of lines you want to see\nhead(myFirstInput, n=5)"
  },
  {
    "objectID": "r/basics.html#functions-to-check-your-table-1",
    "href": "r/basics.html#functions-to-check-your-table-1",
    "title": "R class - basics",
    "section": "Functions to check your table",
    "text": "Functions to check your table\n\nstr(myFirstInput) - will show the structure of your table\n\nIts class (data.frame or tibble are types of tables)\nThe number of rows (observations) and columns (variables)\nThe type of data inside each column and the their first few values\n\nsummary(myFirstInput) - if the values are numbers, will calculate the quantiles and mean of each column"
  },
  {
    "objectID": "r/basics.html#know-the-types-of-data",
    "href": "r/basics.html#know-the-types-of-data",
    "title": "R class - basics",
    "section": "Know the types of data",
    "text": "Know the types of data\nIf you enter a text in a column that has numeric data, the column will be treated as text (character)\n\nWith numeric columns, summary() acts as in the previous slide\nWith text columns, there are 2 options:\n\ncharacter: will print the length, class and mode (most common value) of the column\nfactor (categories): will print each category and their frequency\n\nCharacters cannot be transformed into numbers, factors (categories) can!\n\nThat is because factors have levels (category 1, category 2, …), and to save space, R simply remember the level of each line"
  },
  {
    "objectID": "r/basics.html#test---difference-between-text-and-categories",
    "href": "r/basics.html#test---difference-between-text-and-categories",
    "title": "R class - basics",
    "section": "Test - difference between text and categories",
    "text": "Test - difference between text and categories\nUse R built-in data to see the difference between characters and factors\n\n\n\n\n\n\nLETTERS and letters are vectors (a list of values of same type) of upper/lower case letters\n\n\n\n\nmyLetters = as.factor(letters) \n\nas.numeric(myLetters)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\nas.numeric(letters)\n\nWarning: NAs introduced by coercion\n\n\n [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n[26] NA\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\nas.numeric(X) is a function that transforms the data in X into numbers, if it is possible.\nas.factor is a function that transforms the vector into a factor\n\n\n\n\n\n\n\n\n\n\n\n\nNA means “Not Available”, R does not know what to do with characters when you want numbers from it, so the result is “not available”\nNaN means “Not A Number”; Inf means “infinite”\n\n\n\n\n\n\n\n\n\nHover your mouse over the code and a button to copy the whole code block will appear!"
  },
  {
    "objectID": "r/basics.html#exercise---playing-with-datasets-already-in-r",
    "href": "r/basics.html#exercise---playing-with-datasets-already-in-r",
    "title": "R class - basics",
    "section": "Exercise - playing with datasets already in R",
    "text": "Exercise - playing with datasets already in R\nR has datasets already loaded for classes like these.\n\nCheck what the PlantGrowth dataset looks like\n\nhead(PlantGrowth)\nsummary(PlantGrowth)\n\nSave PlantGrowth into your environment with a new name\n\nmyPlantGrowth = PlantGrowth\n\n\n\n\n\n\n\n\n\nExplain your code with comments\n\n\nInside R (as well as unix and python), anything you write after a # in a line is not read by the computer. You can use this to explain your code in your own words so you and anyone reading your code can understand it."
  },
  {
    "objectID": "r/basics.html#row-selection",
    "href": "r/basics.html#row-selection",
    "title": "R class - basics",
    "section": "Row selection",
    "text": "Row selection\nIf you load your data and indicate the column containing the names of the rows, you can use the name of the row\nIf you did not set the row names, just use the number of the row.\n\n\n\n\n\n\nHOW TO\n\n\ntable_name[ row_name , ]\nThe row name/number HAS TO come BEFORE the \",\"\n\n\n\n\nmyPlantGrowth = head(PlantGrowth)\n\n# Use the name of the table, and [], inside put the number of the row followed by \",\"\nmyPlantGrowth[1,] # prints the first row\n\n  weight group\n1   4.17  ctrl\n\n# See and set rownames with the function rownames\nrownames(myPlantGrowth)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n\nrownames(myPlantGrowth) = 6:1 # creates a sequence starting from 30 and ending in 1"
  },
  {
    "objectID": "r/basics.html#column-selection",
    "href": "r/basics.html#column-selection",
    "title": "R class - basics",
    "section": "Column selection",
    "text": "Column selection\nTo select a column in a table in R, you cannot click it as in excel, but you can call it by its name or position in the table.\nAll the commands below select the column “weight” in the data frame “myPlantGrowth”\n\n# Use this to return a table with a single column\nmyPlantGrowth = head(PlantGrowth)\nmyPlantGrowth[1] # same with the column name: myPlantGrowth[\"weight\"]\n\n  weight\n1   4.17\n2   5.58\n3   5.18\n4   6.11\n5   4.50\n6   4.61\n\n# Use this to return just the values of the column (this structure is called a vector)\nmyPlantGrowth$weight\n\n[1] 4.17 5.58 5.18 6.11 4.50 4.61\n\nmyPlantGrowth[, \"weight\"] # same with the column number: myPlantGrowth[, 1]\n\n[1] 4.17 5.58 5.18 6.11 4.50 4.61\n\n\n\n\n\n\n\n\nAlways remember the position of your commas!\nUse the function names to check or set the names of your columns"
  },
  {
    "objectID": "r/basics.html#see-how-much-youve-learned---make-your-first-graphs",
    "href": "r/basics.html#see-how-much-youve-learned---make-your-first-graphs",
    "title": "R class - basics",
    "section": "See how much you’ve learned! - Make your first graph(s)",
    "text": "See how much you’ve learned! - Make your first graph(s)\nLet’s use the dataset iris that is inside R:\nRun str(iris) to see what the table looks like\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ..."
  },
  {
    "objectID": "r/basics.html#happy-ending---your-first-graphs",
    "href": "r/basics.html#happy-ending---your-first-graphs",
    "title": "R class - basics",
    "section": "Happy ending - your first graph(s)",
    "text": "Happy ending - your first graph(s)\nSelect one numerical column and make a boxplot, example - Sepal.Length\n\n\n\n\n\n\n~ makes R separate the first item in relation to the categories in the second\n\n\n\n\nBasic boxplotWith colorsWith clean axes titlesWith new axes titles\n\n\n\nboxplot(iris$Sepal.Length ~ iris$Species)\n\n\n\n\n\n\n\n# Lets give it some color\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(iris$Sepal.Length ~ iris$Species, \n    col = colors)\n\n\n\n\n\n\n\ncolors = c(\"red\", \"green\", \"blue\")\n# If the column names are fine, we can use the function with to remove the table name from the title\nwith(iris, boxplot(Sepal.Length ~ Species, col = colors))\n\n\n\n\n\n\n\n# Set a new axes titles with x/ylab\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(iris$Sepal.Length ~ iris$Species, col = colors, \n    ylab = \"Sepal length (mm)\", xlab = \"Species epithet\")"
  },
  {
    "objectID": "r/basics.html#homework",
    "href": "r/basics.html#homework",
    "title": "R class - basics",
    "section": "Homework",
    "text": "Homework\n\nUsing iris\n\nSelect 2 columns and plot them with plot, example: plot(column1, column2)\nPlot everything against everything: pairs(iris)\n\nUsing your data\n\nCreate a boxplot with colored boxes, meaningful axes titles and a plot title"
  },
  {
    "objectID": "r/basics.html#learning-more---basic-r-plots",
    "href": "r/basics.html#learning-more---basic-r-plots",
    "title": "R class - basics",
    "section": "Learning more - Basic R plots",
    "text": "Learning more - Basic R plots\n\n\nHBC training\nR Base Graphics: An Idiot’s Guide\nStatistical tools for high-throughput data analysis\nTC Technology Knowledge Base"
  },
  {
    "objectID": "r/basics.html#cheat-sheet-for-loading-files",
    "href": "r/basics.html#cheat-sheet-for-loading-files",
    "title": "R class - basics",
    "section": "Cheat-sheet for loading files",
    "text": "Cheat-sheet for loading files\nBasics:\n\nNormally, R assumes your data has column names\n\n\n\n\n\n\nFunction\nFile extenion\nColumn separation\nDecimal separation\n\n\n\n\nread.csv\n.csv\nsep = \",\"\ndec = \".\"\n\n\nread.csv2\n.csv\nsep = \";\"\ndec = \",\"\n\n\nread.delim\n.txt, .tsv\nsep = \"\\t\" (tab)\ndec = \".\"\n\n\nread.delim2\n.txt, .tsv\nsep = \"\\t\" (tab)\ndec = \",\"\n\n\n\n\n\n\n\nIf the column separation or the decimal separation is not the one expected by the function you choose, you can specify the correct one inside the function with:\n\nsep = ' '\ndec = '.'"
  },
  {
    "objectID": "r/basics.html#code-from-class-fridays-group",
    "href": "r/basics.html#code-from-class-fridays-group",
    "title": "R class - basics",
    "section": "Code from class (Friday’s group)",
    "text": "Code from class (Friday’s group)\nCopy and paste one of codes below to repeat what was done in class.\n\nCopy the code from this link\nOr run the code below\n\nsource(\"https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class1f.R\")"
  },
  {
    "objectID": "r/basics.html#code-from-class-tuesdays-group",
    "href": "r/basics.html#code-from-class-tuesdays-group",
    "title": "R class - basics",
    "section": "Code from class (Tuesday’s group)",
    "text": "Code from class (Tuesday’s group)\n\nCopy the code from this link\nOr run the code below\n\nsource(\"https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class1t.R\")"
  },
  {
    "objectID": "r/Regex_and_tests.html#readxl-package---open-excel-files",
    "href": "r/Regex_and_tests.html#readxl-package---open-excel-files",
    "title": "Regex and tests",
    "section": "readxl package - open excel files",
    "text": "readxl package - open excel files\nPart of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  },
  {
    "objectID": "r/Regex_and_tests.html#regular-expressions-regex",
    "href": "r/Regex_and_tests.html#regular-expressions-regex",
    "title": "Regex and tests",
    "section": "Regular expressions (Regex)",
    "text": "Regular expressions (Regex)\nThese are ways to search text without writing the explicitly what you are searching.\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)"
  },
  {
    "objectID": "r/Packages_Functions.html#be-lazy",
    "href": "r/Packages_Functions.html#be-lazy",
    "title": "R class - packages and functions",
    "section": "Be lazy!",
    "text": "Be lazy!\nThe most certain way to make mistakes when programming is typing everything.\nThink of when you are writing a text, how many typos do you make? This will happen when you are coding!\nRealizing there are typos or bigger mistakes in your code is more difficult than in a text to a friend.\nSo, be lazy and copy/paste codes when possible.\n\nAlso, don’t try to re-invent the wheel. Check on stack-overflow, bioconductor or github to see if other people already tried what you are doing and the solutions they came up with. You can always edit their code!"
  },
  {
    "objectID": "r/Packages_Functions.html#packages",
    "href": "r/Packages_Functions.html#packages",
    "title": "R class - packages and functions",
    "section": "Packages",
    "text": "Packages\nThese are simply folders containing files with many functions.\nThey may contain data so you can test the functions.\nHow to use packages\n\nInstallLoadAdvanced install and load\n\n\nIf you never used the package, it probably is not installed in your computer, so you need to use the function “install.packages”\ninstall.packages(\"vegan\") # a package with functions for multivariate stats functions\n\n# You can install many packages at once\ninstall.packages(c(\"venn\", \"tidyverse\"))\n\n\ninstall.packages just installs the package, but it does not load it (open in R). To load, use the function library\nlibrary(cluster)\nlibrary(\"tidyverse\") # you do not need the quotes with the function library\n\n\n\n\n\n\nYou cannot put multiple package names in the library function You need to load them one by one\n\n\n\n\n\nCome back to this part once you are more comfortable with programming.\nYou cannot put a vector (ie. c(\"a\", \"b\", \"c\")) inside library(), but you can write a code that loads the packages one by one without you writing that manually.\n# start by creating a vector with all the packages you need\npkgs = c(\"rmarkdown\", \"tidyverse\", \"venn\")\n\n# We check which packages are NOT (!) installed\npkgs.To.Install = ! pkgs %in% installed.packages()\n\n# any() checks if there is at least one TRUE in the vector\nif (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])\n\nfor (curPkg in pkgs) library(curPkg, character.only = T) \n# curPkg is a variable that takes the value of each element in pkgs\n# Every time the function library() is run, curPkg changes value"
  },
  {
    "objectID": "r/Packages_Functions.html#loops",
    "href": "r/Packages_Functions.html#loops",
    "title": "R class - packages and functions",
    "section": "loops",
    "text": "loops\nLet’s create a function and a vector of elements that we will use in the function\n\nthesisDefense = function(x) {return(paste(\"Ph.D.\", x))}\ncandidates = c(\"Serge\", \"Fadoua\", \"Arghavan\", \n           \"Snehi\", \"Basanta\", \"Sajjad\", \n           \"Mahsa\", \"Archana\")\n\n\n\nfor\n\nFunction that will repeat what you ask for everything in the group you give it. Eg: every PhD candidate has to defend their theses: - Useful when you do not want to save the results or when you need to save separated objects for each elements in the loop (each candidate below)\n\n\n\nfor (phd in candidates) { thesisDefense(phd) }\n\n\n\n\n# To see an output, we would have to either print it or create an object to save it\ndefenseResults = c()\nfor (phd in candidates) { defenseResults[phd] = thesisDefense(phd) }\ndefenseResults\n\n           Serge           Fadoua         Arghavan            Snehi \n   \"Ph.D. Serge\"   \"Ph.D. Fadoua\" \"Ph.D. Arghavan\"    \"Ph.D. Snehi\" \n         Basanta           Sajjad            Mahsa          Archana \n \"Ph.D. Basanta\"   \"Ph.D. Sajjad\"    \"Ph.D. Mahsa\"  \"Ph.D. Archana\" \n\n\n\n\n\napply functions\n\nSimilar to for, but generates an output\nUseful when you want a single output for each element of the loop\nSeveral options: apply, sapply, lapply, mapply, vapply\n\n\n\ndefenseResults = sapply(candidates, \\(phd) thesisDefense(phd) )\n\ndefenseResults\n\n\n\n           Serge           Fadoua         Arghavan            Snehi \n   \"Ph.D. Serge\"   \"Ph.D. Fadoua\" \"Ph.D. Arghavan\"    \"Ph.D. Snehi\" \n         Basanta           Sajjad            Mahsa          Archana \n \"Ph.D. Basanta\"   \"Ph.D. Sajjad\"    \"Ph.D. Mahsa\"  \"Ph.D. Archana\""
  },
  {
    "objectID": "r/Packages_Functions.html#tidyverse---many-packages-that-make-your-life-easier",
    "href": "r/Packages_Functions.html#tidyverse---many-packages-that-make-your-life-easier",
    "title": "R class - packages and functions",
    "section": "Tidyverse - many packages that make your life easier",
    "text": "Tidyverse - many packages that make your life easier\nWhen you load the package “tidyverse”, it tells you that it loaded many others (packages from the universe tidy)\n\nTables and data.frames\n\ndplyr: many functions to work with tables\ntibble: construct data frames (tables)\ntidyr: tools to better organize data (make it tidyier)\nreadr: fast and friendly functions to read table data\n\nText-like data\n\nforcats: (anagram of factors) tools to work with factors (tutorial)\nstringr: work with text (character variables)\nlubridate: work with dates\n\nPlots\n\nggplot2: create better plots\n\nProgramming\n\npurrr: functional programming in R (cheatsheet)"
  },
  {
    "objectID": "r/Packages_Functions.html#pipe-or",
    "href": "r/Packages_Functions.html#pipe-or",
    "title": "R class - packages and functions",
    "section": "Pipe (|> or %>%)",
    "text": "Pipe (|&gt; or %&gt;%)\nThink of the pipe as a tube connecting two functions. When the first function is done, instead of presenting its output, you use it to start a new function.\n\nEg. To start a postdoc, I had to finish my Ph.D: phd(\"Karen\") %&gt;% postdoc\n\n\n\n\n\n\n\nIf you use |&gt;, you need to put the parenthesis in the function in front of it. Meaning:\n\nphd(\"Karen\") %&gt;% postdoc works same as phd(\"Karen\") %&gt;% postdoc() and phd(\"Karen\") |&gt; postdoc()\nphd(\"Karen\") |&gt; postdoc does not work\n\n\n\n\nLet’s say you just want to check if R will read your file right or if you need to add more things to it before really working on the file.\n\nExerciseSolution 1Solution 2\n\n\nRun the function str on your input file or on the example from Class 0\n\n\n\n\n\n\nYou can load files from the internet without needing to download them to your computer!\n\n\n\n\n\n# You could first put the path to the file in a variable, it would make things easier\nmyFile = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt\"\n\nstr(read.delim(myFile))\n\n\n'data.frame':   8 obs. of  7 variables:\n $ X        : chr  \"A\" \"B\" \"C\" \"D\" ...\n $ Control_1: num  0.1229 0.0907 0.1068 0.0161 0.1533 ...\n $ Control_2: num  0.827 0.11 0.469 0.359 0.462 ...\n $ Control_3: num  0.1486 0.3352 0.2419 0.0933 0.9419 ...\n $ Treated_1: num  0.086 0.1403 0.1132 0.0271 0.3284 ...\n $ Treated_2: num  0.3145 0.2441 0.2793 0.0352 0.0909 ...\n $ Treated_3: num  0.22 0.433 0.326 0.107 0.316 ...\n\n\n\n\nUsing pipe, you can see the progression of the pipeline, eg.: bachelor(\"Karen\") %&gt;% phd() %&gt;% postdoc instead of postdoc(phd(bachelor(\"Karen\")))\nBasically, the first function written is the first one used, not the last.\n# You can also use a pipe ( %&gt;% )\nmyFile = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt\"\n\nread.delim(myFile) %&gt;% str\n\n\n'data.frame':   8 obs. of  7 variables:\n $ X        : chr  \"A\" \"B\" \"C\" \"D\" ...\n $ Control_1: num  0.1229 0.0907 0.1068 0.0161 0.1533 ...\n $ Control_2: num  0.827 0.11 0.469 0.359 0.462 ...\n $ Control_3: num  0.1486 0.3352 0.2419 0.0933 0.9419 ...\n $ Treated_1: num  0.086 0.1403 0.1132 0.0271 0.3284 ...\n $ Treated_2: num  0.3145 0.2441 0.2793 0.0352 0.0909 ...\n $ Treated_3: num  0.22 0.433 0.326 0.107 0.316 ..."
  },
  {
    "objectID": "r/Packages_Functions.html#readxl-package---open-excel-files",
    "href": "r/Packages_Functions.html#readxl-package---open-excel-files",
    "title": "R class - packages and functions",
    "section": "readxl package - open excel files",
    "text": "readxl package - open excel files\nPart of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  },
  {
    "objectID": "r/Packages_Functions.html#ggplot2",
    "href": "r/Packages_Functions.html#ggplot2",
    "title": "R class - packages and functions",
    "section": "ggplot2",
    "text": "ggplot2\n\nExerciseSolution 1Solution 2Solution 3\n\n\nCreate a colored boxplot with the dataset iris, with nice axes titles\n\n\nCode from the previous class\n\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(Sepal.Length ~ Species, \n    data = iris, col = colors, \n    ylab = \"Sepal length (mm)\", xlab = \"Species epithet\")\n\n\n\n\n\n\nUse ggplot. The syntax may take a while to get used to, but it is easier to read.\n\n# aes is short for aesthetics, basically what columns hold the values you want to plot\n# fill is the color that will be inside the box, color is just for the border\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n    geom_boxplot() + # the type of plot you want\n    ylab(\"Sepal length (mm)\") +\n    xlab(\"Species epithet\")\n\n\n\n\n\n\nImprove ggplot by setting a better theme (check here see the options)\n\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n    geom_boxplot(show.legend = F) + # the type of plot you want\n    ylab(\"Sepal length (mm)\") +\n    xlab(\"Species epithet\") +\n    scale_fill_manual(values = colors)"
  },
  {
    "objectID": "r/Packages_Functions.html#ggplot---part-2",
    "href": "r/Packages_Functions.html#ggplot---part-2",
    "title": "R class - packages and functions",
    "section": "ggplot - part 2",
    "text": "ggplot - part 2\nGraphics are layers of data and images put on top of each other. That is why the pieces of the ggplot function are connected by a +.\nThe codes below construct the plot from the previous slide piece by piece.\n\nBasic plotDecorations\n\n\n\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\n(plot1 = ggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)))\n\n\n\n\n\n(plot2 = plot1 +\n    geom_boxplot(show.legend = F)) # the type of plot you want\n\n\n\n\n\n\nlabs adds labels:\n\nx and y - will add the labels to the axes (you can use the functions xlab or ylab instead)\ntitle - Normally at the top of the figure (you can use the function ggtitle instead)\nsubtitle - Goes under the title and is a bit smaller\ncaption - Normally goes at the bottom of the figure and is a small text\ntag - the letter that goes at the top-left corner of a plot that is one part of several in a figure\n\n\n(plot3 = plot2 +\n    labs(y = \"Sepal length (mm)\", x = \"Species epithet\"))\n\n\n\nplot3\n\n\n\n\n\ncolors = c(\"red\", \"green\", \"blue\")\n\nplot3 + scale_fill_manual(values = colors)"
  },
  {
    "objectID": "r/Packages_Functions.html#dplyr-prepare-your-data-for-ggplot",
    "href": "r/Packages_Functions.html#dplyr-prepare-your-data-for-ggplot",
    "title": "R class - packages and functions",
    "section": "dplyr: prepare your data for ggplot",
    "text": "dplyr: prepare your data for ggplot\nIn the example dataset, the names of the groups are in the middle not specified, they are inside the replicate name. We need one column with the values and one with the names of the treatments.\n\nInput dataPivot-longerNew columnPlot\n\n\nmyFile = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt\"\n\nrawData = read.delim(myFile)\nnames(rawData)\n\n[1] \"X\"         \"Control_1\" \"Control_2\" \"Control_3\" \"Treated_1\" \"Treated_2\"\n[7] \"Treated_3\"\n\n# Let's change x to \"Measured\"\nnames(rawData)[1] = \"Measured\"\n\n\n\nThe table now is in the format “wide”, the one we want is called “long”\n\nlongData = pivot_longer(\n    data = rawData,\n    cols = !Measured, # gets all the columns of the table, except for the one in front of !\n    names_to = \"Replicates\", # name of the column that will contain column names from rawData\n    values_to = \"Measurements\"\n    )\n\nstr(longData)\n\ntibble [48 × 3] (S3: tbl_df/tbl/data.frame)\n $ Measured    : chr [1:48] \"A\" \"A\" \"A\" \"A\" ...\n $ Replicates  : chr [1:48] \"Control_1\" \"Control_2\" \"Control_3\" \"Treated_1\" ...\n $ Measurements: num [1:48] 0.123 0.827 0.149 0.086 0.314 ...\n\n\n\n\nLet’s split the values from “Replicates” using str_split from stringr\nmutate will return the input table with the new column we create\n\n# pattern is what separates (_)\n# i is the part that we want to see: Control_1 has 2 pieces, i=1 returns \"Control\"\n\nlongDataTreatments = longData %&gt;%\n    mutate(Treatment = str_split_i(Replicates, pattern = \"_\", i = 1))\n\nstr(longDataTreatments)\n\ntibble [48 × 4] (S3: tbl_df/tbl/data.frame)\n $ Measured    : chr [1:48] \"A\" \"A\" \"A\" \"A\" ...\n $ Replicates  : chr [1:48] \"Control_1\" \"Control_2\" \"Control_3\" \"Treated_1\" ...\n $ Measurements: num [1:48] 0.123 0.827 0.149 0.086 0.314 ...\n $ Treatment   : chr [1:48] \"Control\" \"Control\" \"Control\" \"Treated\" ...\n\n\n\n\n\nlongDataTreatments %&gt;%\n    ggplot(aes(x = Treatment, y = Measurements, fill = Measured)) +\n    geom_boxplot()\n\n\n\nlongDataTreatments %&gt;%\n    ggplot(aes(x = Measured, y = Measurements, fill = Treatment)) +\n    geom_boxplot()"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plots---sample-distribution",
    "href": "r/Packages_Functions.html#types-of-plots---sample-distribution",
    "title": "R class - packages and functions",
    "section": "Types of plots - sample distribution",
    "text": "Types of plots - sample distribution\n\nBoxplot - check this slide\n\ngeom_boxplot\nAllows the visual comparison of groups, like a bar chart, as well as the distribution of the replicates\n\nYou can see the minimum, maximum and the median of the sample, as well as the outliers\n\n\nViolin plot\n\ngeom_violin\nSame as boxplot, but without the quantiles drawn\n\n\n\n\n\n\n\n\nYou can put different types of plot and multiple data in the same graphic.\nOver the violin or boxplot layer, you can add the points representing the value measured for each replicate, the mean, etc.\n\n\n\n\n\n\n\n\n\nIf you have few replicates (&lt; 5), use a barplot with the standard deviation (make sure the color of the bar allows the visualization of the error bar)\nIf many replicates per group, use a boxplot or violin plot."
  },
  {
    "objectID": "r/Packages_Functions.html#example-violin-plot",
    "href": "r/Packages_Functions.html#example-violin-plot",
    "title": "R class - packages and functions",
    "section": "Example violin plot",
    "text": "Example violin plot\nThe code to get a violin plot is the same as the one for a boxplot, the only difference is the geom_violin.\n\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n    geom_violin(show.legend = F) + # violin instead of boxplot\n    ylab(\"Sepal length (mm)\") +\n    xlab(\"Species epithet\") +\n    scale_fill_manual(values = colors)"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plots---bar-chart",
    "href": "r/Packages_Functions.html#types-of-plots---bar-chart",
    "title": "R class - packages and functions",
    "section": "Types of plots - Bar chart",
    "text": "Types of plots - Bar chart\n\nWhat and howgeom_colgeom_bar(stat = \"identity\")Pie chart\n\n\n\nUses\n\nVisually compare means when the number of replicates is low\nVisually compare counts (number of occurences) - number of students per lab\n\nHow\n\nUse either geom_col or geom_bar(stat = \"identity\")\nAdd standard deviation bar with geom_errorbar\n\ngeom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2)\n\n\n\n\n\n\ndf &lt;- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n    geom_col(width = 1)\n\n\n\n\n\n\n\nidentity means that the size of the bar will be the value you put instead of calculating something\n\n\ndf &lt;- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n    geom_bar(width = 1,  stat = \"identity\")\n\n\n\n\n\n\n\nUsing either geom_bar or geom_col, you can make a pie chart with + coord_polar(\"y\")\n\n\ndf &lt;- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = \"\", y = value, fill = group)) +\n    # x has to be \"\" - check how it looks if you put x = group\n    geom_bar(width = 1,  stat = \"identity\") +\n    coord_polar(\"y\", start = 1) +\n    theme_void() # clean up grids, borders, and labels"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plot---proportions",
    "href": "r/Packages_Functions.html#types-of-plot---proportions",
    "title": "R class - packages and functions",
    "section": "Types of plot - proportions",
    "text": "Types of plot - proportions\nYou can use geom_bar(stat = \"count\") if you do not have the number of occurrences of each category computed. This way, ggplot counts it and plots. - Eg. A table with metabolites detected separated by category: how many metabolites of each category were detected?\nIf you want proportions in %, use stat = \"density\" instead of stat = \"count\"\n\ngeom_bar - count\n\n\n\nWith geom_bar, you can have the same plot as with geom_col if you use stat = \"identity\"\nidentity means that the size of the bar will be the value you put instead of calculating something\n\n\n# Datasets about US states\nUS_statesInfo = data.frame(Name = state.name,\n               Region = state.region,\n               Division = state.division)\nx = \"Number of states\"\n# Plot the number of states in each division\nggplot(US_statesInfo, aes(y = Division)) +\n    geom_bar(stat = \"count\") +\n    xlab(x)\n\n\n\n# Plot the number of states in each region\nggplot(US_statesInfo, aes(y = Region)) +\n    geom_bar() +\n    xlab(x)\n\n\n\n# Plot the number of states in each division, and color by the region\nggplot(US_statesInfo, aes(y = Division, fill = Region)) +\n    geom_bar(stat = \"count\") +\n    xlab(x)"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plots---part-3",
    "href": "r/Packages_Functions.html#types-of-plots---part-3",
    "title": "R class - packages and functions",
    "section": "Types of plots - part 3",
    "text": "Types of plots - part 3\nLine graph - geom_line\n\nVisualize data across time - points are connected because they are the same sample at different times.\n\nLet’s say we want to see how the labs of 2 PIs have grown across the years and compare the two.\n\n# Let's create a time series to plot\n\nLabSize = data.frame(Isabel = c(0, 3, 5, 10, 30),\n             Hugo = c(2, 2, 6, 9, 9),\n             Year = seq(2014, 2022, 2))\nLabSize.Long = pivot_longer(LabSize,\n                cols = !Year, # all columns from LabSize, except \"Year\"\n                names_to = \"PI\", \n                values_to = \"LabMembers\")\n\nggplot(LabSize.Long, \n       aes(x = Year, y = LabMembers, color = PI)) +\n    geom_line()"
  },
  {
    "objectID": "r/Packages_Functions.html#advanced-line-graph",
    "href": "r/Packages_Functions.html#advanced-line-graph",
    "title": "R class - packages and functions",
    "section": "Advanced line graph",
    "text": "Advanced line graph\n\nInputPrepare the dataLine chartCalculate statsLine chart with error bars\n\n\nWe will use the time series data\n# Load the data\ntimeSeries.File = \"karengoncalves.github.io/Programming_classes/r/exampleData/TimeSeries_example.csv\"\ntimeSeries = read.csv(timeSeries.File, row.names = 1)\n\nstr(timeSeries)\n\n'data.frame':   12 obs. of  10 variables:\n $ X           : chr  \"Day_1\" \"Day_2\" \"Day_3\" \"Day_4\" ...\n $ Control_3   : num  0 1.96 3.98 6.18 7.52 ...\n $ Control_2   : num  0 2.04 4.02 6 8 ...\n $ Control_1   : num  0 2 4 5.82 8.48 ...\n $ TreatmentA_1: num  0 2.94 6.03 8.73 12 ...\n $ TreatmentA_2: num  0 3 6 9.27 11.28 ...\n $ TreatmentA_3: num  0 3.06 5.97 9 12.72 ...\n $ TreatmentB_3: num  0 1.53 3 4.5 6.36 ...\n $ TreatmentB_2: num  0 1.47 2.98 4.37 5.64 ...\n $ TreatmentB_1: num  0 1.5 3.02 4.63 6 ...\n\n# Let's rename the first column that indicate the time points\nnames(timeSeries)[1] = \"TimePoint\" \ntimeSeries$TimePoint = \n    gsub(\"Day_\", \"\", timeSeries$TimePoint) |&gt;\n    as.numeric()\n\n\n\nLet’s transform the data to format long and add a column with the name of the treatment group\n\nlibrary(tidyverse)\n\ntimeSeriesLong = pivot_longer(\n    timeSeries,\n    cols = !TimePoint, \n    names_to = c(\"Treatment\", \"Replicates\"),\n    names_sep = \"_\",\n    values_to = \"Growth_measure\"\n)\n\nhead(timeSeriesLong)    \n\n# A tibble: 6 × 4\n  TimePoint Treatment  Replicates Growth_measure\n      &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;               &lt;dbl&gt;\n1         1 Control    3                       0\n2         1 Control    2                       0\n3         1 Control    1                       0\n4         1 TreatmentA 1                       0\n5         1 TreatmentA 2                       0\n6         1 TreatmentA 3                       0\n\n\n\n\n\nggplot(timeSeriesLong) +\n    geom_line(aes(x = TimePoint, y = Growth_measure, \n              group = Treatment, \n              color = Treatment)) +\n    scale_x_continuous(breaks = 1:12)\n\n\n\n\n\n\nNow let’s create another table with the mean, standard deviation and coefficient of variation of each treatment per time point\n\nGrowthMeasureStats = timeSeriesLong %&gt;%\n    group_by(Treatment, TimePoint) %&gt;%\n    summarise(\n        Mean = mean(Growth_measure),\n        StdEnv = sd(Growth_measure)\n    )\n\n\n\nFor the error bars, we cannot simply say “here, this is the standard deviation”.\nWe need to tell it “use this value as maximum and this as minimum”\nSee that we set “ymin” and “ymax”. If you have standard deviation for the x-axis, you can add it with “xmin” and “xmax”.\n\n# We put inside ggplot() what is common to all layers\np1 = ggplot(GrowthMeasureStats, \n       aes(x = TimePoint, \n           color = Treatment)) +\n    geom_line(aes(y = Mean)) \np1 \n\n\n\np1 + geom_errorbar(aes(ymin = Mean - StdEnv,\n               ymax = Mean + StdEnv),\n           width = 0.2) +\n    scale_x_continuous(breaks = 1:12)"
  },
  {
    "objectID": "r/Packages_Functions.html#test-if-the-curves-are-different",
    "href": "r/Packages_Functions.html#test-if-the-curves-are-different",
    "title": "R class - packages and functions",
    "section": "Test if the curves are different",
    "text": "Test if the curves are different\n\nLinear model (regression)Check which curves are different\n\n\n\n# Create the linear model of Growth_measure ~ TimePoint, adding the Treatment interaction\nlinear.model = lm(Growth_measure ~ TimePoint*Treatment, data = timeSeriesLong)\nsummary(linear.model)\n\n\nCall:\nlm(formula = Growth_measure ~ TimePoint * Treatment, data = timeSeriesLong)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -1.80  -0.06   0.00   0.06   1.80 \n\nCoefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                   -2.00000    0.14189 -14.095  &lt; 2e-16 ***\nTimePoint                      2.00000    0.01928 103.740  &lt; 2e-16 ***\nTreatmentTreatmentA           -1.00000    0.20066  -4.984 2.56e-06 ***\nTreatmentTreatmentB            0.50000    0.20066   2.492   0.0143 *  \nTimePoint:TreatmentTreatmentA  1.00000    0.02726  36.678  &lt; 2e-16 ***\nTimePoint:TreatmentTreatmentB -0.50000    0.02726 -18.339  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3993 on 102 degrees of freedom\nMultiple R-squared:  0.9979,    Adjusted R-squared:  0.9978 \nF-statistic:  9800 on 5 and 102 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\ninstall.packages(\"lsmeans\"); library(\"lsmeans\")\n\npackage 'lsmeans' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Karen\\AppData\\Local\\Temp\\RtmpoBS5bf\\downloaded_packages\n\n\n\nlinear.model.trends &lt;- lstrends(linear.model, \"Treatment\", var=\"TimePoint\")\nsummary(linear.model.trends)\n\n Treatment  TimePoint.trend     SE  df lower.CL upper.CL\n Control                2.0 0.0193 102     1.96     2.04\n TreatmentA             3.0 0.0193 102     2.96     3.04\n TreatmentB             1.5 0.0193 102     1.46     1.54\n\nConfidence level used: 0.95 \n\npairs(linear.model.trends)\n\n contrast                estimate     SE  df t.ratio p.value\n Control - TreatmentA        -1.0 0.0273 102 -36.678  &lt;.0001\n Control - TreatmentB         0.5 0.0273 102  18.339  &lt;.0001\n TreatmentA - TreatmentB      1.5 0.0273 102  55.016  &lt;.0001\n\nP value adjustment: tukey method for comparing a family of 3 estimates"
  },
  {
    "objectID": "r/Packages_Functions.html#references",
    "href": "r/Packages_Functions.html#references",
    "title": "R class - packages and functions",
    "section": "References",
    "text": "References\n\nAll tidyverse packages\nTutorials on all types of plots with ggplot2\n\nr-statistics\nCedric Scherer - advanced\n\nTutorials on data manipulation with dplyr\n\nTidyverse\nR official\nGenomics class"
  },
  {
    "objectID": "r/Packages_Functions.html#code-from-class",
    "href": "r/Packages_Functions.html#code-from-class",
    "title": "R class - packages and functions",
    "section": "Code from class",
    "text": "Code from class\nTuesdays group\n\nSeptember 19th\nSeptember 19th (2)\nOctober 3rd\nOctober 10th\nOctober 17th\n\nFridays group\n\nSeptember 15th\nSeptember 29th\nOctober 6th\nOctober 19th"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Classes",
    "section": "",
    "text": "Unix/Bash/TerminalRStatistics\n\n\n\nClass 1 - Basics\nClass 2 - Connecting to the server and tranfering files\nClass 3 - Running jobs\nClass 4 - Running blast\n\nScripts for the class:\n\nmyTry.sh\nmyGeneralBlast.sh\nsbatch_blast.sh\ncreate_master_blast.sh\n\n\nClass 5 - Filtering tables with AWK\n\nblastn_result.txt\nprots.fasta\n\nClass 6 - SED commands \n\n\n\n\n\n\nCheck this before the first class\n\nExample data for class 1\n\nClass 1 - basics\nClass 2 - Packages and functions\n\n\n\n\n\n\n\nComing soon"
  },
  {
    "objectID": "index.html#basics",
    "href": "index.html#basics",
    "title": "Classes",
    "section": "",
    "text": "Check this before the first class\n\nExample data for class 1\n\nClass 1 - basics\nClass 2 - Packages and functions"
  },
  {
    "objectID": "r/Before_1stClass.html#first-things-first-download-and-install",
    "href": "r/Before_1stClass.html#first-things-first-download-and-install",
    "title": "To do before the first class",
    "section": "First things first, download and install:",
    "text": "First things first, download and install:\n\nR software\n\nWindows\n\nR 4.3.1\nRtools\n\nMacOS\n\nR 4.3.1\n\nIf you use Linux\n\nselect the right type and follow the instructions there (open the terminal and paste the codes)\n\n\nRStudio\n\nWindows\nMacOS 11+\nUbuntu 20 or 22/Debian 11\nFedora 19/RedHat 7\nFor other operating systems, visit posit.co"
  },
  {
    "objectID": "r/Before_1stClass.html#create-a-project-named-r_classes",
    "href": "r/Before_1stClass.html#create-a-project-named-r_classes",
    "title": "To do before the first class",
    "section": "Create a project named \"R_classes\"",
    "text": "Create a project named \"R_classes\"\nBy creating a project, you can be sure that your input and output will all be in the same folder (called a directory in programming)\nFollow one of the tutorials below to create a project:\n\nWatch the following video to see how to create a project\nFollow the instructions here\n\nif you are lazy like me, just look at the figures in the article"
  },
  {
    "objectID": "r/Before_1stClass.html#prepare-the-working-directory-project-folder",
    "href": "r/Before_1stClass.html#prepare-the-working-directory-project-folder",
    "title": "To do before the first class",
    "section": "Prepare the working directory (project folder)",
    "text": "Prepare the working directory (project folder)\nCreate 4 folders in the project folder\n\nInputs\nOutputs\nPlots\nScripts\n\n\n\n\n\n\n\nNote: try not to use non-english symbols, spaces or dashes (\"-\") in file or folder names"
  },
  {
    "objectID": "r/Before_1stClass.html#prepare-the-input-table",
    "href": "r/Before_1stClass.html#prepare-the-input-table",
    "title": "To do before the first class",
    "section": "Prepare the input table",
    "text": "Prepare the input table\nIf you have data you wish to work on (be it: fluorescence measured in FACS or microplate, concentration of protein, OD of bacteria/algae, gene expression levels), prepare the table as follows:\n\n\n\n\n\nSampleA_rep1\nSampleA_rep2\nSampleA_rep3\nSampleB_rep1\nSampleB_rep2\nSampleB_rep3\n\n\n\n\nMeasurement_1\nvalue\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\nMeasurement_2\nvalue\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\nMeasurement_3\nvalue\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\nMeasurement_4\nvalue\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\nMeasurement_5\nvalue\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\nMeasurement_6\nvalue\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\n\n\n\n\nWhere:\n\nSampleA/SampleB are the different treatments and rep_1/2/3 are the biological replicates\nMeasurement1/2/3/4/5/6 are the proteins/genes measured (several repetitions of the same assay go one per line)\n\n\nIf you have nothing, click here to download an example dataset\nSave the table in excel as *.txt (text; tab-delimited) in the Input folder"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#packages",
    "href": "r/R_bioinformatics_basics.html#packages",
    "title": "R for bioinformatics - basics",
    "section": "Packages",
    "text": "Packages\nBefore, we installed packages with the code below\npkgs = c(\"rmarkdown\", \"tidyverse\", \"venn\")\npkgs.To.Install = which(! pkgs %in% installed.packages())\nif (length(pkgs.To.Install) != 0) install.packages(pkgs[pkgs.To.Install])\nfor (curPkg in pkgs) library(curPkg, character.only = T) \nHowever, most packages for bioinformatics are not downloadable with a simple install.packages, as they are not stored in CRAN, the basic website for R packages.\nInstead, they are in Bioconductor, and some are in specific github repositories (think about the R_class_examples)."
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#installing-packages-from-other-sources",
    "href": "r/R_bioinformatics_basics.html#installing-packages-from-other-sources",
    "title": "R for bioinformatics - basics",
    "section": "Installing packages from other sources",
    "text": "Installing packages from other sources\n\nBioconductor packagesGithub packages\n\n\nFor these, we use the package BiocManager.\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\npkgs.bioconductor = c(\"msa\", \"Biostrings\")\npkgs.To.Install = which(! pkgs.bioconductor %in% installed.packages())\nif (length(pkgs.To.Install) != 0) {\n    BiocManager::install(pkgs.bioconductor[pkgs.To.Install])    \n}\n\n\n\n\n\n\nIn BiocManager::install, the :: indicates that the function “install” comes from the package “BiocManager”.\nSo even if there is another package with the same function, R will know which one to use.\n\n\n\n\n\n\n\n\n\n\n\nGithub is a website that has folders for each user, and each user may have multiple folders: one for each project. Example, in:\n\nhttps://github.com/KarenGoncalves/R_class_examples\n\nKarenGoncalves/ is my folder in the website, in there I have over 20 folders, one for each project.\nR_class_examples is one of them.\n\n\n\n\n\nif (! \"devtools\" %in% installed.packages()) {\n    install.packages(\"devtools\")\n}\n\nrepos.github = c(\"YuLab-SMU/ggmsa\")\npkgs.github = gsub(\".+/\", \"\", repos.github) # remove the folder name\npkgs.To.Install = which(! pkgs.github %in% installed.packages())\n\nif (length(pkgs.To.Install) != 0) {\n    # To install the package, we need the folder + package name\n    devtools::install_github(repos.github[pkgs.To.Install]) \n}"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#simplified-install",
    "href": "r/R_bioinformatics_basics.html#simplified-install",
    "title": "R for bioinformatics - basics",
    "section": "Simplified install",
    "text": "Simplified install\nCopy the code below to load all the necessary packages.\nIn future, just come back here, copy the code below and change the list of packages.\n\ndevtools::source_gist(\"https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978\")\n\ninstall_from_dif_sources(\n    cran_packages = c(\"tidyverse\", \"tinytex\", \"patchwork\"),\n    bioconductor_packages = c(\"Biostrings\", \"msa\", \"treeio\", \"ggtree\", \"ape\", \"seqinr\", \"phangorn\"),\n    github_packages = \"YuLab-SMU/ggmsa\"\n)\n\n\n\n\n\n\n\nThe link https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978 contains the R script that creates functions to load the packages from different sources: CRAN (the typical source), Bioconductor and github.\nSo you just need to give the link to the function devtools::source_gist() and then you can use the function install_from_dif_sources"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#reading-and-writing-fasta-files",
    "href": "r/R_bioinformatics_basics.html#reading-and-writing-fasta-files",
    "title": "R for bioinformatics - basics",
    "section": "Reading and writing fasta files",
    "text": "Reading and writing fasta files\nIf you have protein sequences in a fasta file, copy it to your inputs folder, else use the following: Reductases.fasta\n\n# To open a fasta file with multiple sequences, use the function readDNAStringSet() or readAAStringSet()\nfasta_input = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Reductases.fasta\" %&gt;%\n    readAAStringSet(format = \"fasta\")\nhead(fasta_input)\n\nAAStringSet object of length 6:\n    width seq                                               names               \n[1]   318 MATENKILILGPTGAIGRHIVWA...IEASEAYPDVTYTTADEYLNQFV IFR Medicago sativa\n[2]   330 MAAGFLFHMGSLPAIATVGHKSK...GEATKLYPEVGYTTVVEYMKRYV PILR2 Linum usita...\n[3]   598 MVGSIVGSNMAATDARFLSSNFG...VAHLPDKANNYLTPALSVLEKNT HC173 Arabidopsis...\n[4]   323 MTTGKGKILILGATGYLGKYMVK...EYLKICLVNPPKPKLATYAQPST IGS1 Petunia hybrida\n[5]   314 MEENGMKSKILIFGGTGYIGNHM...FTTIDELLDIFVHDPPPPASAAF EGS1 Ocimum basil...\n[6]   310 MVASEKSKILIIGGTGYIGKYLV...VEATELYPKVKYTTVDEFYNKFV IFRH Nicotiana gl...\n\n# If you want to select just one or two sequences and export it, you can do:\nwriteXStringSet(fasta_input[1:3], \n        filepath = \"input_subset.fasta\", \n        format = \"fasta\")"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#multiple-sequence-alignment-msa",
    "href": "r/R_bioinformatics_basics.html#multiple-sequence-alignment-msa",
    "title": "R for bioinformatics - basics",
    "section": "Multiple Sequence Alignment (MSA)",
    "text": "Multiple Sequence Alignment (MSA)\nMake things easy for yourself later, add the names of the parameters of each function so you know what you need to put next time.\n\nThere are 4 functions for MSA:\n\nmsaClustalW - ClustalW is a general purpose multiple alignment program for DNA or proteins. 1\n\ncluster parameter can be either Neighbor Joining (\"nj\") or Unweighted Pair Group Method with Arithmetic mean (\"upgma\")\n\nDo not use \"upgma\" if you are on windows and your R version is 4.x (x being any number) - R crashes\n\n\nmsaClustalOmega - New MSA tool that uses seeded guide trees and HMM profile-profile techniques to generate alignments. Suitable for medium-large alignments.2\n\ndefault substitutionMatrix: \"Gonnet\"; other options: \"BLOSUM30\", \"BLOSUM40, \"BLOSUM50\", \"BLOSUM65\" and \"BLOSUM80\".\n\nmsaMuscle - Accurate MSA tool, especially good with proteins. Suitable for medium alignments.2\n\ncluster parameter can be either NJ (\"neighborjoining\") or UPGMA (\"upgma\") - UPGMA gives better results 3\n\nmsa - you can set the method with the argument method or just put the sequences and use the default (\"Clustalw\") (other options: \"ClustalOmega\", \"Muscle\")\n\nAdd verbose = T so that the parameters used are printed to the screen and you can take not for your publications."
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#running-msa",
    "href": "r/R_bioinformatics_basics.html#running-msa",
    "title": "R for bioinformatics - basics",
    "section": "Running MSA",
    "text": "Running MSA\n\n# The dataset used as example has 48 sequences, we will subset it for the alignment, selecting only 10\nfasta_for_alignment &lt;- fasta_input[1:10]\n# use ?msa to know what you need to put in the function and what the default values are\nmyFirstAlignment &lt;- msa(fasta_for_alignment, \n            method = \"ClustalOmega\",\n            verbose = T\n)\n\nparams: clustalo --R -o tempClustalOmega.aln --outfmt=clustal --seqtype=protein --force --gapopen=6.000000 --gapext=1.000000 --cluster-size=100 --iter=0 --output-order=tree-order\nusing Gonnet\n\nmyFirstAlignment\n\nClustalOmega 1.2.0 \n\nCall:\n   msa(fasta_for_alignment, method = \"ClustalOmega\", verbose = T)\n\nMsaAAMultipleAlignment with 10 rows and 780 columns\n     aln                                                   names\n [1] -------------------------...------------------------- 5BPOR Digitalis l...\n [2] -------------------------...----------ATYAQPST------- IGS1 Petunia hybrida\n [3] -------------------------...----------AAF------------ EGS1 Ocimum basil...\n [4] -------------------------...------------------------- PILR2 Linum usita...\n [5] -------------------------...------------------------- IFR Medicago sativa\n [6] -------------------------...------------------------- IFRH Nicotiana gl...\n [7] MVGSIVGSNMAATDARFLSSNFGNS...ELVAHLPDKANNYLTPALSVLEKNT HC173 Arabidopsis...\n [8] -------------------------...------------------------- ADH1 Catharanthus...\n [9] -------------------------...------------------------- ADH1 Euphorbia la...\n[10] -------------------------...------------------------- ADRC1 Arabidopsis...\n Con -------------------------...------------------------- Consensus \n\n\n\n\n\n\n\n\nVisualizing the result\n\n\nJust calling the MSA result will not show the whole alignment. For that you can use print()\nprint(myFirstAlignment, show = \"complete\", showConsensus = T)"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#use-ggmsa-for-visualization",
    "href": "r/R_bioinformatics_basics.html#use-ggmsa-for-visualization",
    "title": "R for bioinformatics - basics",
    "section": "Use ggmsa for visualization",
    "text": "Use ggmsa for visualization\nTo see the alignment as a plot, we can use ggmsa.\n\n\n\n\n\n\nWe need to change the type of object of the alignment result, as ggmsa only accepts \"AAMultipleAlignment\" objects\n\n\n\n\n# The original result is of class MsaAAMultipleAlignment\nmyFirstAlignment2 &lt;- myFirstAlignment # keep the original, make a copy to modify it\nclass(myFirstAlignment2) &lt;-  \"AAMultipleAlignment\"\n\n# We will plot only a part of the alignment - from the AA 220 to the AA 250 - so it is visible \nggmsa(myFirstAlignment2, \n      start = 220, end = 250, \n      seq_name = T)\n\n\n\n# We can see also the consensus highlighted\nggmsa(myFirstAlignment2, \n      start = 220, end = 250, \n      seq_name = T, consensus_views = T)\n\n\n\n# Remove the # below if you want to save the figure\n#ggsave(\"First_alignment_consensus_220_250.tiff\")"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#more-ggmsa-options",
    "href": "r/R_bioinformatics_basics.html#more-ggmsa-options",
    "title": "R for bioinformatics - basics",
    "section": "More ggmsa options",
    "text": "More ggmsa options\n\nResidue sizeSeqLogoConsensus as bar graph\n\n\nWe can set the width of the characters (use char_width = #), so the residues are not so big\n\nggmsa(myFirstAlignment2, \n      start = 220, end = 250, \n      seq_name = T, char_width = 0.5)\n\n\n\n\n\n\nA seqlogo is a plot with letters on top of each other representing their frequency at each position in the alignment. The bigger a letter, the more frequent it is at a given position. - We can add this plot with + geom_seqlogo() - you can use different color schemes with geom_seqlogo(color = #)1 - you can set your color scheme with geom_seqlogo(custom_color = data.frame)1\n\nggmsa(myFirstAlignment2, \n      start = 220, end = 250, \n      seq_name = T, char_width = 0.5) + \n    geom_seqlogo() \n\n\n\n# Note that the gaps are also represented in the seqlogo!\n\n\n\n\n\n\n\n1 Check the options with ?geom_seqlogo\n\n\n\n\n\n\nggmsa(myFirstAlignment2, \n      start = 220, end = 250, \n      seq_name = T, char_width = 0.5) + \n    geom_seqlogo() +\n    geom_msaBar()"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#make-a-phylogenetic-tree",
    "href": "r/R_bioinformatics_basics.html#make-a-phylogenetic-tree",
    "title": "R for bioinformatics - basics",
    "section": "Make a phylogenetic tree",
    "text": "Make a phylogenetic tree\nLearn what is necessary to make a tree, how to read it and what conclusions you can and cannot draw from them.\n\nSequences used for the tree are the leaves/tips.\nThe point where the tree starts (the center if it is circular, or the first tip to separate from the rest of the tree) is the root\nThe lines drawing the tree are the branches/edges.\nGoing from the leaves to the root, the point where two branches connect is called a node"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#compute-the-distance-matrix",
    "href": "r/R_bioinformatics_basics.html#compute-the-distance-matrix",
    "title": "R for bioinformatics - basics",
    "section": "Compute the distance matrix",
    "text": "Compute the distance matrix\nWe will use ape and seqinr to create a tree from the alignment. But we need to, again, transform the type of object we got from the msa.\nThen we calculate a distance matrix.\n\n\n\n\n\n\nA distance matrix shows how different each sequence is from the others. It has as many rows as columns, since every sequence is compared to the others.\nIts diagonal is all 0s, since the difference between a sequence and itself is 0.\n\n\n\n\nmyFirstAlignment3 &lt;- \n    msaConvert(x = myFirstAlignment,\n           type = \"seqinr::alignment\")\n\n# Then, we create a distance matrix\ndistance_alignment &lt;- \n    dist.alignment(x = myFirstAlignment3)"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#tree-computation",
    "href": "r/R_bioinformatics_basics.html#tree-computation",
    "title": "R for bioinformatics - basics",
    "section": "Tree computation",
    "text": "Tree computation\nThen, we use the distance matrix to compute the tree, joining sequences most similar, then joining groups of sequences. Each method of computing will do this joining differently.\n\nnjbionjfastmeUPGMA/WPGMA\n\n\nThis function performs the neighbor-joining tree estimation of Saitou and Nei (1987).\n\nnj(X = distance_alignment) %&gt;% plot(main = \"ape::nj()\")\n\n\n\nnj(X = distance_alignment) %&gt;% \n    plot(main = \"phangorn::NJ()\")\n\n\n\n\n\n\nThis function performs the BIONJ algorithm of Gascuel (1997).\n\nbionj(X = distance_alignment) %&gt;% plot(main = \"ape::bionj\")\n\n\n\nUNJ(distance_alignment) %&gt;% plot(main = \"phangorn::UNJ\")\n\n\n\n\n\n\nThe two FastME (fast minimum evolution) functions (balanced - bal - and ordinary least-squares - ols) perform the minimum evolution algorithm of Desper and Gascuel (2002).\n\nfastme.bal(distance_alignment) %&gt;% plot(main = \"FastME BAL\")\n\n\n\nfastme.ols(distance_alignment) %&gt;% plot(main = \"FastME OLS\")\n\n\n\n\n\n\n\nUPGMA: uses the function hclust (hierarchical clustering) with method = \"average\", then transforms the dendrogram into the class phylo.\nWPGMA: uses the function hclust with method = \"mcquitty\", then transforms the dendrogram into the class phylo.\n\nRun ?hclust then look the section “Details”: the methods are explained with more details with references.\n\nupgma(distance_alignment) %&gt;% plot(main = \"UPGMA\")\n\n\n\nwpgma(distance_alignment) %&gt;% plot(main = \"WPGMA\")"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#customizing-the-plot",
    "href": "r/R_bioinformatics_basics.html#customizing-the-plot",
    "title": "R for bioinformatics - basics",
    "section": "Customizing the plot",
    "text": "Customizing the plot\nWe can use dplyr to separate protein and species names ggplot to plot the tree and the labels separately, and finally join tree and labels with ggarrange.\n\nGet the treePrepare the labelsPlot the labels\n\n\n\nupgma_tree &lt;- upgma(distance_alignment)\n# We save the tree in a object so we can access the leaf labes with $tip.label\n\n\n\nWe will use a function called parse to italicize only the species name. It evaluates the text and executes functions inside it! Example, in:\n\"'TYDC '~italic('Narcissus pseudonarcissus')\"\nThe texts 'TYDC ' and 'Narcissus pseudonarcissus' (in italic) are joined by the symbol ~.\nIn this case, the protein name has just letters and numbers and is at the start of the sequence name, followed by the species name. So we can use gsub to create the label we want.\n\nSeqnames_tree &lt;- \n    gsub(\"(\\\\w+) (.+)\", \n         \"'\\\\1 '~italic('\\\\2')\",\n         upgma_tree$tip.label)\nupgma_tree$tip.label &lt;- Seqnames_tree\n\n\n\n\n\n\n\nCheck the result before plotting. See that your result looks like the example with TYDC above, as you need to use both double and single quotes.\n\n\n\n\n\n\nggtree(upgma_tree) +\n    # use geom_tiplab to plot the seqnames\n    # add parse = T so R executes the function inside the text\n    geom_tiplab(parse = T) +\n    xlim(c(0, 0.7)) \n\n\n\n    # the upper x limit may change depending on the length of your labels, play around until you get the whole label but little empty space"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#more-customization",
    "href": "r/R_bioinformatics_basics.html#more-customization",
    "title": "R for bioinformatics - basics",
    "section": "More customization",
    "text": "More customization\nLet’s say you want to add bars marking different groups in a tree, like the vertical bars marking the clades in the figure below (Figure 3 in Hori et al. 2006:\n\n\nIdentify the nodesMark groupsHighlight groups\n\n\nJust as we added the names of the leaves, we can add the names of the nodes with geom_text(aes(label=node))\nWe may need to play around with the hjust, which goes after aes(), inside geom_text()\n\nggtree(upgma_tree) +\n    geom_text(aes(label = node), hjust = -.2) +\n    geom_tiplab(parse = T, hjust = -.15) +\n    xlim(c(0, 0.8))\n\n\n\n\n\n\nIn our example tree, there are 2 main groups: nodes 12 and 13. We can use the functiongeom_cladelabel to mark each one\n\n\n\n\n\n\nThere is also geom_cladelab, but you cannot change the color of the text with it\n\n\n\n\nggtree(upgma_tree) +\n    # we do not need the line below anymore\n    #geom_text(aes(label = node), hjust = -.2) +\n    geom_tiplab(parse = T) +\n    geom_cladelabel(node = 12, label = \"Node 12\",\n            color = \"red\", offset = .35) +\n    geom_cladelabel(node = 13, label = \"Node 13\",\n            color = \"green4\", offset = .35,\n            barsize = 2) +\n    xlim(c(0, .9))\n\n\n\n\n\n\nYou can draw a rectangle around the node and its branches using geom_highlight\n\nggtree(upgma_tree) +\n    # we do not need the line below anymore\n    #geom_text(aes(label = node), hjust = -.2) +\n    geom_tiplab(parse = T) +\n    geom_highlight(node = 12,\n               fill = \"red\") +\n    # change the transparency of the rectangle with alpha\n    geom_cladelabel(node = 13, label = \"Node 13\",\n            color = \"green4\", offset = .35,\n            barsize = 2) +\n    xlim(c(0, .9))"
  },
  {
    "objectID": "r/R_bioinformatics_basics.html#resources",
    "href": "r/R_bioinformatics_basics.html#resources",
    "title": "R for bioinformatics - basics",
    "section": "Resources",
    "text": "Resources\n\nMultiple sequence alignment in R - msa\nape: phylogenetic trees\nggmsa\nggtree\nphangorn"
  },
  {
    "objectID": "r/Working_with_your_data.html#datasets-and-scripts",
    "href": "r/Working_with_your_data.html#datasets-and-scripts",
    "title": "Working with your data - Elisa",
    "section": "Datasets and scripts",
    "text": "Datasets and scripts\n\nGo to the github page to get the scripts and datasets: github.com/KarenGoncalves/R_class_examples\n\nExcel files need to be downloaded into your computer to be read by R\n\nDownload the scripts. We will go through them and you can add comments and run new commands to test the script and dataset.\n\n\n\n\n\n\n\nFor all datasets, we will use the packages tidyverse and readxl"
  },
  {
    "objectID": "r/Working_with_your_data.html#correcting-original-dataset",
    "href": "r/Working_with_your_data.html#correcting-original-dataset",
    "title": "Working with your data - Elisa",
    "section": "Correcting original dataset",
    "text": "Correcting original dataset\n\nPut each Rep in a separate sheet\nRename column names\nCreate metadata sheet\nCheck what symbol is used to represent NA\nGet correct data here"
  },
  {
    "objectID": "r/Working_with_your_data.html#corrected-dataset",
    "href": "r/Working_with_your_data.html#corrected-dataset",
    "title": "Working with your data - Elisa",
    "section": "Corrected dataset",
    "text": "Corrected dataset"
  },
  {
    "objectID": "r/Working_with_your_data.html#prepare-script",
    "href": "r/Working_with_your_data.html#prepare-script",
    "title": "Working with your data - Elisa",
    "section": "Prepare script",
    "text": "Prepare script\n\nGet script here\n\n#### Install and load packages ####\n# start by creating a vector with all the packages you need\npkgs = c(\"readxl\", \"tidyverse\", \"ggpubr\")\n\n# We check which packages are NOT (!) installed\npkgs.To.Install = ! pkgs %in% installed.packages()\n\n# any() checks if there is at least one TRUE in the vector\nif (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])\n\nfor (curPkg in pkgs) library(curPkg, character.only = T) \n# curPkg is a variable that takes the value of each element in pkgs\n# Every time the function library() is run, curPkg changes value\n\nreadxl - deal with excel file\ntidyverse - prepare, sort, rearrange and plot data\nggpubr - put multiple plots into a single figure"
  },
  {
    "objectID": "r/Working_with_your_data.html#set-basic-variables",
    "href": "r/Working_with_your_data.html#set-basic-variables",
    "title": "Working with your data - Elisa",
    "section": "Set basic variables",
    "text": "Set basic variables\n\nGet script here\nGet data here and save it in your project folder as Inputs/ELISA_YFP_Cys & YPF clones_EF20230330.xls”\n\n#### Set basic variables ####\n# Set the name of the input file and\nElisaFile = \"Inputs/ELISA_YFP_Cys & YPF clones_EF20230330.xls\"\ncolumnNames = c(\"chlorophyll_pos\", \"YFP_pos\", \"Mean_YFP_pos\")\ncolors = c(\"black\", \"blue\", \"forestgreen\",\n       \"red\", \"magenta\", \"orange\") # six \n       colors for the six technical replicates\nchlorophyll_threshold = 75 # Minimum % of chlorophyll positive cells (decided by data provider - Elisa)\nsheetsElisa = excel_sheets(ElisaFile) # List of sheet names"
  },
  {
    "objectID": "r/Working_with_your_data.html#read-the-excel-file",
    "href": "r/Working_with_your_data.html#read-the-excel-file",
    "title": "Working with your data - Elisa",
    "section": "Read the excel file",
    "text": "Read the excel file\nWe will use the function lapply to create a list containing each of the sheets in the input file\nThink of lapply as a for loop: repeat the same function for a list of objects and returns the output of each one as an element of a list\nlapply(list, function(variable_name))\n\nfunction can be directly the function you want to apply\n\nlapply(iris[, 1:4], mean) # calculate the mean for each column\n\nfunction(variable_name) or \\(variable_name) is useful when you need to use a variable name in function\n\nlapply(1:4, function(variable_name) mean(iris[,variable_name]))\nIf the function we want to apply spans several lines, we put it in {}\n\n\n#### Read input file and prepare it ####\nElisa_Chlorophyll_YFP = lapply(sheetsElisa, \\(sheet) {\n    # All the sheets will be saved into a list\n    currentSheet = read_excel(ElisaFile, sheet = sheet, na = \"n/a\")\n    if (sheet != \"Metadata\") { # Just execute the code inside the {} if sheet is not \"Metadata\"\n        # Create a column to indicate the technical replicates (name of the sheet)\n        currentSheet$Technical_replicate = sheet\n        # And indicate that the first column has the clone names\n        names(currentSheet)[1] = \"Clone\"\n    }\n    currentSheet\n})\n\nnames(Elisa_Chlorophyll_YFP) = sheetsElisa"
  },
  {
    "objectID": "r/Working_with_your_data.html#manipulate-the-data",
    "href": "r/Working_with_your_data.html#manipulate-the-data",
    "title": "Working with your data - Elisa",
    "section": "Manipulate the data",
    "text": "Manipulate the data\n\ndo.callsapplypatternifelse\n\n\n\n!= - comparison, means NOT EQUAL TO\ndo.call is used here to join the elements of a list using the function “rbind”\n\nrbind will BIND data.frames by Rows (one table is pasted under the the other)\n\n\n\n# Specify which sheet doesn't contain measurements\nnotMetadata = sheetsElisa != \"Metadata\"\n# Put all the sheets containing measurements into one table\nElisa_Chlorophyll_YFP_all = \n    do.call(what = \"rbind\", Elisa_Chlorophyll_YFP[notMetadata])\n\n\n\nsapply - same as lapply, but the result is a named vector OR named list\n\nif you expect a list or data.frame, test first to see if you get the expected output format, if not, use lapply\n\nYou can select elements of a named list as: named.list$element1 or named.list[[element1]] or named.list[[1]]\ngsub(\"_\\\\d+$\", \"\", cloneName) no matter the value of “cloneName”, we remove the number of the clone:\n\ncheck the tab pattern\n\n\n# Create a column with the construct name\nElisa_Chlorophyll_YFP_all$Construct = \n    sapply(Elisa_Chlorophyll_YFP_all$Clone, \\(cloneName) {\n        # Remove the underscore and number from the clone name to get the construct\n        pattern = paste0(\"^\", gsub(\"_\\\\d+$\", \"\", cloneName), \"$\")\n        # Get the construct name from the metadata\n        cloneGroup = grep(pattern, Elisa_Chlorophyll_YFP$Metadata$Name)\n        construct = Elisa_Chlorophyll_YFP$Metadata$Type[cloneGroup]\n        # If the construct name in the metadata has the word negative, replace the name with EV\n        ifelse(grepl(\"Negative\", construct), \"EV\", construct)\n    }) |&gt;\n    factor(levels = c(\"EV\", \"YFP\", \"PtCys_YFP\"))\n\n\nRegular expression is a way to work with text\n\ngrep - similar to CTRL+F\ngsub/sub - similar to replace or CTRL+H\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)\n\n\n\n\ngrepl - returns TRUE if the pattern is found, FALSE if not\nifelse: if TRUE, do this, else do that (si VRAI, fait ça, sinon fait une autre chose)\nThus: IF the word “Negative” is found in the variable ‘construct’, return “EV”, if not return the variable ‘construct’"
  },
  {
    "objectID": "r/Working_with_your_data.html#plots",
    "href": "r/Working_with_your_data.html#plots",
    "title": "Working with your data - Elisa",
    "section": "Plots",
    "text": "Plots\n\nPlot labelsPlots (lapply)\n\n\nMake a vector with the labels of the y-axis for each plot, naming the elements so that we can select them\nyLabs = c(chlorophyll = \"Chlorophyll-positive cells (%)\",\n      YFP = \"YFP-positive cells (%)\")\nyLabs[\"chlorophyll\"]\n\n\nplots = lapply(c(\"chlorophyll\", \"YFP\"), \\(plotName) {\n    # column is either chlorophyll_pos or YFP_pos\n    colName = paste0(plotName, \"_pos\")\n    \n    # Make vector with the names of the columns to use in the plot\n    selectedCols = c(\"Construct\", \"Technical_replicate\", colName)\n    plotData = Elisa_Chlorophyll_YFP_all[, selectedCols]\n    # We rename the column with values to plot so that we can select it in ggplot \n    names(plotData)[3] =  \"column\" \n    \n    ggplot(plotData, \n           aes(x = Construct, \n               y = column, \n               color = Technical_replicate)) + \n        geom_point(position = \"jitter\", size = 0.5) +\n        scale_color_manual(values = colors,\n                   name = \"Technical\\nReplicate\") +\n        scale_y_continuous(limits = c(0, 100),\n                   breaks = seq(0, 100, 25)) +\n        labs(x = \"Strain\", y = yLabs[plotName])\n    \n})\n\n# Name the plots in the list\nnames(plots) = paste0(c(\"chlorophyll\", \"YFP\"), \"_all\")\n\ngeom_point(position = \"jitter\", size = 0.5)\n\nposition = \"jitter\": points will be spread (try removing this)\nsize = 0.5: size of each point (choice of size is dependent on total number of points, size of the plot, resolution, check with your data)\n\nscale_color_manual(values = colors, name = \"Technical\\nReplicate\")\n\nColors used will be the ones in the vector colors\n“” means line break, so “Technical” and “Replicate” will be in separate lines\n\nscale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 25))\n\nlimits specifies where the axis starts and ends\nbreaks specifies where the marks in the axis go."
  },
  {
    "objectID": "r/Working_with_your_data.html#anova",
    "href": "r/Working_with_your_data.html#anova",
    "title": "Working with your data - Elisa",
    "section": "ANOVA",
    "text": "ANOVA\nANOVA asks the question: are there differences between the groups?\nTukey (post-hoc test) asks: which groups are different?\n:::{.panel-tabset}"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#basics",
    "href": "unix/Class1_BasicCommands.html#basics",
    "title": "Basic commands",
    "section": "Basics",
    "text": "Basics\n\nCommands are separated by a new line (Enter, Return) or a semicolon (;)\nThe first word in a command is what you are asking the computer to do (a function)\nSpaces are used to separate file names, commands, etc.\nSome commands allow you to customize their output with options\n\nThese are single letters, a word, or several words preceded by - or --\n\nYou can get help for a command by using the help option (either -h , --help ) or the command man (for manual)\n\n\n\nls --help\nman ls"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#about-spaces-and-file-names",
    "href": "unix/Class1_BasicCommands.html#about-spaces-and-file-names",
    "title": "Basic commands",
    "section": "About spaces and file names",
    "text": "About spaces and file names\nPut name in quotes if it has spaces (test code below)\ntouch Programming Class.txt\nls\n\ntouch \"Programming Class.txt\"\nls\nQuotes are NORMALLY (not always) interchangeable (test code below)\necho \"This is good\"\necho 'This is good'\nDo not start with one quote type and end with another"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#shortcuts---part-1",
    "href": "unix/Class1_BasicCommands.html#shortcuts---part-1",
    "title": "Basic commands",
    "section": "Shortcuts - part 1",
    "text": "Shortcuts - part 1\n\n~ or $HOME : your home folder (can be defined by the user)\n. : the folder that you are currently in\n..: the folder that contains the one you are currently in\nCtrl+C: cancel a command\nIn MobaxTerm, find and modify useful shortcuts by clicking on Settings -&gt; Keyboard shortcuts"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#shortcuts---part-2",
    "href": "unix/Class1_BasicCommands.html#shortcuts---part-2",
    "title": "Basic commands",
    "section": "Shortcuts - part 2",
    "text": "Shortcuts - part 2\n\nwhoami\n\nprints your username (if saved in the computer)\n\nUse tab to complete words\nIn a current command or in a text file, move the cursor faster by using Ctrl+Arrow (right or left arrow in a command line, in a text file up and down arrow too) (this works everywhere!!!)"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#basic-commands---part-1",
    "href": "unix/Class1_BasicCommands.html#basic-commands---part-1",
    "title": "Basic commands",
    "section": "Basic commands - part 1",
    "text": "Basic commands - part 1\n\ncd\n\nacronym for “change directory” (directory = folder)\nIf used alone, opens your home folder\nThe name of the folder to which you want to go comes after cd\n\ncd , cd ~ and cd $HOME are synonyms\n\ncd - - takes you to the previous folder"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#basic-commands---part-2",
    "href": "unix/Class1_BasicCommands.html#basic-commands---part-2",
    "title": "Basic commands",
    "section": "Basic commands - part 2",
    "text": "Basic commands - part 2\n\npwd\n\nacronym for “print working directory” (directory = folder)\nequivalent to the R function getwd() or python’s os.getcwd()\nprints the full path to your current folder\nA full path always starts from the root (/)"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#basic-commands---part-3",
    "href": "unix/Class1_BasicCommands.html#basic-commands---part-3",
    "title": "Basic commands",
    "section": "Basic commands - part 3",
    "text": "Basic commands - part 3\n\nls\n\nlists the contents of your current folder\nCheck slide 2 where we used this command\n\nUse &gt; after a command to save the output\n\npwd &gt; myFolder\ncat myFolder\n\nUse &gt;&gt; to add the current output to a previous file\n\nls &gt;&gt; myFolder\ncat myFolder"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-text-files---part-1",
    "href": "unix/Class1_BasicCommands.html#managing-text-files---part-1",
    "title": "Basic commands",
    "section": "Managing text files - part 1",
    "text": "Managing text files - part 1\n\ncat : prints the contents of the file to the screen (check slide 9\n\nDo not use it with files are that not text (images, pdfs, compressed files) or is too big\nIf several files names are put after the command, one file is printed followed by the next (conCATenation)\n\nhead and tail: prints to the screen the first/last 10 lines of the file"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-text-files---part-2",
    "href": "unix/Class1_BasicCommands.html#managing-text-files---part-2",
    "title": "Basic commands",
    "section": "Managing text files - part 2",
    "text": "Managing text files - part 2\n\nless : opens the file as “read-only”\n\nSearch for a word in a file inside less by typing “/” followed by the word\nTo close less, press Q\n\nmore : opens the file as “read-only”, when the file is closed, prints it to the screen"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-text-files---part-3",
    "href": "unix/Class1_BasicCommands.html#managing-text-files---part-3",
    "title": "Basic commands",
    "section": "Managing text files - part 3",
    "text": "Managing text files - part 3\n\nnano : open a text file to edit it.\ngrep : searches for a word/phrase in the file and prints the lines that match\n\nCan search for several phrases (one per line) in a file by using the option -f\nIf you don’t care about the upper/lower case, use the option -i or --ignore-case"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-text-files---part-4",
    "href": "unix/Class1_BasicCommands.html#managing-text-files---part-4",
    "title": "Basic commands",
    "section": "Managing text files - part 4",
    "text": "Managing text files - part 4\nSearch for lines that have the word programming in the file myFolder created in slide 9\ngrep \"Programming\" myFolder\n\nwc : word count. Counts the number of characters, words and lines in a file\necho : repeats the text that follows it (check slide 4)"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#exercise",
    "href": "unix/Class1_BasicCommands.html#exercise",
    "title": "Basic commands",
    "section": "Exercise",
    "text": "Exercise\n\nSave a fasta file into your home folder with the name myFasta.fa\nUse grep to find all the lines with sequence IDs.\n\nNote - put the word or phrase you will search for inside \"\""
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#exercise---solution",
    "href": "unix/Class1_BasicCommands.html#exercise---solution",
    "title": "Basic commands",
    "section": "Exercise - Solution",
    "text": "Exercise - Solution\n\nSave a fasta file into your home folder with the name myFasta.fa\nUse grep to find all the lines with sequence IDs.\n\nNote - put the word or phrase you will search for inside \"\"\n\n\n\n\n# In all fasta files, the sequence ID line is indicated by the symbol &gt;, so we just need to look for it\ngrep \"&gt;\" myFasta.fa\n\n\n\nNormally, if you just search for one word, the quotes are not needed, by in this case, the symbol \"&gt;\" could also mean “send the output to”, which would replace the myFasta.fa file"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-files---part-1",
    "href": "unix/Class1_BasicCommands.html#managing-files---part-1",
    "title": "Basic commands",
    "section": "Managing files - part 1",
    "text": "Managing files - part 1\n\ncp : acronym for copy\n\ncp file file2 : creates a copy of the file “file” and saves it in the file “file2”\ncp file folder : creates a copy of the file “file” and saves it with the same name in the folder “folder”\ncp file file2 folder: both files “file” and “file2” are copied into the folder “folder” with the same names\ncp folder folder2 -r : the option -r allows the copy of the entire folder.\n\nIf folder2 doesn’t exist, it will be created to hold the same files as “folder”\nIf folder2 exists, a copy of “folder” will be created inside of folder2"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-files---part-2",
    "href": "unix/Class1_BasicCommands.html#managing-files---part-2",
    "title": "Basic commands",
    "section": "Managing files - part 2",
    "text": "Managing files - part 2\n\nmv : acronym for move. Move file from one place to another\n\nmv file file2 : renames “file” as “file2”\nmv file folder : moves “file” into the folder “folder”\nmv file file2 folder: both files “file” and “file2” are moved into the folder “folder” with the same names\nmv folder folder2 :\n\nIf folder2 doesn’t exist, it is the same as renaming “folder” as “folder2”\nIf folder2 exists, “folder” is moved to that folder"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-files---part-3",
    "href": "unix/Class1_BasicCommands.html#managing-files---part-3",
    "title": "Basic commands",
    "section": "Managing files - part 3",
    "text": "Managing files - part 3\n\nrm : acronym for remove. Deletes files. They are PERMANENTELY deleted, there is no trash bin here!!!!!!!\n\nrm file file2 : deletes both files\nrm file file2 -i : asks the user if they really want to delete each file, if y is pressed, the file is deleted (-i for interactive)"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#managing-folders",
    "href": "unix/Class1_BasicCommands.html#managing-folders",
    "title": "Basic commands",
    "section": "Managing folders",
    "text": "Managing folders\n\nmkdir : acronym for “make directory”. Creates new folders with the specified names.\n\nGives an error if something with the same name already exists in the current folder.\nIf many names are given (separated by spaces, creates all names folders)\n\nrmdir : acronym for “remove directory”. Deletes empty folders.\n\nIf the folder is not empty, gives an error.\nIf many names are given (separated by spaces, deletes all names folders if they are empty\n\nrm -r folder : as in cp, the option -r allows the rm to work with a folder. It deletes everything in the folder, then deletes the folder itself"
  },
  {
    "objectID": "unix/Class1_BasicCommands.html#resources-for-help",
    "href": "unix/Class1_BasicCommands.html#resources-for-help",
    "title": "Basic commands",
    "section": "Resources for help",
    "text": "Resources for help\nGlossary of commands\nBook on basic unix commands"
  },
  {
    "objectID": "unix/Class3_runningJobs.html#run-jobs",
    "href": "unix/Class3_runningJobs.html#run-jobs",
    "title": "Class 3 - Running Jobs",
    "section": "Run jobs",
    "text": "Run jobs\nCannot run/execute any of those commands from ~\nThe three possibilities:\n\nsrun - Use to submit a script to be executed in real time (the process of running the job will be printed in the screen instead of saved into a file)\nsbatch - Use to submit a script to be executed later\nsalloc - Use to allocate resources for a job in real time.\n\nBasically, you ask for memory and CPUS for a determinate amount of time and when the “allocate” the resources to you, you work in real time in a computer more potent than yours."
  },
  {
    "objectID": "unix/Class3_runningJobs.html#run-jobs---srun",
    "href": "unix/Class3_runningJobs.html#run-jobs---srun",
    "title": "Class 3 - Running Jobs",
    "section": "Run jobs - srun",
    "text": "Run jobs - srun\nsrun NEEDED_INFO script/command\n\nBefore running srun, need to load software required need to the session\n\nAdding module load software to the script does not work\n\nInformation needed\n\n--account=acount_name - def-laboidp or def-desgagne or def-germain1\n--time=d-HH:MM:SS - time required for the script, eg. 12hs: --time=12:00:00\n--mem=1G - memory required (here, 1G, default 254M)"
  },
  {
    "objectID": "unix/Class3_runningJobs.html#srun---exammple",
    "href": "unix/Class3_runningJobs.html#srun---exammple",
    "title": "Class 3 - Running Jobs",
    "section": "srun - exammple",
    "text": "srun - exammple\n\n\nmodule load StdEnv/2020 blast+ # load the softwares\ncd $SCRATCH\n\nsrun --account=def-desgagne --time=01:00:00 --mem=1024M\\\n blastp -query prots.fasta\\\n -db $myDatabase\\\n -out prots_Databased.txt\\\n -outfmt '7' # output in table format\n\n\n\nThe file prots.fasta is in the current folder, or its path is given in full\n\nsame for the output prots_Database.txt\n\nWhen you use \\ to separate one command in several lines, add a space in the next line to separate the words"
  },
  {
    "objectID": "unix/Class3_runningJobs.html#note-on-blast",
    "href": "unix/Class3_runningJobs.html#note-on-blast",
    "title": "Class 3 - Running Jobs",
    "section": "Note on blast",
    "text": "Note on blast\n\n$myDatabase\n\nAdd the full path, without the extension\nUse right type of database (the first letter of the extension indicates the type of database)\n\n.p* - protein database\n.n* - nucleotide database"
  },
  {
    "objectID": "unix/Class3_runningJobs.html#run-jobs---sbatch",
    "href": "unix/Class3_runningJobs.html#run-jobs---sbatch",
    "title": "Class 3 - Running Jobs",
    "section": "Run jobs - sbatch",
    "text": "Run jobs - sbatch\nsbatch script or sbatch NEEDED_INFO script\n\nUsed to submit a script to be executed later.\nEssentials for the script:\n\nFirst line indicates the program that translates the script to computer language: #!/bin/sh\nLines starting with #SBATCH tell the scheduler what we need for this job"
  },
  {
    "objectID": "unix/Class3_runningJobs.html#sbatch---script-example",
    "href": "unix/Class3_runningJobs.html#sbatch---script-example",
    "title": "Class 3 - Running Jobs",
    "section": "sbatch - script example",
    "text": "sbatch - script example\n\n\n#!/bin/sh\n#SBATCH --account=def-desgagne\n#SBATCH --time=01:00:00 \n#SBATCH --mem=1024M\n\nmodule load StdEnv/2020 blast+\n\nmyDatabase=/database/path\n\ncd $SCRATCH\n\nblastp -query prots.fasta\\\n -db $myDatabase\\\n -out prots_Databased.txt\\\n -outfmt '7' # output in table format\n\n\n\nNote that here the “module load” line is INSIDE the script"
  },
  {
    "objectID": "unix/Class3_runningJobs.html#run-jobs---salloc",
    "href": "unix/Class3_runningJobs.html#run-jobs---salloc",
    "title": "Class 3 - Running Jobs",
    "section": "Run jobs - salloc",
    "text": "Run jobs - salloc\nsalloc - salloc NEEDED_INFO\n\nUsed to allocate resources for a job in real time.\nBasically, you ask for memory and CPUS for a determinate amount of time and when the “allocate” the resources to you, you work in real time in a computer more potent than yours."
  },
  {
    "objectID": "unix/Class3_runningJobs.html#resources",
    "href": "unix/Class3_runningJobs.html#resources",
    "title": "Class 3 - Running Jobs",
    "section": "Resources",
    "text": "Resources\n\nHow to run jobs"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---print-specific-columns",
    "href": "unix/Class5_AWK.html#awk---print-specific-columns",
    "title": "Class 5 - AWK command",
    "section": "AWK - print specific columns",
    "text": "AWK - print specific columns\n\nAlways put commands inside single quotes ''\nUse {print} to indicate lines or columns you want to see\nIndicate a column number using $N (replace N with the number)\nIf you want to see several columns, separate them with a ,:\n\n{print $N,$X}\n\nTo indicate the whole line, use $0"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---print-specific-columns-1",
    "href": "unix/Class5_AWK.html#awk---print-specific-columns-1",
    "title": "Class 5 - AWK command",
    "section": "AWK - print specific columns",
    "text": "AWK - print specific columns\n# Print second column of the file blastp_results.txt\nawk '{print $2}' blastp_results.txt\n# Print second and third columns of the file blastp_results.txt\nawk '{print $2,$3}' blastp_results.txt"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---print-line-with-specific-word",
    "href": "unix/Class5_AWK.html#awk---print-line-with-specific-word",
    "title": "Class 5 - AWK command",
    "section": "AWK - print line with specific word",
    "text": "AWK - print line with specific word\nInside the '' add the word your searching for in //\n# Print lines containing \"#\" in blastp_results.txt\nawk '/#/ {print}' blastp_results.txt\n\n# Print lines NOT containing \"#\" in blastp_results.txt\nawk '!/#/ {print}' blastp_results.txt\n\nNote that when you do not specify the column, or when you use $0, you print the whole line"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---indicate-how-to-read-the-input-and-write-the-output",
    "href": "unix/Class5_AWK.html#awk---indicate-how-to-read-the-input-and-write-the-output",
    "title": "Class 5 - AWK command",
    "section": "AWK - indicate how to read the input and write the output",
    "text": "AWK - indicate how to read the input and write the output\n\nNR - number of records (normally number of lines):\n\nawk 'NR &gt; 1 {print}' blastp_results.txt\n\nwill print all but the first line\n\nawk 'NR == 1 {print $1} NR &gt; 1 {print $2}' blastp_results.txt\n\nwill print the first column for line 1 and the second column for the other lines\n\n\nNF - number of fields (normally columns):\n\nawk '{print $NF}' blastp_results.txt\n\nwill print the last column the file"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---indicate-how-to-read-the-input-and-write-the-output-1",
    "href": "unix/Class5_AWK.html#awk---indicate-how-to-read-the-input-and-write-the-output-1",
    "title": "Class 5 - AWK command",
    "section": "AWK - indicate how to read the input and write the output",
    "text": "AWK - indicate how to read the input and write the output\nNote the these can be specified by adding BEGIN {}:\n\nFS - field separator - column delimiter\n\nawk 'BEGIN {FS=\",\"} {print $2}' blastp_results.csv\n\nIndicates the columns in the file blastp_results.csv are separated by commas and asks for the second column\nOutside the '' -F\",\" or --field-separator=\",\" are the same\n\n\nOFS - output field separator - column delimiter for the output\n\nawk 'BEGIN {OFS=\",\"} {print $1,$2,$3}' blastp_results.txt\n\nChanges the separation of columns from space (default for awk) to commas"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---indicate-how-to-read-the-input-and-write-the-output-2",
    "href": "unix/Class5_AWK.html#awk---indicate-how-to-read-the-input-and-write-the-output-2",
    "title": "Class 5 - AWK command",
    "section": "AWK - indicate how to read the input and write the output",
    "text": "AWK - indicate how to read the input and write the output\nNote the these can be specified by adding BEGIN {}:\n\nRS - record separator\n\nawk 'BEGIN {RS=\"&gt;\"} {print $1}' myFasta.fasta\n\nTells awk that new entries are indicated with a “&gt;” symbol\n\n\nORS - record separator for the output\n\nawk 'BEGIN {ORS=\"&gt;\"} {print $1}' myFasta.txt\n\nTells awk that new entries in the output will start with the “&gt;” symbol"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk-example",
    "href": "unix/Class5_AWK.html#awk-example",
    "title": "Class 5 - AWK command",
    "section": "AWK example",
    "text": "AWK example\n\nSequence length\n\nawk 'BEGIN {FS = \"\\n\"; RS=\"&gt;\"}\\\n {print $1, length($2)}' ~/blastClass/myFasta.fasta"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk-example-1",
    "href": "unix/Class5_AWK.html#awk-example-1",
    "title": "Class 5 - AWK command",
    "section": "AWK example",
    "text": "AWK example\n\nChange fasta to a table format\n\nawk 'BEGIN {FS = \"\\n\"; RS=\"&gt;\";\\\n OFS=\"\\t\"; ORS=\"\\n\"}\\\n {print $1,$2}' ~/blastClass/myFasta.fasta"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---replace-word",
    "href": "unix/Class5_AWK.html#awk---replace-word",
    "title": "Class 5 - AWK command",
    "section": "AWK - replace word",
    "text": "AWK - replace word\n\nReplace the letter N in the sequence line by '*'\n\nawk 'BEGIN {FS = \"\\n\"; RS=\"&gt;\"}\\\n {newSeq=gensub(/N/, \"*\", $2); print $1, newSeq}' ~/blastClass/myFasta.fasta"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---print-with-one-condition",
    "href": "unix/Class5_AWK.html#awk---print-with-one-condition",
    "title": "Class 5 - AWK command",
    "section": "AWK - print with one condition",
    "text": "AWK - print with one condition\n\nConditions inside {} come after if and inside () OR they go outside the {}\n\n# Print line if column 3 has a value greater than 80\nawk '{if ($3 &gt; 80) print}' ~/blastClass/myFasta.fasta\n\nOr they go outside the {}\n\n# Print line if column 3 has a value greater than 80\nawk '$3 &gt; 80 {print}' ~/blastClass/myFasta.fasta"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---print-with-multiple-conditions",
    "href": "unix/Class5_AWK.html#awk---print-with-multiple-conditions",
    "title": "Class 5 - AWK command",
    "section": "AWK - print with multiple conditions",
    "text": "AWK - print with multiple conditions\n\nWhen the conditions must all be met, separate them with &&\n\n\n\n# Print line if column 3 has a value greater than 80 AND column 4 has a value greater than 150\nawk '{if ($3 &gt; 80 && $4 &gt; 150) print}' ~/blastClass/myFasta.fasta\n    \n# This also gives the same result\nawk '$3 &gt; 80 && $4 &gt; 150 {print}' ~/blastClass/myFasta.fasta"
  },
  {
    "objectID": "unix/Class5_AWK.html#awk---print-with-multiple-conditions-1",
    "href": "unix/Class5_AWK.html#awk---print-with-multiple-conditions-1",
    "title": "Class 5 - AWK command",
    "section": "AWK - print with multiple conditions",
    "text": "AWK - print with multiple conditions\n\nWhen only one condition must be met, separate them with ||\n\n# Print line if column 3 has a value greater than 80 OR column 4 has a value greater than 150\nawk '{if ($3 &gt; 80 || $4 &gt; 150) print}' ~/blastClass/myFasta.fasta\n\nawk '$3 &gt; 80 || $4 &gt; 150 { print }' ~/blastClass/myFasta.fasta"
  },
  {
    "objectID": "unix/Class5_AWK.html#resources",
    "href": "unix/Class5_AWK.html#resources",
    "title": "Class 5 - AWK command",
    "section": "Resources",
    "text": "Resources\n\nAWK manual\nAWK examples\nAWK cheatsheet\nAWK - working with text"
  },
  {
    "objectID": "useful_R.html",
    "href": "useful_R.html",
    "title": "Useful R commands",
    "section": "",
    "text": "You can get help about a package or function with the function help(). Just put the quoted name of the package/function inside the parenthesis.\nYou can also just use a question mark in front of the package/function name (no quote needed in this case)\nhelp(\"grep\")\n?grepl\n\nhelp(\"stats\")\n?base\n\n\n\n\nseqrep\n\n\nUse the command seq to get a sequence of numbers. You can specify the interval between every number shown. The function is writen as: seq(FROM, TO, INTERVAL)\n\nseq(1, 2, 0.1)\n\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n\n\nIf you want to see every integer between two numbers you can use : or you can omit the interval in the seq command.\n\n# Get very integer between 0 and 10\nseq(0, 10)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n0:10\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n# Get every integer between 0 and 10 in decreasing order\nseq(10, 0)\n\n [1] 10  9  8  7  6  5  4  3  2  1  0\n\n10:0\n\n [1] 10  9  8  7  6  5  4  3  2  1  0\n\n\n\n\nSyntax: rep(X, TIMES, EACH)\n\nX - what you want to repeat: vector of characters, numbers or logical (T/F)\nTIMES: repeat how many times\nEACH: if there is more than one element in WHAT, you repeat the first, then the second…\n\n\n# repeat X (1 in this case) 4 times\nrep(1, 4)\n\n[1] 1 1 1 1\n\n# repeat X (vector c(1, 2)) 4 times\nrep(c(1, 2), 4)\n\n[1] 1 2 1 2 1 2 1 2\n\n# repeat the elements of the input 4 times each\nrep(c(1, 2), each = 4)\n\n[1] 1 1 1 1 2 2 2 2\n\n\n\n\n\n\n\n\n\nstrhead or tailsummaryDimensions\n\n\nSee data structure. Shows number of rows and columns in a data frame, classes of the columns, first few elements of each column.\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\nYou can add the option “max.level = X” if you know the object is nested (list inside of list inside of list) so that you don’t print too many nested levels.\n\n\n\n\n\nShows the beginning or the end of an object (you can specify the number of lines printed with n = X)\n\nhead(iris, n = 7)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n7          4.6         3.4          1.4         0.3  setosa\n\ntail(iris, n = 3)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\n\n\nPrint column-wise info about data frames, shows relevant data from tests, such as aov or t.test.\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\n\n\n\ndim(x)\n\nDimensions of a dataset: For a data frame it is c(1, 2), for a vector it is c(1). -length(x)\nnumber of elements in a vector, or columns in a data frame or elements in a list\n\nncol or nrow\n\nnumber of columns/rows in a data frame\n\nnames\n\nNames of columns of a data frame\nNames of objects in a named list or named vector\n\n\n\ndim(iris)\n\n[1] 150   5\n\nlength(iris)\n\n[1] 5\n\nlength(iris[,1])\n\n[1] 150\n\nncol(iris)\n\n[1] 5\n\nnrow(iris)\n\n[1] 150\n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nmy_numbers = 1:3; names(my_numbers) = c(\"A\", \"B\", \"C\")\nnames(my_numbers)\n\n[1] \"A\" \"B\" \"C\"\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\nColumn separation\nDecimal separation\n\n\n\n\nread.csv\nsep = \",\"\ndec = \".\"\n\n\nread.csv2\nsep = \";\"\ndec = \",\"\n\n\nread.delim\nsep = \"\\t\" (tab)\ndec = \".\"\n\n\nread.delim2\nsep = \"\\t\" (tab)\ndec = \",\"\n\n\n\n\n\n\n\n\n\n\nSum, mean and medianStandard deviation, variance and interquantile range\n\n\nYou can obtain the sum, mean and median by calling the functions sum(), mean(), median(), respectively. You need to include na.rm=T to obtain the estimate when you have missing values in the data.\n\nnumeric_vector = c(iris$Sepal.Length, NA, NA)\nsum(numeric_vector)\n\n[1] NA\n\nsum(numeric_vector, na.rm = T)\n\n[1] 876.5\n\nmedian(numeric_vector)\n\n[1] NA\n\nmedian(numeric_vector, na.rm = T)\n\n[1] 5.8\n\nmean(numeric_vector)\n\n[1] NA\n\nmean(numeric_vector, na.rm = T)\n\n[1] 5.843333\n\n\n\n\nFor the data dispersion, you can use the functions sd() (standard deviation), var() (variance) and IQR() (interquantile range). Remember to use na.rm=T.\n\n\n\n\n\n\nVariance calculation\n\n\n\nVariance = \\(\\sum\\) \\(( x - mean )^2\\) / N\nWhere\n\nx is each and every value of the input vector\nmean is the mean of the input vector\nN is the length of the input vector\n\n\n\n\n\n\n\n\n\nStandard deviation calculation\n\n\n\nStd.Dev = \\(\\sqrt{Variance}\\)\n\n\n\n\n\n\n\n\nInterquantile range calculation\n\n\n\nIQR(x) = quantile(x, 3/4) - quantile(x, 1/4)\n\n\n\nnumeric_vector = c(iris$Sepal.Length, NA, NA)\nsd(numeric_vector)\n\n[1] NA\n\nsd(numeric_vector, na.rm = T)\n\n[1] 0.8280661\n\nvar(numeric_vector)\n\n[1] NA\n\nvar(numeric_vector, na.rm = T)\n\n[1] 0.6856935\n\n#IQR(numeric_vector) Not accepted when there are NA values\nIQR(numeric_vector, na.rm = T)\n\n[1] 1.3\n\n\n\n\n\n\n\nYou can calculate the sum and mean for each row/column of a numeric data frame with the functions:\n\nSum: colSums and rowSums/rowsum\nMean: colMeans and rowMeans\n\n\n\n\n\n\n# Check what you have in the environment\nls()\n\n[1] \"caption\"         \"cheat_sheet\"     \"colNames\"        \"has_annotations\"\n[5] \"my_numbers\"      \"numeric_vector\" \n\n# remove an object from the environment\nrm(\"cheat_sheet\"); ls()\n\n[1] \"caption\"         \"colNames\"        \"has_annotations\" \"my_numbers\"     \n[5] \"numeric_vector\" \n\n\n\n\n\n# Names of packages installed:\nrownames(installed.packages())\n# Install a package\ninstall.packages(\"tidyverse\")\n\n# Load a package into the R session\nlibrary(tidyverse)\n# OR\nmyPackage = \"tidyverse\"\nlibrary(myPackage, character.only = T)\n\n\n\n\n\nThese are ways to search text without writing the explicitly what you are searching.\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)\n\n\n\n\n\nUse symbol or letter to split a text into a vector (similar to excel’s “text to columns” command)\nExample: arabidopsis genes are named as “AT” chromosome number “G” gene number. So we can separate the gene number from the chromosome number using “G” as the pattern/split.\n\nBasic r: strsplit(x, split)stringr package:\n\n\n\nx is a character vector\nsplit is the symbol/letter that will be used to separate the text\nThe result is a list. If x has 10 elements, the resulting list will have also 10 elements, each one a character vector.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# With strsplit and str_split, in each list, the chromosome number is the first element, the gene number is the second\nstrsplit(x = Arabidopsis_Genes, split = 'G')\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\n\n\nstr_split - same as basic r command strsplit, x is called string and split is called pattern\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\nlibrary(stringr)\nstr_split(string = Arabidopsis_Genes, pattern = \"G\")\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\nstr_split_1 - string has to be a character vector of size 1\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# str_split_1 accepts only one element at a time\n# The result is the same as str_split(string = Arabidopsis_Genes, pattern = \"G\")[[1]]\nstr_split_1(string = Arabidopsis_Genes[1], pattern = \"G\")\n\n[1] \"AT1\"   \"01020\"\n\n\n\nstr_split_fixed(string, pattern, n) - similar to str_split, but the result is a matrix (vector with columns and rows). You need to specify n, the max number of pieces to return for each string from the input\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# str_split_fixed returns a matrix with nrow == length(string) and ncol == n\nstr_split_fixed(string = Arabidopsis_Genes, pattern = \"G\", n = 2)\n\n     [,1]  [,2]   \n[1,] \"AT1\" \"01020\"\n[2,] \"AT1\" \"01030\"\n[3,] \"AT1\" \"01040\"\n\n\n\nstr_split_i(string, pattern, i) - similar to str_split_fixed, but i is used to specify which column we want to keep from the matrix.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# With str_split_i, you specify which part of the string you want to keep after the split\n# If we want to keep just the gene number in this case, we select the second part, the one that comes after \"G\"\nstr_split_i(string = Arabidopsis_Genes, pattern = \"G\", i = 2)\n\n[1] \"01020\" \"01030\" \"01040\"\n\n\n\n\n\n\n\n\nBoth are similar to “CTRL+F”, but have some extra capabilities.\n\nBasic commandSpecifics\n\n\ngrep(pattern, x, fixed = F) where\n\npattern is the word of Regex to search\nx is the character vector or even data.frame in which you are searching\nIf fixed is omitted or F, search will allow regex, else it will take patterns as literal words (meaning \\w will match only \\w, not “any letter, number or _“)\n\n\n\ngrep result is either a vector with the index of the match:\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students)\n\n[1] 1 2 5\n\n# The result is c(1, 2, 5), because the names containing the letter \"a\" are the 1st, 2nd and 5th elements of the input \n\nYou can ask grep to return the matches instead of their indices by adding value = T\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students, value = T)\n\n[1] \"Fadoua\"   \"Arghavan\" \"Valeria\" \n\n\ngrepl returns a vector of the same size as the input with only TRUE or FALSE\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrepl(\"a\", names_students)\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n# Because the question asked is \"is the letter \"a\" in element1, element2... you cannot use the argument `value = T`\n\n\n\n\n\n\n\n\nreadxl package - Part of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  },
  {
    "objectID": "useful_R.html#get-help",
    "href": "useful_R.html#get-help",
    "title": "Useful R commands",
    "section": "",
    "text": "You can get help about a package or function with the function help(). Just put the quoted name of the package/function inside the parenthesis.\nYou can also just use a question mark in front of the package/function name (no quote needed in this case)\nhelp(\"grep\")\n?grepl\n\nhelp(\"stats\")\n?base"
  },
  {
    "objectID": "useful_R.html#sequences-and-repetitions",
    "href": "useful_R.html#sequences-and-repetitions",
    "title": "Useful R commands",
    "section": "",
    "text": "seqrep\n\n\nUse the command seq to get a sequence of numbers. You can specify the interval between every number shown. The function is writen as: seq(FROM, TO, INTERVAL)\n\nseq(1, 2, 0.1)\n\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n\n\nIf you want to see every integer between two numbers you can use : or you can omit the interval in the seq command.\n\n# Get very integer between 0 and 10\nseq(0, 10)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n0:10\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n# Get every integer between 0 and 10 in decreasing order\nseq(10, 0)\n\n [1] 10  9  8  7  6  5  4  3  2  1  0\n\n10:0\n\n [1] 10  9  8  7  6  5  4  3  2  1  0\n\n\n\n\nSyntax: rep(X, TIMES, EACH)\n\nX - what you want to repeat: vector of characters, numbers or logical (T/F)\nTIMES: repeat how many times\nEACH: if there is more than one element in WHAT, you repeat the first, then the second…\n\n\n# repeat X (1 in this case) 4 times\nrep(1, 4)\n\n[1] 1 1 1 1\n\n# repeat X (vector c(1, 2)) 4 times\nrep(c(1, 2), 4)\n\n[1] 1 2 1 2 1 2 1 2\n\n# repeat the elements of the input 4 times each\nrep(c(1, 2), each = 4)\n\n[1] 1 1 1 1 2 2 2 2"
  },
  {
    "objectID": "useful_R.html#overview-data",
    "href": "useful_R.html#overview-data",
    "title": "Useful R commands",
    "section": "",
    "text": "strhead or tailsummaryDimensions\n\n\nSee data structure. Shows number of rows and columns in a data frame, classes of the columns, first few elements of each column.\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\nYou can add the option “max.level = X” if you know the object is nested (list inside of list inside of list) so that you don’t print too many nested levels.\n\n\n\n\n\nShows the beginning or the end of an object (you can specify the number of lines printed with n = X)\n\nhead(iris, n = 7)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n7          4.6         3.4          1.4         0.3  setosa\n\ntail(iris, n = 3)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\n\n\nPrint column-wise info about data frames, shows relevant data from tests, such as aov or t.test.\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\n\n\n\ndim(x)\n\nDimensions of a dataset: For a data frame it is c(1, 2), for a vector it is c(1). -length(x)\nnumber of elements in a vector, or columns in a data frame or elements in a list\n\nncol or nrow\n\nnumber of columns/rows in a data frame\n\nnames\n\nNames of columns of a data frame\nNames of objects in a named list or named vector\n\n\n\ndim(iris)\n\n[1] 150   5\n\nlength(iris)\n\n[1] 5\n\nlength(iris[,1])\n\n[1] 150\n\nncol(iris)\n\n[1] 5\n\nnrow(iris)\n\n[1] 150\n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nmy_numbers = 1:3; names(my_numbers) = c(\"A\", \"B\", \"C\")\nnames(my_numbers)\n\n[1] \"A\" \"B\" \"C\""
  },
  {
    "objectID": "useful_R.html#read.xxx",
    "href": "useful_R.html#read.xxx",
    "title": "Useful R commands",
    "section": "",
    "text": "Function\nColumn separation\nDecimal separation\n\n\n\n\nread.csv\nsep = \",\"\ndec = \".\"\n\n\nread.csv2\nsep = \";\"\ndec = \",\"\n\n\nread.delim\nsep = \"\\t\" (tab)\ndec = \".\"\n\n\nread.delim2\nsep = \"\\t\" (tab)\ndec = \",\""
  },
  {
    "objectID": "useful_R.html#numeric-data-summary",
    "href": "useful_R.html#numeric-data-summary",
    "title": "Useful R commands",
    "section": "",
    "text": "Sum, mean and medianStandard deviation, variance and interquantile range\n\n\nYou can obtain the sum, mean and median by calling the functions sum(), mean(), median(), respectively. You need to include na.rm=T to obtain the estimate when you have missing values in the data.\n\nnumeric_vector = c(iris$Sepal.Length, NA, NA)\nsum(numeric_vector)\n\n[1] NA\n\nsum(numeric_vector, na.rm = T)\n\n[1] 876.5\n\nmedian(numeric_vector)\n\n[1] NA\n\nmedian(numeric_vector, na.rm = T)\n\n[1] 5.8\n\nmean(numeric_vector)\n\n[1] NA\n\nmean(numeric_vector, na.rm = T)\n\n[1] 5.843333\n\n\n\n\nFor the data dispersion, you can use the functions sd() (standard deviation), var() (variance) and IQR() (interquantile range). Remember to use na.rm=T.\n\n\n\n\n\n\nVariance calculation\n\n\n\nVariance = \\(\\sum\\) \\(( x - mean )^2\\) / N\nWhere\n\nx is each and every value of the input vector\nmean is the mean of the input vector\nN is the length of the input vector\n\n\n\n\n\n\n\n\n\nStandard deviation calculation\n\n\n\nStd.Dev = \\(\\sqrt{Variance}\\)\n\n\n\n\n\n\n\n\nInterquantile range calculation\n\n\n\nIQR(x) = quantile(x, 3/4) - quantile(x, 1/4)\n\n\n\nnumeric_vector = c(iris$Sepal.Length, NA, NA)\nsd(numeric_vector)\n\n[1] NA\n\nsd(numeric_vector, na.rm = T)\n\n[1] 0.8280661\n\nvar(numeric_vector)\n\n[1] NA\n\nvar(numeric_vector, na.rm = T)\n\n[1] 0.6856935\n\n#IQR(numeric_vector) Not accepted when there are NA values\nIQR(numeric_vector, na.rm = T)\n\n[1] 1.3\n\n\n\n\n\n\n\nYou can calculate the sum and mean for each row/column of a numeric data frame with the functions:\n\nSum: colSums and rowSums/rowsum\nMean: colMeans and rowMeans"
  },
  {
    "objectID": "useful_R.html#objects-in-r-environment",
    "href": "useful_R.html#objects-in-r-environment",
    "title": "Useful R commands",
    "section": "",
    "text": "# Check what you have in the environment\nls()\n\n[1] \"caption\"         \"cheat_sheet\"     \"colNames\"        \"has_annotations\"\n[5] \"my_numbers\"      \"numeric_vector\" \n\n# remove an object from the environment\nrm(\"cheat_sheet\"); ls()\n\n[1] \"caption\"         \"colNames\"        \"has_annotations\" \"my_numbers\"     \n[5] \"numeric_vector\""
  },
  {
    "objectID": "useful_R.html#install-and-load-packages",
    "href": "useful_R.html#install-and-load-packages",
    "title": "Useful R commands",
    "section": "",
    "text": "# Names of packages installed:\nrownames(installed.packages())\n# Install a package\ninstall.packages(\"tidyverse\")\n\n# Load a package into the R session\nlibrary(tidyverse)\n# OR\nmyPackage = \"tidyverse\"\nlibrary(myPackage, character.only = T)"
  },
  {
    "objectID": "useful_R.html#working-with-text",
    "href": "useful_R.html#working-with-text",
    "title": "Useful R commands",
    "section": "",
    "text": "These are ways to search text without writing the explicitly what you are searching.\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)\n\n\n\n\n\nUse symbol or letter to split a text into a vector (similar to excel’s “text to columns” command)\nExample: arabidopsis genes are named as “AT” chromosome number “G” gene number. So we can separate the gene number from the chromosome number using “G” as the pattern/split.\n\nBasic r: strsplit(x, split)stringr package:\n\n\n\nx is a character vector\nsplit is the symbol/letter that will be used to separate the text\nThe result is a list. If x has 10 elements, the resulting list will have also 10 elements, each one a character vector.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# With strsplit and str_split, in each list, the chromosome number is the first element, the gene number is the second\nstrsplit(x = Arabidopsis_Genes, split = 'G')\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\n\n\nstr_split - same as basic r command strsplit, x is called string and split is called pattern\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\nlibrary(stringr)\nstr_split(string = Arabidopsis_Genes, pattern = \"G\")\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\nstr_split_1 - string has to be a character vector of size 1\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# str_split_1 accepts only one element at a time\n# The result is the same as str_split(string = Arabidopsis_Genes, pattern = \"G\")[[1]]\nstr_split_1(string = Arabidopsis_Genes[1], pattern = \"G\")\n\n[1] \"AT1\"   \"01020\"\n\n\n\nstr_split_fixed(string, pattern, n) - similar to str_split, but the result is a matrix (vector with columns and rows). You need to specify n, the max number of pieces to return for each string from the input\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# str_split_fixed returns a matrix with nrow == length(string) and ncol == n\nstr_split_fixed(string = Arabidopsis_Genes, pattern = \"G\", n = 2)\n\n     [,1]  [,2]   \n[1,] \"AT1\" \"01020\"\n[2,] \"AT1\" \"01030\"\n[3,] \"AT1\" \"01040\"\n\n\n\nstr_split_i(string, pattern, i) - similar to str_split_fixed, but i is used to specify which column we want to keep from the matrix.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# With str_split_i, you specify which part of the string you want to keep after the split\n# If we want to keep just the gene number in this case, we select the second part, the one that comes after \"G\"\nstr_split_i(string = Arabidopsis_Genes, pattern = \"G\", i = 2)\n\n[1] \"01020\" \"01030\" \"01040\"\n\n\n\n\n\n\n\n\nBoth are similar to “CTRL+F”, but have some extra capabilities.\n\nBasic commandSpecifics\n\n\ngrep(pattern, x, fixed = F) where\n\npattern is the word of Regex to search\nx is the character vector or even data.frame in which you are searching\nIf fixed is omitted or F, search will allow regex, else it will take patterns as literal words (meaning \\w will match only \\w, not “any letter, number or _“)\n\n\n\ngrep result is either a vector with the index of the match:\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students)\n\n[1] 1 2 5\n\n# The result is c(1, 2, 5), because the names containing the letter \"a\" are the 1st, 2nd and 5th elements of the input \n\nYou can ask grep to return the matches instead of their indices by adding value = T\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students, value = T)\n\n[1] \"Fadoua\"   \"Arghavan\" \"Valeria\" \n\n\ngrepl returns a vector of the same size as the input with only TRUE or FALSE\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrepl(\"a\", names_students)\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n# Because the question asked is \"is the letter \"a\" in element1, element2... you cannot use the argument `value = T`"
  },
  {
    "objectID": "useful_R.html#read-excel-spreadsheets",
    "href": "useful_R.html#read-excel-spreadsheets",
    "title": "Useful R commands",
    "section": "",
    "text": "readxl package - Part of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  }
]