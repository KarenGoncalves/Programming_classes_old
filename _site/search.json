[
  {
    "objectID": "useful_unix.html#basic-concepts",
    "href": "useful_unix.html#basic-concepts",
    "title": "Useful commands in unix",
    "section": "Basic concepts",
    "text": "Basic concepts\nAbsolute path: includes the root (starts with a “/”)\nRelative path: is dependent on your location in the computer. For example, if the file or folder to which you refer is present in the your current folder, you need simply write its name.\nPath here will be used to refer to both absolute and relative paths, unless specified\nSession: each time you open a command line window or connect to the server\nScript: a list of commands to be executed by the computer\nWhen you start a new line, you start a new command. There are exceptions:\n\n\\: escape character. If you add a new line (press enter or return) right after a \\, it will be read as the same line\nSome commands use quotes (either ' or \"), and normally if you start a new line without closing the quote, it will be considered part of the same command\n; has the same effect as a new line. So you can write multiple commands in the same line by separating them with a ;"
  },
  {
    "objectID": "useful_unix.html#saving-result-to-a-file",
    "href": "useful_unix.html#saving-result-to-a-file",
    "title": "Useful commands in unix",
    "section": "Saving result to a file",
    "text": "Saving result to a file\n&gt; will take what would be printed to the screen and put in a file. What comes before &gt; is a command, what comes after it is a file name. If a file of the same name already exists, it will be replaced.\n&gt;&gt; is similar to &gt; but if a file of the same name as we the one we gave already exists, it will simply add what would be printed to the screen to the end of the file instead of replacing it."
  },
  {
    "objectID": "useful_unix.html#commands-are-normally-are-acronyms",
    "href": "useful_unix.html#commands-are-normally-are-acronyms",
    "title": "Useful commands in unix",
    "section": "Commands are normally are acronyms",
    "text": "Commands are normally are acronyms\nDirectory is the same as Folder. Working directory means the folder in which you currently are.\npwd: print working directory: prints the absolute path of your current location in the computer.\ncd: change directory: use cd followed by the path to a folder to change your location in the computer.\n\nList files : ls\nUsed alone, it will print the contents of the current directory. If it is followed by a path to a directory, will print its contents. Options (letters or words preceded by “-” or “–”, respectively) will change how and what is printed.\n\nls -a or ls --all\n\nWill print all contents of the working directory, including hidden files (which start with a dot, eg. .ssh).\n\nls -alhs Desktop or ls --all -l --sort --human Desktop\n\nWill print all the contents (-a or --all including hidden files) in the form of a list (-l) that includes the permissions of each file, their owners, the date of the last modification and their size in human format (-h or --human; 4Kb instead of 4000b) and sort them alphabetically (-s or --sort; other options can be used to change how to sort the files).\n\n\n\n\nOpen and read files : less or more\nSoftwares to open text files as read-only.\n\nUse less --help or man less to see a manual on how to use less and more --help or man more to see how to use more\nless file1\n\nWill open file1 to read. If you want to look for a word, type / then type the word.\n\nless file1 file2 file3\n\nWill open the three files to read. You can move between the files by typing : followed by p to look at the previous file or n to look at the next one.\n\n\n\n\nPrint text to the screen : cat\nPrints file to the screen\n\ncat file1: will print the content of file1 to the screen. If the file is a binary file (.bam), or if it is compressed (.zip, .tar, .gz), the printed text will be all gibberish\ncat file1 file2: will print the content of file1 followed by the content of file 2\ncat file1 &gt; file2; cat file3 &gt;&gt; file2: is the same as cat file1 file3 &gt; file2.\n\n\n\nView beginning or end of a file : head and tail\nPrints the first (head) or last (tail) 10 lines of a file to the screen. If you have a big file and you just want to see if it looks fine or what it contains, use this\n\nhead file1: will print the first 10 lines of file1\nhead -n 20 file1: the option -n allows you to specify the number of lines you want to be printed\n\n\n\nEdit text file : nano\nSoftware to edit text in the server. Used alone will open an empty file. When you try to close the file (Ctrl + x) will ask if you want to save it and ask for a name for the path where to save it.\n\nnano file1\n\nWill open file1 for edition. If file1 does not exist, will create it.\n\nnano *\n\nWill open all text files in the working directory for edition in alphabetic order. Once you close one, the next one is opened.\n\n\n\n\nSearch for word in text file : grep\nSearches a text in a file\n\ngrep \"word\" file1: will print to the screen every line of file 1 that contains “word” in it.\n\n\n\nClean the screen : clear\nWill clear you screen, so you will not be able to see the previous commands by looking up or scrolling. You can still use the up and down arrows to look at the commands you have used in the session.\n\n\nSee commands used previously : history\nShows the list of commands you have used in the computer with the date and time of use. Does not contain ALL the commands you have ever used, since old lines are deleted. So if you think you may need to see the command again, copy it to a file.\n\n\nCopy files or folders : cp\nCopy: use cp followed by the path of the file you want to copy and the path to where you want to put the copy.\n\ncp file1 file2\n\nCreates a copy of file1 and names it file2.\n\ncp -r folder1 folder2\n\nIf you want to copy a folder, you need to add the option -r (recursive, which means it will copy everything inside the folder).\n\ncp file1 folder1\n\nWill create a copy of file1 in the folder1 (the copy will be named file1).\n\ncp -v -r folder1 folder2\n\nCreates a copy of folder1 and names it folder2. The option -v (verbose) will make the computer print to the screen what it is doing (copied folder1/file1 to folder2/file; copied folder1/file2 to folder2/file2; etc).\n\n\n\n\nRemove files or folders : rm\nRemove: use rm followed by the path to a file or folder you wish to delete. It will delete FOREVER, there is no trashbin when you use rm, so use with care\n\nrm file1 file2 file3\n\nDelete all files listed after the command\n\nrm -r folder1\n\nDelete all files in the folder1 and the folder itself (will only work if you use -r)\n\nrm *\n\nDeletes EVERYTHING (*) in the current folder, except folders (since -r was not included)\n\nrm -v *\n\nDeletes everything in the current folder, except folders, and prints to the screen the files it deleted while doing it.\n\n\n\n\nCreate folders/directories: mkdir\nmake directory: use mkdir followed by the name you want to give to the new folder. You can create multiple folders at once by simply separating the names with a space\n\nrmdir: remove directory: use with the path to a folder to delete it FOREVER (same as rm). Only works if the folder is empty.\n\n\n\nSyncronize files between your computer and a server : rsync or scp\nWill copy files and folders from one location to another. Use it with the path of the files and folders you wish to copy and the path to where you want the copy to be placed. You will be required to put your password with this command.\nIn the commands below, you can replace rsync by scp. The second is more secure.\n\nrsync file1 file2 file3 user@server.ca:/home/user/folder1\n\nWill copy the files (file1, file2 and file3) which are in the local computer (eg. the user’s laptop) to the directory /home/user/folder1 which is the remote computer accessed as server.ca. The : separates the remote computer name from the path to the folder of interest. Here, the path to the folder in the remote computer MUST be the absolute path.\nIf the option -v is used, the computer will print what is happening (if the connection to the server was successfull, if it found the folder indicated in the command, what it is copying and if it was successfull)\nYou can use up to 3 v’s to get more information on what is happening: -v, -vv and -vvv are all accepted options and sometimes may help you figure out why something is not working.\n\nrsync -r folder1 user@server.ca:/home/user/folder1\n\nJust as with cp and rm, you need to use -r to copy a folder with all its contents. This command will result in /home/user/folder1/folder1, because we are copying the whole folder\n\nrsync -r folder1/ user@server.ca:/home/user/folder1\n\nThis command will copy only the contents of folder1 to the server.\n\nrsync -r user@server.ca:/home/user/folder1/ folder1\n\nThis command will copy the contents of /home/user/folder1/ from the server.ca to our local computer in folder1\n\n\n\n\nConnect to server : ssh\nSecure shell protocol: will allow you to connect to a server and write commands into it.\n\nssh user@server.ca\n\nAfter asking for the password, will log user to server.ca.\n\nssh -i myKey.ppk user@server.ca\n\nThe option -i means “identity file”, ssh will use this file as the password (you need to have it in your local computer and copy it to the server.\nTo create an identity file (also known as ssh-key) follow the instructions here"
  },
  {
    "objectID": "useful_unix.html#softwares",
    "href": "useful_unix.html#softwares",
    "title": "Useful commands in unix",
    "section": "Softwares",
    "text": "Softwares\nIn the server, you do not need to install most softwares, as they are already installed and are called modules. These modules are what you need to load to your session to be able to use the software.\n\nAvailable softwares\n\nmodule avail\n\nShows the softwares that are installed (available) in the server.\n\nmodule spider\n\nmodule spider softw shows at all the modules that are installed which contain the words ‘softw’. Will show a list of all the versions of those softwares.\nmodule spider software1/1.0 will show a description for software1/1.0, if it is installed, and how to load it to your session in the server.\n\nmodule keyword softw\n\nSimilar to module spider, it will search for the word softw among the installed modules, but the search extends to the description of the software. This is useful when you are searching for a software that does something specific but you don’t need one specific.\n\nmodule load software1\n\nIf software1 is installed in the server AND you have loaded all the softwares you need for software1 to work, will load the default version of software1 to your session.\nIf you want an specific version of a software, you need to put it in the command (eg. module load software1/1.0)\nIf you have a version of a software loaded and you try to load another, the previous one will be unloaded, meaning you cannot load two versions of a software at the same time.\n\nmodule save my_collection and module restore my_collection\n\nIf you use many softwares frequently, you can create collections that will allow you to load them all together. For example, the code below creates a collection with the modules you need to run blast, then saves it to the collection named “blast”:\n\nmodule load StdEnv/2020  gcc/9.3.0  blast+/2.12.0\nmodule save blast\n\nNow, every time you want to run blast, you just need to run the code below and then add your script for blast!\n\nmodule restore blast"
  },
  {
    "objectID": "useful_unix.html#sbatch",
    "href": "useful_unix.html#sbatch",
    "title": "Useful commands in unix",
    "section": "sbatch",
    "text": "sbatch\nThis command will add your script to a queue in the server to run when the required resourcers (time, memory, number of central processing units – CPUs) are available. You cannot be in your ${HOME} directory to run it or in folders inside it. You need to move to ${SCRATCH} or ${PROJECT} to be able to run.\n\nsbatch myScript.sh\n\nWill add myScript.sh to the queue\nThe script must start with the following lines:\n\n#!/bin/bash\n\nSpecifies the software (bash) that will be able to read this script (we give it’s absolute path, if you type ls /bin in the server, you will find the file ‘bash’)\n\n#SBATCH --time=00-00:00:00\n\nNormally anything that comes after # is not read by the computer, but since it is followed by ‘SBATCH’, the software sbatch will read it and interpret that you are asking for this amount of time in the queue.\n\n\nIf nothing else is given, the software sbatch will allocated the minimum amount of memory and CPUs and will find the sponsor of your account to create the bill the use of the server in the name of the sponsor\n\nIf you have more than one sponsor (eg. laboidp and desgagne) there will be an error, because the server will not know who they should bill.\nYou can specify the sponsor in two ways:\n\nAdd the following to a new line in the beginning of your script: #SBATCH --acount=def-sponsor (replace “sponsor” by the sponsor of your account)\nAdd the name of the account to the sbatch command: sbatch --acount=def-sponsor myScript.sh"
  },
  {
    "objectID": "useful_unix.html#srun",
    "href": "useful_unix.html#srun",
    "title": "Useful commands in unix",
    "section": "srun",
    "text": "srun\nWill add your script to the queue, it is as if you were running the script in the session, so until it has finished running you won’t be able to do anything else.\n\nsrun --account=def-sponsor --mem-per-cpu=16G --time=01:00:00 myScript.sh\n\nWill run myScript.sh, billing the account def-sponsor, using a maximum of 16Gb of memory and for maximum 1h.\n\nsrun --account=def-sponsor --mem-per-cpu=16G --time=01:00:00 -i\n\nSame as above, however there is no script to run because we want to use the resources interactively (-i). This is useful if you want to test a script that you know may use a lot of memory. When you are finished, if the time has not run out, you can use Ctrl + D or exit to go back to your session."
  },
  {
    "objectID": "useful_unix.html#salloc",
    "href": "useful_unix.html#salloc",
    "title": "Useful commands in unix",
    "section": "salloc",
    "text": "salloc\nSimilar to using srun -i, will allow the interactive use of the resources allocated. When you are finished, if the time has not run out, you can use Ctrl + D or exit to go back to your session."
  },
  {
    "objectID": "useful_unix.html#squeue",
    "href": "useful_unix.html#squeue",
    "title": "Useful commands in unix",
    "section": "squeue",
    "text": "squeue\nWill show the queue of jobs waiting to run in the server.\n\nsqueue\n\nWill print ALL the jobs in the queue, submitted by every user of the server, which are running or waiting to run.\n\nsqueue -u user or sq\n\nIf your username is user, the two commands are the same. Will print all your jobs that are running or waiting to run\nBelow is an example of what the result of squeue -u smithj would look like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJOBID\nUSER\nACCOUNT\nNAME\nST\nTIME_LEFT\nNODES\nCPUS\nGRES\nMIN_MEM\nNODELIST (REASON)\n\n\n\n\n123456\nsmithj\ndef-smithj\nsimple_j\nR\n0:03\n1\n1\n(null)\n4G\ncdr234 (None)\n\n\n123457\nsmithj\ndef-smithj\nbigger_j\nPD\n2-00:00:00\n1\n16\n(null)\n16G\n(Priority)\n\n\n\n\nJOBID: each time you using sbatch, srun or salloc, you create a job and it is assigned an ID, you can use this ID to get information about the job.\nName: Unless you specify a different name (by using --jobname=someName or -j someName) it will be the name of the script submitted\nST: status of the job.\n\nR = running\nPD = pending, meaning the resources needed are not available so you need to wait\nCG = completing\nCA = cancelled\nSee other status codes here\n\nNodes: basically a groupping of CPUs\nMIN_MEM: memory requested to run the job\nNodelist (reason): When your job is running, you will get a list of the nodes it is using. If it is pending, you will get a reason as to why; if it is already running, the reason will be “none”"
  },
  {
    "objectID": "useful_unix.html#scancel",
    "href": "useful_unix.html#scancel",
    "title": "Useful commands in unix",
    "section": "scancel",
    "text": "scancel\nCancel jobs that are pending or running. Use it with the id of one or more jobs. You are not allowed to cancel a job submitted by someone else."
  },
  {
    "objectID": "useful_unix.html#diskusage_report",
    "href": "useful_unix.html#diskusage_report",
    "title": "Useful commands in unix",
    "section": "diskusage_report",
    "text": "diskusage_report\nPrints a report of the use of the server by you in your home and scratch directories, as well as your directories in the project folders (each sponsor has a different one, so you may have files in different project folders). The report includes the space used and the number of files in each directory, as well as the limits of these directories."
  },
  {
    "objectID": "r/basics.html#variables",
    "href": "r/basics.html#variables",
    "title": "R class - basics",
    "section": "Variables",
    "text": "Variables\nTo work with your files, create new data and work with it, etc., you will want to save your things into R’s memory.\nThese things are variables.\n\nEvery person you know is stored in your brain as a variable (their names)\nEvery contact in your cellphone is a variable that stores their names, phone number, email, etc."
  },
  {
    "objectID": "r/basics.html#variables---save-your-things-in-r",
    "href": "r/basics.html#variables---save-your-things-in-r",
    "title": "R class - basics",
    "section": "Variables - save your things in R",
    "text": "Variables - save your things in R\nHow to create a variable in R:\n\nStart with the name you want\nUse = or &lt;- to separate the name from the value you want it to store"
  },
  {
    "objectID": "r/basics.html#variable-names",
    "href": "r/basics.html#variable-names",
    "title": "R class - basics",
    "section": "Variable names",
    "text": "Variable names\n\n\nGive meaningful names to your variables, or else you may not remember what they are when you read the script later\n\n\nBad names\nWhy?\nGood names\n\n\n\n\nx, y, z, counts\nx, y, z don't tell us what the data there has, so you will not know later what you used\nrawCountsRNAseq, fluorescenceTableDay1\n\n\nbacteriacountsforday5\nCould be a good name, but is difficult to read, use upper and lower case or _ to improve readability\nbacteriaCountsForDay5\n\n\nmicroplate\nDoes not tell what kind of data is stored\nmicroplateFluorescence, microplateConcentration, microplateOD\n\n\n\n\n\n\n\n\nCannot start with numbers\nCannot have symbols, eg. *(),\\/\"';:&lt;&gt;{}[]~!@#$%^+=\nCannot have space"
  },
  {
    "objectID": "r/basics.html#functions---work-with-your-data",
    "href": "r/basics.html#functions---work-with-your-data",
    "title": "R class - basics",
    "section": "Functions - work with your data",
    "text": "Functions - work with your data\nYou use R to do something with your data:\n\nCalculate stats, eg. mean, standard deviation\nKnow if two or more groups are different with T-test or ANOVA.\nYou do these things using functions.\n\n\nThey are simply a bunch of code stored in a variable with an specific name. You use them by typing the name followed by ().  Most of the time, you need to put something inside the (), eg. a table, a column in a table, several numbers, etc.\n\nIf you do not know how to use a function, ask for help (which is also a function!):\n\n\n\n\n\n\n\nhelp(\"mean\") or ?mean will open a page in your browser (if you are using R) or the tab “Help” (if you are using RStudio) with an explanation of what the function does and how to use it"
  },
  {
    "objectID": "r/basics.html#functions---examples",
    "href": "r/basics.html#functions---examples",
    "title": "R class - basics",
    "section": "Functions - examples",
    "text": "Functions - examples\nYou load files into R using functions: read.delim(), read.csv(), read_csv() (this is different to the previous one)\n\nEg. myFile.txt is in the “Input” folder of my project, it is a table with column names (headers) and row names, the columns are separated by tabs (\"\\t\")myFile &lt;- read.delim(file = \"Input/myFile.txt\", header = T, row.names = 1)\n\n\"Input/myFile.txt\" = where the file is stored, has to be inside single or double quotes\nheader = T or header = TRUE are the same thing, but all CAPS always\nrow.names = 1 tells R which column has the information that identifies each row as a different thing, you can use any column here, or you can omit this\n\n\nEach of the three things above (arguments) are separated from each other inside the function by , (try writing a function without commas and see what happens)\n\n\n\n\n\n\n\n\n\nColumn separation\n\n\nread.delim() was made to read tables with columns separated by tabs\n\nIf the columns were separated by something else, like ;, you would write: myFile &lt;- read.delim(file = \"Input/myFile.txt\", header = T, row.names = 1, sep = \";\")"
  },
  {
    "objectID": "r/basics.html#exercise---load-table-into-r",
    "href": "r/basics.html#exercise---load-table-into-r",
    "title": "R class - basics",
    "section": "Exercise - load table into R",
    "text": "Exercise - load table into R\nLoad your dataset (from the preparatory slides  To do before the first class) and save it to the variable \"myFirstInput\"\n\nComma-separated values:  myFirstInput = read.csv(\"Input/myData.csv\", header = T)\nComma-separated values:  myFirstInput = read.delim(\"Input/myData.csv\", header = T, sep = \",\")"
  },
  {
    "objectID": "r/basics.html#functions-to-check-your-table",
    "href": "r/basics.html#functions-to-check-your-table",
    "title": "R class - basics",
    "section": "Functions to check your table",
    "text": "Functions to check your table\nIf you want to see that the file is okay, you can check if the beginning and end of the table looks right:\n\nhead(myFirstInput) - will print the first 6 rows of a table.\ntail(myFirstInput) - will print the last 6 rows of a table.\n\nFor both, you can change the number of lines printed by adding n=x, where x is the number of lines you want to see\nhead(myFirstInput, n=5)"
  },
  {
    "objectID": "r/basics.html#functions-to-check-your-table-1",
    "href": "r/basics.html#functions-to-check-your-table-1",
    "title": "R class - basics",
    "section": "Functions to check your table",
    "text": "Functions to check your table\n\nstr(myFirstInput) - will show the structure of your table\n\nIts class (data.frame or tibble are types of tables)\nThe number of rows (observations) and columns (variables)\nThe type of data inside each column and the their first few values\n\nsummary(myFirstInput) - if the values are numbers, will calculate the quantiles and mean of each column"
  },
  {
    "objectID": "r/basics.html#know-the-types-of-data",
    "href": "r/basics.html#know-the-types-of-data",
    "title": "R class - basics",
    "section": "Know the types of data",
    "text": "Know the types of data\nIf you enter a text in a column that has numeric data, the column will be treated as text (character)\n\nWith numeric columns, summary() acts as in the previous slide\nWith text columns, there are 2 options:\n\ncharacter: will print the length, class and mode (most common value) of the column\nfactor (categories): will print each category and their frequency\n\nCharacters cannot be transformed into numbers, factors (categories) can!\n\nThat is because factors have levels (category 1, category 2, …), and to save space, R simply remember the level of each line"
  },
  {
    "objectID": "r/basics.html#test---difference-between-text-and-categories",
    "href": "r/basics.html#test---difference-between-text-and-categories",
    "title": "R class - basics",
    "section": "Test - difference between text and categories",
    "text": "Test - difference between text and categories\nUse R built-in data to see the difference between characters and factors\n\n\n\n\n\n\nLETTERS and letters are vectors (a list of values of same type) of upper/lower case letters\n\n\n\n\nmyLetters = as.factor(letters) \n\nas.numeric(myLetters)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\nas.numeric(letters)\n\nWarning: NAs introduced by coercion\n\n\n [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n[26] NA\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\nas.numeric(X) is a function that transforms the data in X into numbers, if it is possible.\nas.factor is a function that transforms the vector into a factor\n\n\n\n\n\n\n\n\n\n\n\n\nNA means “Not Available”, R does not know what to do with characters when you want numbers from it, so the result is “not available”\nNaN means “Not A Number”; Inf means “infinite”\n\n\n\n\n\n\n\n\n\nHover your mouse over the code and a button to copy the whole code block will appear!"
  },
  {
    "objectID": "r/basics.html#exercise---playing-with-datasets-already-in-r",
    "href": "r/basics.html#exercise---playing-with-datasets-already-in-r",
    "title": "R class - basics",
    "section": "Exercise - playing with datasets already in R",
    "text": "Exercise - playing with datasets already in R\nR has datasets already loaded for classes like these.\n\nCheck what the PlantGrowth dataset looks like\n\nhead(PlantGrowth)\nsummary(PlantGrowth)\n\nSave PlantGrowth into your environment with a new name\n\nmyPlantGrowth = PlantGrowth\n\n\n\n\n\n\n\n\n\nExplain your code with comments\n\n\nInside R (as well as unix and python), anything you write after a # in a line is not read by the computer. You can use this to explain your code in your own words so you and anyone reading your code can understand it."
  },
  {
    "objectID": "r/basics.html#row-selection",
    "href": "r/basics.html#row-selection",
    "title": "R class - basics",
    "section": "Row selection",
    "text": "Row selection\nIf you load your data and indicate the column containing the names of the rows, you can use the name of the row\nIf you did not set the row names, just use the number of the row.\n\n\n\n\n\n\nHOW TO\n\n\ntable_name[ row_name , ]\nThe row name/number HAS TO come BEFORE the \",\"\n\n\n\n\nmyPlantGrowth = head(PlantGrowth)\n\n# Use the name of the table, and [], inside put the number of the row followed by \",\"\nmyPlantGrowth[1,] # prints the first row\n\n  weight group\n1   4.17  ctrl\n\n# See and set rownames with the function rownames\nrownames(myPlantGrowth)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n\nrownames(myPlantGrowth) = 6:1 # creates a sequence starting from 30 and ending in 1"
  },
  {
    "objectID": "r/basics.html#column-selection",
    "href": "r/basics.html#column-selection",
    "title": "R class - basics",
    "section": "Column selection",
    "text": "Column selection\nTo select a column in a table in R, you cannot click it as in excel, but you can call it by its name or position in the table.\nAll the commands below select the column “weight” in the data frame “myPlantGrowth”\n\n# Use this to return a table with a single column\nmyPlantGrowth = head(PlantGrowth)\nmyPlantGrowth[1] # same with the column name: myPlantGrowth[\"weight\"]\n\n  weight\n1   4.17\n2   5.58\n3   5.18\n4   6.11\n5   4.50\n6   4.61\n\n# Use this to return just the values of the column (this structure is called a vector)\nmyPlantGrowth$weight\n\n[1] 4.17 5.58 5.18 6.11 4.50 4.61\n\nmyPlantGrowth[, \"weight\"] # same with the column number: myPlantGrowth[, 1]\n\n[1] 4.17 5.58 5.18 6.11 4.50 4.61\n\n\n\n\n\n\n\n\nAlways remember the position of your commas!\nUse the function names to check or set the names of your columns"
  },
  {
    "objectID": "r/basics.html#happy-ending---your-first-graphs",
    "href": "r/basics.html#happy-ending---your-first-graphs",
    "title": "R class - basics",
    "section": "Happy ending - your first graph(s)",
    "text": "Happy ending - your first graph(s)\nLet’s use the dataset iris that is inside R:\nRun str(iris) to see what the table looks like\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ..."
  },
  {
    "objectID": "r/basics.html#happy-ending---your-first-graphs-1",
    "href": "r/basics.html#happy-ending---your-first-graphs-1",
    "title": "R class - basics",
    "section": "Happy ending - your first graph(s)",
    "text": "Happy ending - your first graph(s)\nSelect one numerical column and make a boxplot, example - Sepal.Length\n\n\n\n\n\n\n~ makes R separate the first item in relation to the categories in the second\n\n\n\n\nBasic boxplotWith colorsWith clean axes titlesWith new axes titles\n\n\n\nboxplot(iris$Sepal.Length ~ iris$Species)\n\n\n\n\n\n\n\n# Lets give it some color\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(iris$Sepal.Length ~ iris$Species, \n    col = colors)\n\n\n\n\n\n\n\ncolors = c(\"red\", \"green\", \"blue\")\n# If the column names are fine, we can use the function with to remove the table name from the title\nwith(iris, boxplot(Sepal.Length ~ Species, col = colors))\n\n\n\n\n\n\n\n# Set a new axes titles with x/ylab\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(iris$Sepal.Length ~ iris$Species, col = colors, \n    ylab = \"Sepal length (mm)\", xlab = \"Species epithet\")"
  },
  {
    "objectID": "r/basics.html#homework",
    "href": "r/basics.html#homework",
    "title": "R class - basics",
    "section": "Homework",
    "text": "Homework\n\nUsing iris\n\nSelect 2 columns and plot them with plot, example: plot(column1, column2)\nPlot everything against everything: pairs(iris)\n\nUsing your data\n\nCreate a boxplot with colored boxes, meaningful axes titles and a plot title"
  },
  {
    "objectID": "r/basics.html#learning-more---basic-r-plots",
    "href": "r/basics.html#learning-more---basic-r-plots",
    "title": "R class - basics",
    "section": "Learning more - Basic R plots",
    "text": "Learning more - Basic R plots\n\n\nHBC training\nR Base Graphics: An Idiot’s Guide\nStatistical tools for high-throughput data analysis\nTC Technology Knowledge Base"
  },
  {
    "objectID": "r/basics.html#cheat-sheet-for-loading-files",
    "href": "r/basics.html#cheat-sheet-for-loading-files",
    "title": "R class - basics",
    "section": "Cheat-sheet for loading files",
    "text": "Cheat-sheet for loading files\nBasics:\n\nNormally, R assumes your data has column names\n\n\n\n\n\n\nFunction\nFile extenion\nColumn separation\nDecimal separation\n\n\n\n\nread.csv\n.csv\nsep = \",\"\ndec = \".\"\n\n\nread.csv2\n.csv\nsep = \";\"\ndec = \",\"\n\n\nread.delim\n.txt, .tsv\nsep = \"\\t\" (tab)\ndec = \".\"\n\n\nread.delim2\n.txt, .tsv\nsep = \"\\t\" (tab)\ndec = \",\"\n\n\n\n\n\n\n\nIf the column separation or the decimal separation is not the one expected by the function you choose, you can specify the correct one inside the function with:\n\nsep = ' '\ndec = '.'"
  },
  {
    "objectID": "r/basics.html#code-from-class-fridays-group",
    "href": "r/basics.html#code-from-class-fridays-group",
    "title": "R class - basics",
    "section": "Code from class (Friday’s group)",
    "text": "Code from class (Friday’s group)\nCopy and paste one of codes below to repeat what was done in class.\n\nCopy the code from this link\nOr run the code below\n\nsource(\"https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class1f.R\")"
  },
  {
    "objectID": "r/basics.html#code-from-class-tuesdays-group",
    "href": "r/basics.html#code-from-class-tuesdays-group",
    "title": "R class - basics",
    "section": "Code from class (Tuesday’s group)",
    "text": "Code from class (Tuesday’s group)\n\nCopy the code from this link\nOr run the code below\n\nsource(\"https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class1t.R\")"
  },
  {
    "objectID": "r/Regex_and_tests.html#readxl-package---open-excel-files",
    "href": "r/Regex_and_tests.html#readxl-package---open-excel-files",
    "title": "Regex and tests",
    "section": "readxl package - open excel files",
    "text": "readxl package - open excel files\nPart of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  },
  {
    "objectID": "r/Regex_and_tests.html#regular-expressions-regex",
    "href": "r/Regex_and_tests.html#regular-expressions-regex",
    "title": "Regex and tests",
    "section": "Regular expressions (Regex)",
    "text": "Regular expressions (Regex)\nThese are ways to search text without writing the explicitly what you are searching.\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Classes",
    "section": "",
    "text": "Classes\n\nUnix/Bash/TerminalRStatistics\n\n\n\nClass 1 - Basics\nClass 2 - Connecting to the server and tranfering files\nClass 3 - Running jobs\nClass 4 - Running blast\n\nScripts for the class:\n\nmyTry.sh\nmyGeneralBlast.sh\nsbatch_blast.sh\ncreate_master_blast.sh\n\n\nClass 5 - Filtering tables with AWK\n\nblastn_result.txt\nprots.fasta\n\nClass 6 - SED commands \n\n\n\n\nCheck this before the first class\n\nExample data for class 1\n\nClass 1 - basics\nClass 2 - Packages and functions\n\n\n\nComing soon"
  },
  {
    "objectID": "r/Packages_Functions.html#be-lazy",
    "href": "r/Packages_Functions.html#be-lazy",
    "title": "R class - packages and functions",
    "section": "Be lazy!",
    "text": "Be lazy!\nThe most certain way to make mistakes when programming is typing everything.\nThink of when you are writing a text, how many typos do you make? This will happen when you are coding!\nRealizing there are typos or bigger mistakes in your code is more difficult than in a text to a friend.\nSo, be lazy and copy/paste codes when possible.\n\nAlso, don’t try to re-invent the wheel. Check on stack-overflow, bioconductor or github to see if other people already tried what you are doing and the solutions they came up with. You can always edit their code!"
  },
  {
    "objectID": "r/Packages_Functions.html#packages",
    "href": "r/Packages_Functions.html#packages",
    "title": "R class - packages and functions",
    "section": "Packages",
    "text": "Packages\nThese are simply folders containing files with many functions.\nThey may contain data so you can test the functions.\nHow to use packages\n\nInstallLoadAdvanced install and load\n\n\nIf you never used the package, it probably is not installed in your computer, so you need to use the function “install.packages”\ninstall.packages(\"vegan\") # a package with functions for multivariate stats functions\n\n# You can install many packages at once\ninstall.packages(c(\"venn\", \"tidyverse\"))\n\n\ninstall.packages just installs the package, but it does not load it (open in R). To load, use the function library\nlibrary(cluster)\nlibrary(\"tidyverse\") # you do not need the quotes with the function library\n\n\n\n\n\n\nYou cannot put multiple package names in the library function You need to load them one by one\n\n\n\n\n\nCome back to this part once you are more comfortable with programming.\nYou cannot put a vector (ie. c(\"a\", \"b\", \"c\")) inside library(), but you can write a code that loads the packages one by one without you writing that manually.\n# start by creating a vector with all the packages you need\npkgs = c(\"rmarkdown\", \"tidyverse\", \"venn\")\n\n# We check which packages are NOT (!) installed\npkgs.To.Install = ! pkgs %in% installed.packages()\n\n# any() checks if there is at least one TRUE in the vector\nif (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])\n\nfor (curPkg in pkgs) library(curPkg, character.only = T) \n# curPkg is a variable that takes the value of each element in pkgs\n# Every time the function library() is run, curPkg changes value"
  },
  {
    "objectID": "r/Packages_Functions.html#loops",
    "href": "r/Packages_Functions.html#loops",
    "title": "R class - packages and functions",
    "section": "loops",
    "text": "loops\nLet’s create a function and a vector of elements that we will use in the function\n\nthesisDefense = function(x) {return(paste(\"Ph.D.\", x))}\ncandidates = c(\"Serge\", \"Fadoua\", \"Arghavan\", \n           \"Snehi\", \"Basanta\", \"Sajjad\", \n           \"Mahsa\", \"Archana\")\n\n\n\nfor\n\nFunction that will repeat what you ask for everything in the group you give it. Eg: every PhD candidate has to defend their theses: - Useful when you do not want to save the results or when you need to save separated objects for each elements in the loop (each candidate below)\n\n\n\nfor (phd in candidates) { thesisDefense(phd) }\n\n\n\n\n# To see an output, we would have to either print it or create an object to save it\ndefenseResults = c()\nfor (phd in candidates) { defenseResults[phd] = thesisDefense(phd) }\ndefenseResults\n\n           Serge           Fadoua         Arghavan            Snehi \n   \"Ph.D. Serge\"   \"Ph.D. Fadoua\" \"Ph.D. Arghavan\"    \"Ph.D. Snehi\" \n         Basanta           Sajjad            Mahsa          Archana \n \"Ph.D. Basanta\"   \"Ph.D. Sajjad\"    \"Ph.D. Mahsa\"  \"Ph.D. Archana\" \n\n\n\n\n\napply functions\n\nSimilar to for, but generates an output\nUseful when you want a single output for each element of the loop\nSeveral options: apply, sapply, lapply, mapply, vapply\n\n\n\ndefenseResults = sapply(candidates, \\(phd) thesisDefense(phd) )\n\ndefenseResults\n\n\n\n           Serge           Fadoua         Arghavan            Snehi \n   \"Ph.D. Serge\"   \"Ph.D. Fadoua\" \"Ph.D. Arghavan\"    \"Ph.D. Snehi\" \n         Basanta           Sajjad            Mahsa          Archana \n \"Ph.D. Basanta\"   \"Ph.D. Sajjad\"    \"Ph.D. Mahsa\"  \"Ph.D. Archana\""
  },
  {
    "objectID": "r/Packages_Functions.html#tidyverse---many-packages-that-make-your-life-easier",
    "href": "r/Packages_Functions.html#tidyverse---many-packages-that-make-your-life-easier",
    "title": "R class - packages and functions",
    "section": "Tidyverse - many packages that make your life easier",
    "text": "Tidyverse - many packages that make your life easier\nWhen you load the package “tidyverse”, it tells you that it loaded many others (packages from the universe tidy)\n\nTables and data.frames\n\ndplyr: many functions to work with tables\ntibble: construct data frames (tables)\ntidyr: tools to better organize data (make it tidyier)\nreadr: fast and friendly functions to read table data\n\nText-like data\n\nforcats: (anagram of factors) tools to work with factors (tutorial)\nstringr: work with text (character variables)\nlubridate: work with dates\n\nPlots\n\nggplot2: create better plots\n\nProgramming\n\npurrr: functional programming in R (cheatsheet)"
  },
  {
    "objectID": "r/Packages_Functions.html#pipe-or",
    "href": "r/Packages_Functions.html#pipe-or",
    "title": "R class - packages and functions",
    "section": "Pipe (|> or %>%)",
    "text": "Pipe (|&gt; or %&gt;%)\nThink of the pipe as a tube connecting two functions. When the first function is done, instead of presenting its output, you use it to start a new function.\n\nEg. To start a postdoc, I had to finish my Ph.D: phd(\"Karen\") %&gt;% postdoc\n\n\n\n\n\n\n\nIf you use |&gt;, you need to put the parenthesis in the function in front of it. Meaning:\n\nphd(\"Karen\") %&gt;% postdoc works same as phd(\"Karen\") %&gt;% postdoc() and phd(\"Karen\") |&gt; postdoc()\nphd(\"Karen\") |&gt; postdoc does not work\n\n\n\n\nLet’s say you just want to check if R will read your file right or if you need to add more things to it before really working on the file.\n\nExerciseSolution 1Solution 2\n\n\nRun the function str on your input file or on the example from Class 0\n\n\n\n\n\n\nYou can load files from the internet without needing to download them to your computer!\n\n\n\n\n\n# You could first put the path to the file in a variable, it would make things easier\nmyFile = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt\"\n\nstr(read.delim(myFile))\n\n\n'data.frame':   8 obs. of  7 variables:\n $ X        : chr  \"A\" \"B\" \"C\" \"D\" ...\n $ Control_1: num  0.1229 0.0907 0.1068 0.0161 0.1533 ...\n $ Control_2: num  0.827 0.11 0.469 0.359 0.462 ...\n $ Control_3: num  0.1486 0.3352 0.2419 0.0933 0.9419 ...\n $ Treated_1: num  0.086 0.1403 0.1132 0.0271 0.3284 ...\n $ Treated_2: num  0.3145 0.2441 0.2793 0.0352 0.0909 ...\n $ Treated_3: num  0.22 0.433 0.326 0.107 0.316 ...\n\n\n\n\nUsing pipe, you can see the progression of the pipeline, eg.: bachelor(\"Karen\") %&gt;% phd() %&gt;% postdoc instead of postdoc(phd(bachelor(\"Karen\")))\nBasically, the first function written is the first one used, not the last.\n# You can also use a pipe ( %&gt;% )\nmyFile = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt\"\n\nread.delim(myFile) %&gt;% str\n\n\n'data.frame':   8 obs. of  7 variables:\n $ X        : chr  \"A\" \"B\" \"C\" \"D\" ...\n $ Control_1: num  0.1229 0.0907 0.1068 0.0161 0.1533 ...\n $ Control_2: num  0.827 0.11 0.469 0.359 0.462 ...\n $ Control_3: num  0.1486 0.3352 0.2419 0.0933 0.9419 ...\n $ Treated_1: num  0.086 0.1403 0.1132 0.0271 0.3284 ...\n $ Treated_2: num  0.3145 0.2441 0.2793 0.0352 0.0909 ...\n $ Treated_3: num  0.22 0.433 0.326 0.107 0.316 ..."
  },
  {
    "objectID": "r/Packages_Functions.html#readxl-package---open-excel-files",
    "href": "r/Packages_Functions.html#readxl-package---open-excel-files",
    "title": "R class - packages and functions",
    "section": "readxl package - open excel files",
    "text": "readxl package - open excel files\nPart of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  },
  {
    "objectID": "r/Packages_Functions.html#ggplot2",
    "href": "r/Packages_Functions.html#ggplot2",
    "title": "R class - packages and functions",
    "section": "ggplot2",
    "text": "ggplot2\n\nExerciseSolution 1Solution 2Solution 3\n\n\nCreate a colored boxplot with the dataset iris, with nice axes titles\n\n\nCode from the previous class\n\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(Sepal.Length ~ Species, \n    data = iris, col = colors, \n    ylab = \"Sepal length (mm)\", xlab = \"Species epithet\")\n\n\n\n\n\n\nUse ggplot. The syntax may take a while to get used to, but it is easier to read.\n\n# aes is short for aesthetics, basically what columns hold the values you want to plot\n# fill is the color that will be inside the box, color is just for the border\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n    geom_boxplot() + # the type of plot you want\n    ylab(\"Sepal length (mm)\") +\n    xlab(\"Species epithet\")\n\n\n\n\n\n\nImprove ggplot by setting a better theme (check here see the options)\n\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n    geom_boxplot(show.legend = F) + # the type of plot you want\n    ylab(\"Sepal length (mm)\") +\n    xlab(\"Species epithet\") +\n    scale_fill_manual(values = colors)"
  },
  {
    "objectID": "r/Packages_Functions.html#ggplot---part-2",
    "href": "r/Packages_Functions.html#ggplot---part-2",
    "title": "R class - packages and functions",
    "section": "ggplot - part 2",
    "text": "ggplot - part 2\nGraphics are layers of data and images put on top of each other. That is why the pieces of the ggplot function are connected by a +.\nThe codes below construct the plot from the previous slide piece by piece.\n\nBasic plotDecorations\n\n\n\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\n(plot1 = ggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)))\n\n\n\n\n\n(plot2 = plot1 +\n    geom_boxplot(show.legend = F)) # the type of plot you want\n\n\n\n\n\n\nlabs adds labels:\n\nx and y - will add the labels to the axes (you can use the functions xlab or ylab instead)\ntitle - Normally at the top of the figure (you can use the function ggtitle instead)\nsubtitle - Goes under the title and is a bit smaller\ncaption - Normally goes at the bottom of the figure and is a small text\ntag - the letter that goes at the top-left corner of a plot that is one part of several in a figure\n\n\n(plot3 = plot2 +\n    labs(y = \"Sepal length (mm)\", x = \"Species epithet\"))\n\n\n\nplot3\n\n\n\n\n\ncolors = c(\"red\", \"green\", \"blue\")\n\nplot3 + scale_fill_manual(values = colors)"
  },
  {
    "objectID": "r/Packages_Functions.html#dplyr-prepare-your-data-for-ggplot",
    "href": "r/Packages_Functions.html#dplyr-prepare-your-data-for-ggplot",
    "title": "R class - packages and functions",
    "section": "dplyr: prepare your data for ggplot",
    "text": "dplyr: prepare your data for ggplot\nIn the example dataset, the names of the groups are in the middle not specified, they are inside the replicate name. We need one column with the values and one with the names of the treatments.\n\nInput dataPivot-longerNew columnPlot\n\n\nmyFile = \"https://karengoncalves.github.io/Programming_classes/r/exampleData/Class1_exampleData.txt\"\n\nrawData = read.delim(myFile)\nnames(rawData)\n\n[1] \"X\"         \"Control_1\" \"Control_2\" \"Control_3\" \"Treated_1\" \"Treated_2\"\n[7] \"Treated_3\"\n\n# Let's change x to \"Measured\"\nnames(rawData)[1] = \"Measured\"\n\n\n\nThe table now is in the format “wide”, the one we want is called “long”\n\nlongData = pivot_longer(\n    data = rawData,\n    cols = !Measured, # gets all the columns of the table, except for the one in front of !\n    names_to = \"Replicates\", # name of the column that will contain column names from rawData\n    values_to = \"Measurements\"\n    )\n\nstr(longData)\n\ntibble [48 × 3] (S3: tbl_df/tbl/data.frame)\n $ Measured    : chr [1:48] \"A\" \"A\" \"A\" \"A\" ...\n $ Replicates  : chr [1:48] \"Control_1\" \"Control_2\" \"Control_3\" \"Treated_1\" ...\n $ Measurements: num [1:48] 0.123 0.827 0.149 0.086 0.314 ...\n\n\n\n\nLet’s split the values from “Replicates” using str_split from stringr\nmutate will return the input table with the new column we create\n\n# pattern is what separates (_)\n# i is the part that we want to see: Control_1 has 2 pieces, i=1 returns \"Control\"\n\nlongDataTreatments = longData %&gt;%\n    mutate(Treatment = str_split_i(Replicates, pattern = \"_\", i = 1))\n\nstr(longDataTreatments)\n\ntibble [48 × 4] (S3: tbl_df/tbl/data.frame)\n $ Measured    : chr [1:48] \"A\" \"A\" \"A\" \"A\" ...\n $ Replicates  : chr [1:48] \"Control_1\" \"Control_2\" \"Control_3\" \"Treated_1\" ...\n $ Measurements: num [1:48] 0.123 0.827 0.149 0.086 0.314 ...\n $ Treatment   : chr [1:48] \"Control\" \"Control\" \"Control\" \"Treated\" ...\n\n\n\n\n\nlongDataTreatments %&gt;%\n    ggplot(aes(x = Treatment, y = Measurements, fill = Measured)) +\n    geom_boxplot()\n\n\n\nlongDataTreatments %&gt;%\n    ggplot(aes(x = Measured, y = Measurements, fill = Treatment)) +\n    geom_boxplot()"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plots---sample-distribution",
    "href": "r/Packages_Functions.html#types-of-plots---sample-distribution",
    "title": "R class - packages and functions",
    "section": "Types of plots - sample distribution",
    "text": "Types of plots - sample distribution\n\nBoxplot - check this slide\n\ngeom_boxplot\nAllows the visual comparison of groups, like a bar chart, as well as the distribution of the replicates\n\nYou can see the minimum, maximum and the median of the sample, as well as the outliers\n\n\nViolin plot\n\ngeom_violin\nSame as boxplot, but without the quantiles drawn\n\n\n\n\n\n\n\n\nYou can put different types of plot and multiple data in the same graphic.\nOver the violin or boxplot layer, you can add the points representing the value measured for each replicate, the mean, etc.\n\n\n\n\n\n\n\n\n\nIf you have few replicates (&lt; 5), use a barplot with the standard deviation (make sure the color of the bar allows the visualization of the error bar)\nIf many replicates per group, use a boxplot or violin plot."
  },
  {
    "objectID": "r/Packages_Functions.html#example-violin-plot",
    "href": "r/Packages_Functions.html#example-violin-plot",
    "title": "R class - packages and functions",
    "section": "Example violin plot",
    "text": "Example violin plot\nThe code to get a violin plot is the same as the one for a boxplot, the only difference is the geom_violin.\n\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n    geom_violin(show.legend = F) + # violin instead of boxplot\n    ylab(\"Sepal length (mm)\") +\n    xlab(\"Species epithet\") +\n    scale_fill_manual(values = colors)"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plots---bar-chart",
    "href": "r/Packages_Functions.html#types-of-plots---bar-chart",
    "title": "R class - packages and functions",
    "section": "Types of plots - Bar chart",
    "text": "Types of plots - Bar chart\n\nWhat and howgeom_colgeom_bar(stat = \"identity\")Pie chart\n\n\n\nUses\n\nVisually compare means when the number of replicates is low\nVisually compare counts (number of occurences) - number of students per lab\n\nHow\n\nUse either geom_col or geom_bar(stat = \"identity\")\nAdd standard deviation bar with geom_errorbar\n\ngeom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2)\n\n\n\n\n\n\ndf &lt;- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n    geom_col(width = 1)\n\n\n\n\n\n\n\nidentity means that the size of the bar will be the value you put instead of calculating something\n\n\ndf &lt;- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n    geom_bar(width = 1,  stat = \"identity\")\n\n\n\n\n\n\n\nUsing either geom_bar or geom_col, you can make a pie chart with + coord_polar(\"y\")\n\n\ndf &lt;- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = \"\", y = value, fill = group)) +\n    # x has to be \"\" - check how it looks if you put x = group\n    geom_bar(width = 1,  stat = \"identity\") +\n    coord_polar(\"y\", start = 1) +\n    theme_void() # clean up grids, borders, and labels"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plot---proportions",
    "href": "r/Packages_Functions.html#types-of-plot---proportions",
    "title": "R class - packages and functions",
    "section": "Types of plot - proportions",
    "text": "Types of plot - proportions\nYou can use geom_bar(stat = \"count\") if you do not have the number of occurrences of each category computed. This way, ggplot counts it and plots. - Eg. A table with metabolites detected separated by category: how many metabolites of each category were detected?\nIf you want proportions in %, use stat = \"density\" instead of stat = \"count\"\n\ngeom_bar - count\n\n\n\nWith geom_bar, you can have the same plot as with geom_col if you use stat = \"identity\"\nidentity means that the size of the bar will be the value you put instead of calculating something\n\n\n# Datasets about US states\nUS_statesInfo = data.frame(Name = state.name,\n               Region = state.region,\n               Division = state.division)\nx = \"Number of states\"\n# Plot the number of states in each division\nggplot(US_statesInfo, aes(y = Division)) +\n    geom_bar(stat = \"count\") +\n    xlab(x)\n\n\n\n# Plot the number of states in each region\nggplot(US_statesInfo, aes(y = Region)) +\n    geom_bar() +\n    xlab(x)\n\n\n\n# Plot the number of states in each division, and color by the region\nggplot(US_statesInfo, aes(y = Division, fill = Region)) +\n    geom_bar(stat = \"count\") +\n    xlab(x)"
  },
  {
    "objectID": "r/Packages_Functions.html#types-of-plots---part-3",
    "href": "r/Packages_Functions.html#types-of-plots---part-3",
    "title": "R class - packages and functions",
    "section": "Types of plots - part 3",
    "text": "Types of plots - part 3\nLine graph - geom_line\n\nVisualize data across time - points are connected because they are the same sample at different times.\n\n\nSimpleAdvanced\n\n\nLet’s say we want to see how the labs of 2 PIs have grown across the years and compare the two.\n\n# Let's create a time series to plot\n\nLabSize = data.frame(Isabel = c(0, 3, 5, 10, 30),\n             Hugo = c(2, 2, 6, 9, 9),\n             Year = seq(2014, 2022, 2))\nLabSize.Long = pivot_longer(LabSize,\n                cols = !Year, # all columns from LabSize, except \"Year\"\n                names_to = \"PI\", \n                values_to = \"LabMembers\")\n\nggplot(LabSize.Long, \n       aes(x = Year, y = LabMembers, color = PI)) +\n    geom_line()\n\n\n\n\n\n\n\nInputPrepare the dataCalculate statsLine chartLine chart with error bars\n\n\nWe will use the time series data\n# Load the data\ntimeSeries = read.csv(\"karengoncalves.github.io/ProgrammingClasses/r/exampleData/TimeSeries_example.csv\", row.names = 1)\n\nstr(timeSeries)\n\n'data.frame':   12 obs. of  1 variable:\n $ X.Control_3.Control_2.Control_1.TreatmentA_1.TreatmentA_2.TreatmentA_3.TreatmentB_3.TreatmentB_2.TreatmentB_1: chr  \"1,1,1,1,1,1,1,1,Day_1,0,0,0,0,0,0,0,0,0\" \"2,2,2,2,2,2,2,2,Day_2,1.96,2.04,2,2.94,3,3.06,1.53,1.47,1.5\" \"3,3,3,3,3,3,3,3,Day_3,3.98,4.02,4,6.03,6,5.97,3,2.985,3.015\" \"4,4,4,4,4,4,4,4,Day_4,6.18,6,5.82,8.73,9.27,9,4.5,4.365,4.635\" ...\n\n# Let's add a column indicating the time points\ntimeSeries$TimePoint = paste0(\"T\", 1:nrow(timeSeries))\n\n\n\nLet’s transform the data to format long and add a column with the name of the treatment group\n\ntimeSeriesLong = pivot_longer(\n    timeSeries,\n    cols = !TimePoint,\n    names_to = \"Replicates\",\n    values_to = \"Growth_measure\"\n) %&gt;% mutate(Treatment = str_split_i(Replicates, pattern = \"_\", i = 1))\n\nhead(timeSeriesLong)    \n\n# A tibble: 6 × 4\n  TimePoint Replicates                                  Growth_measure Treatment\n  &lt;chr&gt;     &lt;chr&gt;                                       &lt;chr&gt;          &lt;chr&gt;    \n1 T1        X.Control_3.Control_2.Control_1.TreatmentA… 1,1,1,1,1,1,1… X.Control\n2 T2        X.Control_3.Control_2.Control_1.TreatmentA… 2,2,2,2,2,2,2… X.Control\n3 T3        X.Control_3.Control_2.Control_1.TreatmentA… 3,3,3,3,3,3,3… X.Control\n4 T4        X.Control_3.Control_2.Control_1.TreatmentA… 4,4,4,4,4,4,4… X.Control\n5 T5        X.Control_3.Control_2.Control_1.TreatmentA… 5,5,5,5,5,5,5… X.Control\n6 T6        X.Control_3.Control_2.Control_1.TreatmentA… 6,6,6,6,6,6,6… X.Control\n\n# We need to specify the order of the time points!\ntimeSeriesLong$TimePoint = factor(timeSeriesLong$TimePoint,\n                  levels = timeSeries$TimePoint)\n\n\n\nNow let’s create another table with the mean, standard deviation and coefficient of variation of each treatment per time point\n\nGrowthMeasureStats = timeSeriesLong %&gt;%\n    group_by(Treatment, TimePoint) %&gt;%\n    summarise(\n        Mean = mean(Growth_measure),\n        StdEnv = sd(Growth_measure),\n        CoefVar = sd(Growth_measure) / \n            mean(Growth_measure)\n    )\n\n\n\n\nggplot(GrowthMeasureStats) +\n    geom_line(aes(x = TimePoint, y = Mean, \n              group = Treatment, # this is important, repeat this code without this line to see why\n              color = Treatment))\n\n\n\n\n\n\nFor the error bars, we cannot simply say “here, this is the standard deviation”.\nWe need to tell it “use this value as maximum and this as minimum”\nSee that we set “ymin” and “ymax”. If you have standard deviation for the x-axis, you can add it with “xmin” and “xmax”.\n\n# We put inside ggplot() what is common to all layers\nggplot(GrowthMeasureStats, aes(\n    x = TimePoint, \n    group = Treatment, # this is important, repeat this code without this line to see why\n    color = Treatment)) +\n    geom_line(aes(y = Mean)) +\n    geom_errorbar(aes(ymin = Mean - StdEnv,\n              ymax = Mean + StdEnv),\n              width = 0.2)"
  },
  {
    "objectID": "r/Packages_Functions.html#references",
    "href": "r/Packages_Functions.html#references",
    "title": "R class - packages and functions",
    "section": "References",
    "text": "References\n\nAll tidyverse packages\nTutorials on all types of plots with ggplot2\n\nr-statistics\nCedric Scherer - advanced\n\nTutorials on data manipulation with dplyr\n\nTidyverse\nR official\nGenomics class"
  },
  {
    "objectID": "r/Packages_Functions.html#code-from-class",
    "href": "r/Packages_Functions.html#code-from-class",
    "title": "R class - packages and functions",
    "section": "Code from class",
    "text": "Code from class\nTuesdays group\n\nSeptember 19th\nSeptember 19th (2)\nOctober 3rd\nOctober 10th\n\nFridays group\n\nSeptember 15th\nSeptember 29th\nOctober 6th"
  },
  {
    "objectID": "r/Working_with_your_data.html#datasets-and-scripts",
    "href": "r/Working_with_your_data.html#datasets-and-scripts",
    "title": "Working with your data - Elisa",
    "section": "Datasets and scripts",
    "text": "Datasets and scripts\n\nGo to the github page to get the scripts and datasets: github.com/KarenGoncalves/R_class_examples\n\nExcel files need to be downloaded into your computer to be read by R\n\nDownload the scripts. We will go through them and you can add comments and run new commands to test the script and dataset.\n\n\n\n\n\n\n\nFor all datasets, we will use the packages tidyverse and readxl"
  },
  {
    "objectID": "r/Working_with_your_data.html#correcting-original-dataset",
    "href": "r/Working_with_your_data.html#correcting-original-dataset",
    "title": "Working with your data - Elisa",
    "section": "Correcting original dataset",
    "text": "Correcting original dataset\n\nPut each Rep in a separate sheet\nRename column names\nCreate metadata sheet\nCheck what symbol is used to represent NA\nGet correct data here"
  },
  {
    "objectID": "r/Working_with_your_data.html#corrected-dataset",
    "href": "r/Working_with_your_data.html#corrected-dataset",
    "title": "Working with your data - Elisa",
    "section": "Corrected dataset",
    "text": "Corrected dataset"
  },
  {
    "objectID": "r/Working_with_your_data.html#prepare-script",
    "href": "r/Working_with_your_data.html#prepare-script",
    "title": "Working with your data - Elisa",
    "section": "Prepare script",
    "text": "Prepare script\n\nGet script here\n\n#### Install and load packages ####\n# start by creating a vector with all the packages you need\npkgs = c(\"readxl\", \"tidyverse\", \"ggpubr\")\n\n# We check which packages are NOT (!) installed\npkgs.To.Install = ! pkgs %in% installed.packages()\n\n# any() checks if there is at least one TRUE in the vector\nif (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])\n\nfor (curPkg in pkgs) library(curPkg, character.only = T) \n# curPkg is a variable that takes the value of each element in pkgs\n# Every time the function library() is run, curPkg changes value\n\nreadxl - deal with excel file\ntidyverse - prepare, sort, rearrange and plot data\nggpubr - put multiple plots into a single figure"
  },
  {
    "objectID": "r/Working_with_your_data.html#set-basic-variables",
    "href": "r/Working_with_your_data.html#set-basic-variables",
    "title": "Working with your data - Elisa",
    "section": "Set basic variables",
    "text": "Set basic variables\n\nGet script here\nGet data here and save it in your project folder as Inputs/ELISA_YFP_Cys & YPF clones_EF20230330.xls”\n\n#### Set basic variables ####\n# Set the name of the input file and\nElisaFile = \"Inputs/ELISA_YFP_Cys & YPF clones_EF20230330.xls\"\ncolumnNames = c(\"chlorophyll_pos\", \"YFP_pos\", \"Mean_YFP_pos\")\ncolors = c(\"black\", \"blue\", \"forestgreen\",\n       \"red\", \"magenta\", \"orange\") # six colors for the six technical replicates\nchlorophyll_threshold = 75 # Minimum % of chlorophyll positive cells (decided by data provider - Elisa)\nsheetsElisa = excel_sheets(ElisaFile) # List of sheet names"
  },
  {
    "objectID": "r/Working_with_your_data.html#read-the-excel-file",
    "href": "r/Working_with_your_data.html#read-the-excel-file",
    "title": "Working with your data - Elisa",
    "section": "Read the excel file",
    "text": "Read the excel file\nWe will use the function lapply to create a list containing each of the sheets in the input file\nThink of lapply as a for loop: repeat the same function for a list of objects and returns the output of each one as an element of a list\nlapply(list, function(variable_name))\n\nfunction can be directly the function you want to apply\n\nlapply(iris[, 1:4], mean) # calculate the mean for each column\n\nfunction(variable_name) or \\(variable_name) is useful when you need to use a variable name in function\n\nlapply(1:4, function(variable_name) mean(iris[,variable_name]))\nIf the function we want to apply spans several lines, we put it in {}\n\n\n#### Read input file and prepare it ####\nElisa_Chlorophyll_YFP = lapply(sheetsElisa, \\(sheet) {\n    # All the sheets will be saved into a list\n    currentSheet = read_excel(ElisaFile, sheet = sheet, na = \"n/a\")\n    if (sheet != \"Metadata\") { # Just execute the code inside the {} if sheet is not \"Metadata\"\n        # Create a column to indicate the technical replicates (name of the sheet)\n        currentSheet$Technical_replicate = sheet\n        # And indicate that the first column has the clone names\n        names(currentSheet)[1] = \"Clone\"\n    }\n    currentSheet\n})\n\nnames(Elisa_Chlorophyll_YFP) = sheetsElisa"
  },
  {
    "objectID": "r/Working_with_your_data.html#manipulate-the-data",
    "href": "r/Working_with_your_data.html#manipulate-the-data",
    "title": "Working with your data - Elisa",
    "section": "Manipulate the data",
    "text": "Manipulate the data\n\ndo.callsapplypatternifelse\n\n\n\n!= - comparison, means NOT EQUAL TO\ndo.call is used here to join the elements of a list using the function “rbind”\n\nrbind will BIND data.frames by Rows (one table is pasted under the the other)\n\n\n\n# Specify which sheet doesn't contain measurements\nnotMetadata = sheetsElisa != \"Metadata\"\n# Put all the sheets containing measurements into one table\nElisa_Chlorophyll_YFP_all = \n    do.call(what = \"rbind\", Elisa_Chlorophyll_YFP[notMetadata])\n\n\n\nsapply - same as lapply, but the result is a named vector OR named list\n\nif you expect a list or data.frame, test first to see if you get the expected output format, if not, use lapply\n\nYou can select elements of a named list as: named.list$element1 or named.list[[element1]] or named.list[[1]]\ngsub(\"_\\\\d+$\", \"\", cloneName) no matter the value of “cloneName”, we remove the number of the clone:\n\ncheck the tab pattern\n\n\n# Create a column with the construct name\nElisa_Chlorophyll_YFP_all$Construct = \n    sapply(Elisa_Chlorophyll_YFP_all$Clone, \\(cloneName) {\n        # Remove the underscore and number from the clone name to get the construct\n        pattern = paste0(\"^\", gsub(\"_\\\\d+$\", \"\", cloneName), \"$\")\n        # Get the construct name from the metadata\n        cloneGroup = grep(pattern, Elisa_Chlorophyll_YFP$Metadata$Name)\n        construct = Elisa_Chlorophyll_YFP$Metadata$Type[cloneGroup]\n        # If the construct name in the metadata has the word negative, replace the name with EV\n        ifelse(grepl(\"Negative\", construct), \"EV\", construct)\n    }) |&gt;\n    factor(levels = c(\"EV\", \"YFP\", \"PtCys_YFP\"))\n\n\nRegular expression is a way to work with text\n\ngrep - similar to CTRL+F\ngsub/sub - similar to replace or CTRL+H\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)\n\n\n\n\ngrepl - returns TRUE if the pattern is found, FALSE if not\nifelse: if TRUE, do this, else do that (si VRAI, fait ça, sinon fait une autre chose)\nThus: IF the word “Negative” is found in the variable ‘construct’, return “EV”, if not return the variable ‘construct’"
  },
  {
    "objectID": "r/Working_with_your_data.html#plots",
    "href": "r/Working_with_your_data.html#plots",
    "title": "Working with your data - Elisa",
    "section": "Plots",
    "text": "Plots\n\nPlot labelsPlots (lapply)\n\n\nMake a vector with the labels of the y-axis for each plot, naming the elements so that we can select them\nyLabs = c(chlorophyll = \"Chlorophyll-positive cells (%)\",\n      YFP = \"YFP-positive cells (%)\")\nyLabs[\"chlorophyll\"]\n\n\nplots = lapply(c(\"chlorophyll\", \"YFP\"), \\(plotName) {\n    # column is either chlorophyll_pos or YFP_pos\n    colName = paste0(plotName, \"_pos\")\n    \n    # Make vector with the names of the columns to use in the plot\n    selectedCols = c(\"Construct\", \"Technical_replicate\", colName)\n    plotData = Elisa_Chlorophyll_YFP_all[, selectedCols]\n    # We rename the column with values to plot so that we can select it in ggplot \n    names(plotData)[3] =  \"column\" \n    \n    ggplot(plotData, \n           aes(x = Construct, \n               y = column, \n               color = Technical_replicate)) + \n        geom_point(position = \"jitter\", size = 0.5) +\n        scale_color_manual(values = colors,\n                   name = \"Technical\\nReplicate\") +\n        scale_y_continuous(limits = c(0, 100),\n                   breaks = seq(0, 100, 25)) +\n        labs(x = \"Strain\", y = yLabs[plotName])\n    \n})\n\n# Name the plots in the list\nnames(plots) = paste0(c(\"chlorophyll\", \"YFP\"), \"_all\")\n\ngeom_point(position = \"jitter\", size = 0.5)\n\nposition = \"jitter\": points will be spread (try removing this)\nsize = 0.5: size of each point (choice of size is dependent on total number of points, size of the plot, resolution, check with your data)\n\nscale_color_manual(values = colors, name = \"Technical\\nReplicate\")\n\nColors used will be the ones in the vector colors\n“” means line break, so “Technical” and “Replicate” will be in separate lines\n\nscale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 25))\n\nlimits specifies where the axis starts and ends\nbreaks specifies where the marks in the axis go."
  },
  {
    "objectID": "r/Working_with_your_data.html#anova",
    "href": "r/Working_with_your_data.html#anova",
    "title": "Working with your data - Elisa",
    "section": "ANOVA",
    "text": "ANOVA\nANOVA asks the question: are there differences between the groups?\nTukey (post-hoc test) asks: which groups are different?\n:::{.panel-tabset}"
  },
  {
    "objectID": "useful_R.html",
    "href": "useful_R.html",
    "title": "Useful R commands",
    "section": "",
    "text": "You can get help about a package or function with the function help(). Just put the quoted name of the package/function inside the parenthesis.\nYou can also just use a question mark in front of the package/function name (no quote needed in this case)\nhelp(\"grep\")\n?grepl\n\nhelp(\"stats\")\n?base"
  },
  {
    "objectID": "useful_R.html#readxl-package---open-excel-files",
    "href": "useful_R.html#readxl-package---open-excel-files",
    "title": "Useful R commands",
    "section": "readxl package - open excel files",
    "text": "readxl package - open excel files\nPart of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  },
  {
    "objectID": "useful_R.html#regular-expressions-regex",
    "href": "useful_R.html#regular-expressions-regex",
    "title": "Useful R commands",
    "section": "Regular expressions (Regex)",
    "text": "Regular expressions (Regex)\nThese are ways to search text without writing the explicitly what you are searching.\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)"
  },
  {
    "objectID": "useful_R.html#split-strings-text",
    "href": "useful_R.html#split-strings-text",
    "title": "Useful R commands",
    "section": "Split strings (text)",
    "text": "Split strings (text)\nUse symbol or letter to split a text into a vector (similar to excel’s “text to columns” command)\nExample: arabidopsis genes are named as “AT” chromosome number “G” gene number. So we can separate the gene number from the chromosome number using “G” as the pattern/split.\n\nBasic r: strsplit(x, split)stringr package:\n\n\n\nx is a character vector\nsplit is the symbol/letter that will be used to separate the text\nThe result is a list. If x has 10 elements, the resulting list will have also 10 elements, each one a character vector.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# With strsplit and str_split, in each list, the chromosome number is the first element, the gene number is the second\nstrsplit(x = Arabidopsis_Genes, split = 'G')\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\n\n\nstr_split - same as basic r command strsplit, x is called string and split is called pattern\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\nlibrary(stringr)\nstr_split(string = Arabidopsis_Genes, pattern = \"G\")\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\nstr_split_1 - string has to be a character vector of size 1\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# str_split_1 accepts only one element at a time\n# The result is the same as str_split(string = Arabidopsis_Genes, pattern = \"G\")[[1]]\nstr_split_1(string = Arabidopsis_Genes[1], pattern = \"G\")\n\n[1] \"AT1\"   \"01020\"\n\n\n\nstr_split_fixed(string, pattern, n) - similar to str_split, but the result is a matrix (vector with columns and rows). You need to specify n, the max number of pieces to return for each string from the input\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# str_split_fixed returns a matrix with nrow == length(string) and ncol == n\nstr_split_fixed(string = Arabidopsis_Genes, pattern = \"G\", n = 2)\n\n     [,1]  [,2]   \n[1,] \"AT1\" \"01020\"\n[2,] \"AT1\" \"01030\"\n[3,] \"AT1\" \"01040\"\n\n\n\nstr_split_i(string, pattern, i) - similar to str_split_fixed, but i is used to specify which column we want to keep from the matrix.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# With str_split_i, you specify which part of the string you want to keep after the split\n# If we want to keep just the gene number in this case, we select the second part, the one that comes after \"G\"\nstr_split_i(string = Arabidopsis_Genes, pattern = \"G\", i = 2)\n\n[1] \"01020\" \"01030\" \"01040\"\n\n\n\n\n\n\nSearch for word or pattern: grep and grepl\nBoth are similar to “CTRL+F”, but have some extra capabilities.\n:::{.panel-tabset} # Basic command\ngrep(pattern, x, fixed = F) where\n\npattern is the word of Regex to search\nx is the character vector or even data.frame in which you are searching\nIf fixed is omitted or F, search will allow regex, else it will take patterns as literal words (meaning \\w will match only \\w, not “any letter, number or _“)"
  },
  {
    "objectID": "useful_R.html#get-help",
    "href": "useful_R.html#get-help",
    "title": "Useful R commands",
    "section": "",
    "text": "You can get help about a package or function with the function help(). Just put the quoted name of the package/function inside the parenthesis.\nYou can also just use a question mark in front of the package/function name (no quote needed in this case)\nhelp(\"grep\")\n?grepl\n\nhelp(\"stats\")\n?base"
  },
  {
    "objectID": "useful_R.html#create-sequences",
    "href": "useful_R.html#create-sequences",
    "title": "Useful R commands",
    "section": "Create sequences",
    "text": "Create sequences\nUse the command seq to get a sequence of numbers. You can specify the interval between every number shown. The function is writen as: seq(FROM, TO, INTERVAL)\n\nseq(1, 2, 0.1)\n\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n\n\nIf you want to see every integer between two numbers you can use : or you can omit the interval in the seq command.\n\n# Get very integer between 0 and 10\nseq(0, 10)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n0:10\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n# Get every integer between 0 and 10 in decreasing order\nseq(10, 0)\n\n [1] 10  9  8  7  6  5  4  3  2  1  0\n\n10:0\n\n [1] 10  9  8  7  6  5  4  3  2  1  0"
  },
  {
    "objectID": "useful_R.html#repeat-rep",
    "href": "useful_R.html#repeat-rep",
    "title": "Useful R commands",
    "section": "Repeat rep",
    "text": "Repeat rep\nSyntax: rep(X, TIMES, EACH)\n\nX - what you want to repeat: vector of characters, numbers or logical (T/F)\nTIMES: repeat how many times\nEACH: if there is more than one element in WHAT, you repeat the first, then the second…\n\n\n# repeat X (1 in this case) 4 times\nrep(1, 4)\n\n[1] 1 1 1 1\n\n# repeat X (vector c(1, 2)) 4 times\nrep(c(1, 2), 4)\n\n[1] 1 2 1 2 1 2 1 2\n\n# repeat the elements of the input 4 times each\nrep(c(1, 2), each = 4)\n\n[1] 1 1 1 1 2 2 2 2"
  },
  {
    "objectID": "useful_R.html#overview-data",
    "href": "useful_R.html#overview-data",
    "title": "Useful R commands",
    "section": "Overview data",
    "text": "Overview data\n\nstrhead or tailsummaryDimensions\n\n\nSee data structure. Shows number of rows and columns in a data frame, classes of the columns, first few elements of each column.\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\nYou can add the option “max.level = X” if you know the object is nested (list inside of list inside of list) so that you don’t print too many nested levels.\n\n\n\n\n\nShows the beginning or the end of an object (you can specify the number of lines printed with n = X)\n\nhead(iris, n = 7)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n7          4.6         3.4          1.4         0.3  setosa\n\ntail(iris, n = 3)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\n\n\nPrint column-wise info about data frames, shows relevant data from tests, such as aov or t.test.\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\n\n\n\ndim(x)\n\nDimensions of a dataset: For a data frame it is c(1, 2), for a vector it is c(1). -length(x)\nnumber of elements in a vector, or columns in a data frame or elements in a list\n\nncol or nrow\n\nnumber of columns/rows in a data frame\n\nnames\n\nNames of columns of a data frame\nNames of objects in a named list or named vector\n\n\n\ndim(iris)\n\n[1] 150   5\n\nlength(iris)\n\n[1] 5\n\nlength(iris[,1])\n\n[1] 150\n\nncol(iris)\n\n[1] 5\n\nnrow(iris)\n\n[1] 150\n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nmy_numbers = 1:3; names(my_numbers) = c(\"A\", \"B\", \"C\")\nnames(my_numbers)\n\n[1] \"A\" \"B\" \"C\""
  },
  {
    "objectID": "useful_R.html#install-and-load-packages",
    "href": "useful_R.html#install-and-load-packages",
    "title": "Useful R commands",
    "section": "Install and load packages",
    "text": "Install and load packages\n# Names of packages installed:\nrownames(installed.packages())\n# Install a package\ninstall.packages(\"tidyverse\")\n\n# Load a package into the R session\nlibrary(tidyverse)\n# OR\nmyPackage = \"tidyverse\"\nlibrary(myPackage, character.only = T)"
  },
  {
    "objectID": "useful_R.html#working-with-text",
    "href": "useful_R.html#working-with-text",
    "title": "Useful R commands",
    "section": "Working with text",
    "text": "Working with text\n\nRegular expressions (Regex)\nThese are ways to search text without writing the explicitly what you are searching.\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\nPatterns (what to search)\n\nany digit: \"\\\\d\"\nany word character (letters, _, digits): \"\\\\w\"\nany character (including special symbols and space): \".\"\nIf you want to create your set of characters allowed in the pattern, just use []\n\nI want to search only uppercase letters: \"[A-Z]\"\nSpecial symbols: \"[\\\\.\\\\*\\\\-]\" (put two backslashes \\\\ before the symbol)\n\n\nQuantifiers (how many times the pattern occurs)\n\nSpecific number of times: A{X}, where X is the number of times A appears\nBetween X and Y times: e{X,Y}, e appears at least X times, at most Y times (in tandem)\nAt least X times, but can be more: T{X,} (nothing after the “,” means INFINITY)\nAt least once, but can be more: N+\nMay not appear, may appear multiple times: C*\n\nAnchors\n\nText MUST start with the pattern “ATG”: \"^ATG\" (start pattern with ^)\nTranscript must end with stop codon: \"T[GA][GA]$\" (end pattern with $)\n\n\n\n\nSplit strings (text)\nUse symbol or letter to split a text into a vector (similar to excel’s “text to columns” command)\nExample: arabidopsis genes are named as “AT” chromosome number “G” gene number. So we can separate the gene number from the chromosome number using “G” as the pattern/split.\n\nBasic r: strsplit(x, split)stringr package:\n\n\n\nx is a character vector\nsplit is the symbol/letter that will be used to separate the text\nThe result is a list. If x has 10 elements, the resulting list will have also 10 elements, each one a character vector.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# With strsplit and str_split, in each list, the chromosome number is the first element, the gene number is the second\nstrsplit(x = Arabidopsis_Genes, split = 'G')\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\n\n\nstr_split - same as basic r command strsplit, x is called string and split is called pattern\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\nlibrary(stringr)\nstr_split(string = Arabidopsis_Genes, pattern = \"G\")\n\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n\n\n\nstr_split_1 - string has to be a character vector of size 1\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# str_split_1 accepts only one element at a time\n# The result is the same as str_split(string = Arabidopsis_Genes, pattern = \"G\")[[1]]\nstr_split_1(string = Arabidopsis_Genes[1], pattern = \"G\")\n\n[1] \"AT1\"   \"01020\"\n\n\n\nstr_split_fixed(string, pattern, n) - similar to str_split, but the result is a matrix (vector with columns and rows). You need to specify n, the max number of pieces to return for each string from the input\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# str_split_fixed returns a matrix with nrow == length(string) and ncol == n\nstr_split_fixed(string = Arabidopsis_Genes, pattern = \"G\", n = 2)\n\n     [,1]  [,2]   \n[1,] \"AT1\" \"01020\"\n[2,] \"AT1\" \"01030\"\n[3,] \"AT1\" \"01040\"\n\n\n\nstr_split_i(string, pattern, i) - similar to str_split_fixed, but i is used to specify which column we want to keep from the matrix.\n\n\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# With str_split_i, you specify which part of the string you want to keep after the split\n# If we want to keep just the gene number in this case, we select the second part, the one that comes after \"G\"\nstr_split_i(string = Arabidopsis_Genes, pattern = \"G\", i = 2)\n\n[1] \"01020\" \"01030\" \"01040\"\n\n\n\n\n\n\n\nSearch for word or pattern: grep and grepl\nBoth are similar to “CTRL+F”, but have some extra capabilities.\n\nBasic commandSpecifics\n\n\ngrep(pattern, x, fixed = F) where\n\npattern is the word of Regex to search\nx is the character vector or even data.frame in which you are searching\nIf fixed is omitted or F, search will allow regex, else it will take patterns as literal words (meaning \\w will match only \\w, not “any letter, number or _“)\n\n\n\ngrep result is either a vector with the index of the match:\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students)\n\n[1] 1 2 5\n\n# The result is c(1, 2, 5), because the names containing the letter \"a\" are the 1st, 2nd and 5th elements of the input \n\nYou can ask grep to return the matches instead of their indices by adding value = T\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students, value = T)\n\n[1] \"Fadoua\"   \"Arghavan\" \"Valeria\" \n\n\ngrepl returns a vector of the same size as the input with only TRUE or FALSE\n\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrepl(\"a\", names_students)\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n# Because the question asked is \"is the letter \"a\" in element1, element2... you cannot use the argument `value = T`"
  },
  {
    "objectID": "useful_R.html#read.xxx",
    "href": "useful_R.html#read.xxx",
    "title": "Useful R commands",
    "section": "read.XXX",
    "text": "read.XXX\n\n\n\n\nFunction\nColumn separation\nDecimal separation\n\n\n\n\nread.csv\nsep = \",\"\ndec = \".\"\n\n\nread.csv2\nsep = \";\"\ndec = \",\"\n\n\nread.delim\nsep = \"\\t\" (tab)\ndec = \".\"\n\n\nread.delim2\nsep = \"\\t\" (tab)\ndec = \",\""
  },
  {
    "objectID": "useful_R.html#objects-in-r-environment",
    "href": "useful_R.html#objects-in-r-environment",
    "title": "Useful R commands",
    "section": "Objects in R environment",
    "text": "Objects in R environment\n\n# Check what you have in the environment\nls()\n\n[1] \"caption\"         \"cheat_sheet\"     \"colNames\"        \"has_annotations\"\n[5] \"my_numbers\"     \n\n# remove an object from the environment\nrm(\"cheat_sheet\"); ls()\n\n[1] \"caption\"         \"colNames\"        \"has_annotations\" \"my_numbers\""
  },
  {
    "objectID": "useful_R.html#read-excel-spreadsheets",
    "href": "useful_R.html#read-excel-spreadsheets",
    "title": "Useful R commands",
    "section": "Read excel spreadsheets",
    "text": "Read excel spreadsheets\nreadxl package - Part of the tidyverse package\nAllows you to:\n\nCheck the names of the sheets of an excel file: excel_sheets(MY_EXCEL_FILE)\nRead sheets of an excel file as tibbles (a type of data.frame):\n\nread_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)\nYou can specify what defines NA: read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")\nInstead of header = T, you use col_names = T\nYou can specify the number of rows to skip in the beginning with skip = N\nYou can specify the number of rows to read with n_max = N\nYou can specify which cols and rows to read with range = \"H40:T80\"\n\nIf range is specified, skip and n_max are ignored\nYou can include the name of the sheet: range = \"MY_SHEET!H40:T80\"\n\nSHEET EXCLAMATION_POINT CELL_RANGE"
  }
]